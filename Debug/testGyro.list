
testGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011adc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a30  08011c70  08011c70  00012c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126a0  080126a0  000141e8  2**0
                  CONTENTS
  4 .ARM          00000008  080126a0  080126a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126a8  080126a8  000141e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126a8  080126a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080126ac  080126ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080126b0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e4  200001e8  08012898  000141e8  2**2
                  ALLOC
 10 ._user_heap_stack 00012004  200016cc  08012898  000146cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecdf  00000000  00000000  00014218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023df  00000000  00000000  00022ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000252d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a13  00000000  00000000  00025ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027783  00000000  00000000  00026a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011db9  00000000  00000000  0004e18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec9b8  00000000  00000000  0005ff47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000093  00000000  00000000  0014c8ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  0014c994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001518e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011c54 	.word	0x08011c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08011c54 	.word	0x08011c54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	21d0      	movs	r1, #208	@ 0xd0
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <MPU6050_Writebyte+0x34>)
 800100a:	f001 f9db 	bl	80023c4 <HAL_I2C_Mem_Write>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000a94 	.word	0x20000a94

0800101c <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af04      	add	r7, sp, #16
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	b29a      	uxth	r2, r3
 800102c:	2301      	movs	r3, #1
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	21d0      	movs	r1, #208	@ 0xd0
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <MPU6050_Readbyte+0x30>)
 800103e:	f001 fad5 	bl	80025ec <HAL_I2C_Mem_Read>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000a94 	.word	0x20000a94

08001050 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af04      	add	r7, sp, #16
 8001056:	4603      	mov	r3, r0
 8001058:	603a      	str	r2, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	460b      	mov	r3, r1
 800105e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	b29a      	uxth	r2, r3
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	b29b      	uxth	r3, r3
 8001068:	2101      	movs	r1, #1
 800106a:	9102      	str	r1, [sp, #8]
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	21d0      	movs	r1, #208	@ 0xd0
 8001076:	4803      	ldr	r0, [pc, #12]	@ (8001084 <MPU6050_Readbytes+0x34>)
 8001078:	f001 fab8 	bl	80025ec <HAL_I2C_Mem_Read>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000a94 	.word	0x20000a94

08001088 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 800108e:	2032      	movs	r0, #50	@ 0x32
 8001090:	f000 fe30 	bl	8001cf4 <HAL_Delay>
	uint8_t who_am_i = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	707b      	strb	r3, [r7, #1]
	printf("Checking MPU6050...\n");
 8001098:	484d      	ldr	r0, [pc, #308]	@ (80011d0 <MPU6050_Initialization+0x148>)
 800109a:	f00b fc19 	bl	800c8d0 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 800109e:	1c7b      	adds	r3, r7, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	2075      	movs	r0, #117	@ 0x75
 80010a4:	f7ff ffba 	bl	800101c <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b68      	cmp	r3, #104	@ 0x68
 80010ac:	d105      	bne.n	80010ba <MPU6050_Initialization+0x32>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 80010ae:	787b      	ldrb	r3, [r7, #1]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4848      	ldr	r0, [pc, #288]	@ (80011d4 <MPU6050_Initialization+0x14c>)
 80010b4:	f00b fba4 	bl	800c800 <iprintf>
 80010b8:	e00f      	b.n	80010da <MPU6050_Initialization+0x52>
	}
	else
	{
		printf("ERROR!\n");
 80010ba:	4847      	ldr	r0, [pc, #284]	@ (80011d8 <MPU6050_Initialization+0x150>)
 80010bc:	f00b fc08 	bl	800c8d0 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4845      	ldr	r0, [pc, #276]	@ (80011dc <MPU6050_Initialization+0x154>)
 80010c6:	f00b fb9b 	bl	800c800 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 80010ca:	4845      	ldr	r0, [pc, #276]	@ (80011e0 <MPU6050_Initialization+0x158>)
 80010cc:	f00b fc00 	bl	800c8d0 <puts>
			HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f000 fe0f 	bl	8001cf4 <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 80010d6:	bf00      	nop
 80010d8:	e7f7      	b.n	80010ca <MPU6050_Initialization+0x42>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	206b      	movs	r0, #107	@ 0x6b
 80010de:	f7ff ff81 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(100);
 80010e2:	2064      	movs	r0, #100	@ 0x64
 80010e4:	f000 fe06 	bl	8001cf4 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 80010e8:	2100      	movs	r1, #0
 80010ea:	206b      	movs	r0, #107	@ 0x6b
 80010ec:	f7ff ff7a 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80010f0:	2032      	movs	r0, #50	@ 0x32
 80010f2:	f000 fdff 	bl	8001cf4 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
	//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 80010f6:	2127      	movs	r1, #39	@ 0x27
 80010f8:	2019      	movs	r0, #25
 80010fa:	f7ff ff73 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80010fe:	2032      	movs	r0, #50	@ 0x32
 8001100:	f000 fdf8 	bl	8001cf4 <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 8001104:	2100      	movs	r1, #0
 8001106:	201a      	movs	r0, #26
 8001108:	f7ff ff6c 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 800110c:	2032      	movs	r0, #50	@ 0x32
 800110e:	f000 fdf1 	bl	8001cf4 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4619      	mov	r1, r3
 800111e:	201b      	movs	r0, #27
 8001120:	f7ff ff60 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001124:	2032      	movs	r0, #50	@ 0x32
 8001126:	f000 fde5 	bl	8001cf4 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x0;
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	201c      	movs	r0, #28
 8001138:	f7ff ff54 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 800113c:	2032      	movs	r0, #50	@ 0x32
 800113e:	f000 fdd9 	bl	8001cf4 <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 8001142:	79ba      	ldrb	r2, [r7, #6]
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f8a1 	bl	8001290 <MPU6050_Get_LSB_Sensitivity>
	printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);
 800114e:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <MPU6050_Initialization+0x15c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9f8 	bl	8000548 <__aeabi_f2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MPU6050_Initialization+0x160>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	e9cd 2300 	strd	r2, r3, [sp]
 800116e:	4622      	mov	r2, r4
 8001170:	462b      	mov	r3, r5
 8001172:	481e      	ldr	r0, [pc, #120]	@ (80011ec <MPU6050_Initialization+0x164>)
 8001174:	f00b fb44 	bl	800c800 <iprintf>

	//Interrupt PIN setting
	uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 8001178:	2300      	movs	r3, #0
 800117a:	717b      	strb	r3, [r7, #5]
	uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 800117c:	2300      	movs	r3, #0
 800117e:	713b      	strb	r3, [r7, #4]
	uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8001180:	2301      	movs	r3, #1
 8001182:	70fb      	strb	r3, [r7, #3]
	MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	b25a      	sxtb	r2, r3
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	015b      	lsls	r3, r3, #5
 800118e:	b25b      	sxtb	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b25a      	sxtb	r2, r3
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b25b      	sxtb	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	2037      	movs	r0, #55	@ 0x37
 80011a4:	f7ff ff1e 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80011a8:	2032      	movs	r0, #50	@ 0x32
 80011aa:	f000 fda3 	bl	8001cf4 <HAL_Delay>

	//Interrupt enable setting
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 80011ae:	2301      	movs	r3, #1
 80011b0:	70bb      	strb	r3, [r7, #2]
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2038      	movs	r0, #56	@ 0x38
 80011b8:	f7ff ff14 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80011bc:	2032      	movs	r0, #50	@ 0x32
 80011be:	f000 fd99 	bl	8001cf4 <HAL_Delay>

	printf("MPU6050 setting is finished\n");
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <MPU6050_Initialization+0x168>)
 80011c4:	f00b fb84 	bl	800c8d0 <puts>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	08011c70 	.word	0x08011c70
 80011d4:	08011c84 	.word	0x08011c84
 80011d8:	08011ca4 	.word	0x08011ca4
 80011dc:	08011cac 	.word	0x08011cac
 80011e0:	08011cd8 	.word	0x08011cd8
 80011e4:	20000a90 	.word	0x20000a90
 80011e8:	20000a8c 	.word	0x20000a8c
 80011ec:	08011d04 	.word	0x08011d04
 80011f0:	08011d38 	.word	0x08011d38

080011f4 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	461a      	mov	r2, r3
 8001202:	210e      	movs	r1, #14
 8001204:	203b      	movs	r0, #59	@ 0x3b
 8001206:	f7ff ff23 	bl	8001050 <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 800120a:	7a3b      	ldrb	r3, [r7, #8]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	7a7b      	ldrb	r3, [r7, #9]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21a      	sxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21a      	sxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 8001252:	7c3b      	ldrb	r3, [r7, #16]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7c7b      	ldrb	r3, [r7, #17]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 8001264:	7cbb      	ldrb	r3, [r7, #18]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7cfb      	ldrb	r3, [r7, #19]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 8001276:	7d3b      	ldrb	r3, [r7, #20]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7d7b      	ldrb	r3, [r7, #21]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21a      	sxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	819a      	strh	r2, [r3, #12]
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d81a      	bhi.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
 80012a6:	a201      	add	r2, pc, #4	@ (adr r2, 80012ac <MPU6050_Get_LSB_Sensitivity+0x1c>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012c5 	.word	0x080012c5
 80012b4:	080012cd 	.word	0x080012cd
 80012b8:	080012d5 	.word	0x080012d5
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 80012c0:	601a      	str	r2, [r3, #0]
		break;
 80012c2:	e00b      	b.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 80012c8:	601a      	str	r2, [r3, #0]
		break;
 80012ca:	e007      	b.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001338 <MPU6050_Get_LSB_Sensitivity+0xa8>)
 80012d0:	601a      	str	r2, [r3, #0]
		break;
 80012d2:	e003      	b.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012d6:	4a19      	ldr	r2, [pc, #100]	@ (800133c <MPU6050_Get_LSB_Sensitivity+0xac>)
 80012d8:	601a      	str	r2, [r3, #0]
		break;
 80012da:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d81e      	bhi.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
 80012e2:	a201      	add	r2, pc, #4	@ (adr r2, 80012e8 <MPU6050_Get_LSB_Sensitivity+0x58>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	08001303 	.word	0x08001303
 80012f0:	0800130d 	.word	0x0800130d
 80012f4:	08001317 	.word	0x08001317
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 80012fa:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80012fe:	601a      	str	r2, [r3, #0]
		break;
 8001300:	e00e      	b.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001304:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001308:	601a      	str	r2, [r3, #0]
		break;
 800130a:	e009      	b.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800130e:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001312:	601a      	str	r2, [r3, #0]
		break;
 8001314:	e004      	b.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001318:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800131c:	601a      	str	r2, [r3, #0]
		break;
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	20000a90 	.word	0x20000a90
 8001330:	43030000 	.word	0x43030000
 8001334:	42830000 	.word	0x42830000
 8001338:	42033333 	.word	0x42033333
 800133c:	41833333 	.word	0x41833333
 8001340:	20000a8c 	.word	0x20000a8c
 8001344:	00000000 	.word	0x00000000

08001348 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800135e:	4b3c      	ldr	r3, [pc, #240]	@ (8001450 <MPU6050_DataConvert+0x108>)
 8001360:	ed93 7a00 	vldr	s14, [r3]
 8001364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137c:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <MPU6050_DataConvert+0x108>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <MPU6050_DataConvert+0x108>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a06 	vstr	s15, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001454 <MPU6050_DataConvert+0x10c>
 80013bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013c0:	ee16 0a90 	vmov	r0, s13
 80013c4:	f7ff f8c0 	bl	8000548 <__aeabi_f2d>
 80013c8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001448 <MPU6050_DataConvert+0x100>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7fe ff5d 	bl	800028c <__adddf3>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc05 	bl	8000be8 <__aeabi_d2f>
 80013de:	4602      	mov	r2, r0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MPU6050_DataConvert+0x110>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MPU6050_DataConvert+0x110>)
 8001412:	ed93 7a00 	vldr	s14, [r3]
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <MPU6050_DataConvert+0x110>)
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0a3d70a4 	.word	0x0a3d70a4
 800144c:	404243d7 	.word	0x404243d7
 8001450:	20000a8c 	.word	0x20000a8c
 8001454:	43aa0000 	.word	0x43aa0000
 8001458:	20000a90 	.word	0x20000a90

0800145c <MPU6050_ProcessData>:
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
}

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fec5 	bl	80011f4 <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff6c 	bl	8001348 <MPU6050_DataConvert>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <MX_GPIO_Init+0xc4>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <MX_GPIO_Init+0xc4>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b28      	ldr	r3, [pc, #160]	@ (800153c <MX_GPIO_Init+0xc4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	4b25      	ldr	r3, [pc, #148]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a24      	ldr	r2, [pc, #144]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a18      	ldr	r2, [pc, #96]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_GPIO_Init+0xc4>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2120      	movs	r1, #32
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f6:	f000 feb1 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001500:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <MX_GPIO_Init+0xc8>)
 8001512:	f000 fcf9 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001516:	2320      	movs	r3, #32
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001530:	f000 fcea 	bl	8001f08 <HAL_GPIO_Init>

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	@ 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000
 8001540:	48000800 	.word	0x48000800

08001544 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_I2C2_Init+0x74>)
 800154a:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <MX_I2C2_Init+0x78>)
 800154c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F12981;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_I2C2_Init+0x74>)
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <MX_I2C2_Init+0x7c>)
 8001552:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <MX_I2C2_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_I2C2_Init+0x74>)
 800155c:	2201      	movs	r2, #1
 800155e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <MX_I2C2_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_I2C2_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2C2_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_I2C2_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_I2C2_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800157e:	480e      	ldr	r0, [pc, #56]	@ (80015b8 <MX_I2C2_Init+0x74>)
 8001580:	f000 fe84 	bl	800228c <HAL_I2C_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800158a:	f000 f94e 	bl	800182a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4809      	ldr	r0, [pc, #36]	@ (80015b8 <MX_I2C2_Init+0x74>)
 8001592:	f001 fc07 	bl	8002da4 <HAL_I2CEx_ConfigAnalogFilter>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800159c:	f000 f945 	bl	800182a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_I2C2_Init+0x74>)
 80015a4:	f001 fc49 	bl	8002e3a <HAL_I2CEx_ConfigDigitalFilter>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f93c 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000a94 	.word	0x20000a94
 80015bc:	40005800 	.word	0x40005800
 80015c0:	00f12981 	.word	0x00f12981

080015c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0ac      	sub	sp, #176	@ 0xb0
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2288      	movs	r2, #136	@ 0x88
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00b fa73 	bl	800cad0 <memset>
  if(i2cHandle->Instance==I2C2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <HAL_I2C_MspInit+0xb0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d13b      	bne.n	800166c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f002 facb 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800160c:	f000 f90d 	bl	800182a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_I2C_MspInit+0xb4>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <HAL_I2C_MspInit+0xb4>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <HAL_I2C_MspInit+0xb4>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001628:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800162c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001630:	2312      	movs	r3, #18
 8001632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001642:	2304      	movs	r3, #4
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800164c:	4619      	mov	r1, r3
 800164e:	480b      	ldr	r0, [pc, #44]	@ (800167c <HAL_I2C_MspInit+0xb8>)
 8001650:	f000 fc5a 	bl	8001f08 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <HAL_I2C_MspInit+0xb4>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	4a07      	ldr	r2, [pc, #28]	@ (8001678 <HAL_I2C_MspInit+0xb4>)
 800165a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800165e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_I2C_MspInit+0xb4>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800166c:	bf00      	nop
 800166e:	37b0      	adds	r7, #176	@ 0xb0
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40005800 	.word	0x40005800
 8001678:	40021000 	.word	0x40021000
 800167c:	48000400 	.word	0x48000400

08001680 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001686:	f000 fab9 	bl	8001bfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800168a:	f000 f87d 	bl	8001788 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800168e:	f7ff fef3 	bl	8001478 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001692:	f000 f9fd 	bl	8001a90 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8001696:	f7ff ff55 	bl	8001544 <MX_I2C2_Init>

	/* USER CODE BEGIN 2 */

	MPU6050_Initialization();
 800169a:	f7ff fcf5 	bl	8001088 <MPU6050_Initialization>

	start++;
 800169e:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <main+0xe0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001760 <main+0xe0>)
 80016a6:	6013      	str	r3, [r2, #0]
	//MotionGC_Initialize(MGC_MCU_STM32, &freq);
	MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 80016a8:	2101      	movs	r1, #1
 80016aa:	482e      	ldr	r0, [pc, #184]	@ (8001764 <main+0xe4>)
 80016ac:	f009 fffa 	bl	800b6a4 <MotionFX_enable_6X>
	start++;
 80016b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <main+0xe0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <main+0xe0>)
 80016b8:	6013      	str	r3, [r2, #0]
	MotionFX_initialize((MFXState_t *)mfxstate);
 80016ba:	482a      	ldr	r0, [pc, #168]	@ (8001764 <main+0xe4>)
 80016bc:	f009 ff38 	bl	800b530 <MotionFX_initialize>
	start++;
 80016c0:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <main+0xe0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a26      	ldr	r2, [pc, #152]	@ (8001760 <main+0xe0>)
 80016c8:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CurrentTime = HAL_GetTick();
 80016ca:	f000 fb07 	bl	8001cdc <HAL_GetTick>
 80016ce:	ee07 0a90 	vmov	s15, r0
 80016d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d6:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <main+0xe8>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
		dT = CurrentTime - LastTime;
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <main+0xe8>)
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <main+0xec>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <main+0xf0>)
 80016ee:	edc3 7a00 	vstr	s15, [r3]
		LastTime = CurrentTime;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <main+0xe8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <main+0xec>)
 80016f8:	6013      	str	r3, [r2, #0]

		start++;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <main+0xe0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <main+0xe0>)
 8001702:	6013      	str	r3, [r2, #0]
		MPU6050_ProcessData(&MPU6050);
 8001704:	481b      	ldr	r0, [pc, #108]	@ (8001774 <main+0xf4>)
 8001706:	f7ff fea9 	bl	800145c <MPU6050_ProcessData>

		data_in.gyro[0] = MPU6050.gyro_x;
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <main+0xf4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <main+0xf8>)
 8001710:	6193      	str	r3, [r2, #24]
		data_in.gyro[1] = MPU6050.gyro_y;
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <main+0xf4>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <main+0xf8>)
 8001718:	61d3      	str	r3, [r2, #28]
		data_in.gyro[2] = MPU6050.gyro_z;
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <main+0xf4>)
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <main+0xf8>)
 8001720:	6213      	str	r3, [r2, #32]
		data_in.acc[0] = MPU6050.acc_x;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <main+0xf4>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <main+0xf8>)
 8001728:	60d3      	str	r3, [r2, #12]
		data_in.acc[1] = MPU6050.acc_y;
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <main+0xf4>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <main+0xf8>)
 8001730:	6113      	str	r3, [r2, #16]
		data_in.acc[2] = MPU6050.acc_z;
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <main+0xf4>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a10      	ldr	r2, [pc, #64]	@ (8001778 <main+0xf8>)
 8001738:	6153      	str	r3, [r2, #20]
		//	MEMS_Read_AccValue(data_in.Acc[0], data_in.Acc[1], data_in.Acc[2]);
		//	/* Get angular rate X/Y/Z in dps */
		//	MEMS_Read_GyroValue(data_in.Gyro[0], data_in.Gyro[1], data_in.Gyro[2]);
		/* Gyroscope calibration algorithm update */
		//MotionGC_Update(&data_in, &data_out, &bias_update);
		MotionFX_propagate(mfxstate, &data_out, &data_in, &dT);
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <main+0xf0>)
 800173c:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <main+0xf8>)
 800173e:	490f      	ldr	r1, [pc, #60]	@ (800177c <main+0xfc>)
 8001740:	4808      	ldr	r0, [pc, #32]	@ (8001764 <main+0xe4>)
 8001742:	f009 ffdf 	bl	800b704 <MotionFX_propagate>
		MotionFX_update(mfxstate, &data_out, &data_in, &dT, NULL);
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <main+0xf0>)
 800174c:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <main+0xf8>)
 800174e:	490b      	ldr	r1, [pc, #44]	@ (800177c <main+0xfc>)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <main+0xe4>)
 8001752:	f009 ffc7 	bl	800b6e4 <MotionFX_update>
//		corrY = data_out.GyroBiasY;
//		corrZ = data_out.GyroBiasZ;
//		gyro_cal_x = (data_in.Gyro[0] - data_out.GyroBiasX);
//		gyro_cal_y = (data_in.Gyro[1] - data_out.GyroBiasY);
//		gyro_cal_z = (data_in.Gyro[2] - data_out.GyroBiasZ);
		q = data_out.quaternion;
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <main+0x100>)
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <main+0x104>)
 800175a:	601a      	str	r2, [r3, #0]
		CurrentTime = HAL_GetTick();
 800175c:	bf00      	nop
 800175e:	e7b4      	b.n	80016ca <main+0x4a>
 8001760:	20000ae8 	.word	0x20000ae8
 8001764:	20000aec 	.word	0x20000aec
 8001768:	200014e8 	.word	0x200014e8
 800176c:	200014ec 	.word	0x200014ec
 8001770:	200014e0 	.word	0x200014e0
 8001774:	20000a60 	.word	0x20000a60
 8001778:	20001480 	.word	0x20001480
 800177c:	200014a4 	.word	0x200014a4
 8001780:	200014e4 	.word	0x200014e4
 8001784:	200014b0 	.word	0x200014b0

08001788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b096      	sub	sp, #88	@ 0x58
 800178c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	2244      	movs	r2, #68	@ 0x44
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f00b f99a 	bl	800cad0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80017aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017ae:	f001 fb9f 	bl	8002ef0 <HAL_PWREx_ControlVoltageScaling>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80017b8:	f000 f837 	bl	800182a <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	2302      	movs	r3, #2
 80017be:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c6:	2310      	movs	r3, #16
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ce:	2302      	movs	r3, #2
 80017d0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80017d6:	230a      	movs	r3, #10
 80017d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017da:	2307      	movs	r3, #7
 80017dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4618      	mov	r0, r3
 80017ec:	f001 fbd6 	bl	8002f9c <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x72>
		Error_Handler();
 80017f6:	f000 f818 	bl	800182a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2303      	movs	r3, #3
 8001800:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800180e:	463b      	mov	r3, r7
 8001810:	2104      	movs	r1, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f001 ff9e 	bl	8003754 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x9a>
		Error_Handler();
 800181e:	f000 f804 	bl	800182a <Error_Handler>
	}
}
 8001822:	bf00      	nop
 8001824:	3758      	adds	r7, #88	@ 0x58
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182e:	b672      	cpsid	i
}
 8001830:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_MspInit+0x44>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <HAL_MspInit+0x44>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6613      	str	r3, [r2, #96]	@ 0x60
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_MspInit+0x44>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_MspInit+0x44>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	4a08      	ldr	r2, [pc, #32]	@ (800187c <HAL_MspInit+0x44>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	@ 0x58
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_MspInit+0x44>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f000 f9ed 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}

080018de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  return 1;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_kill>:

int _kill(int pid, int sig)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f8:	f00b f93c 	bl	800cb74 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2216      	movs	r2, #22
 8001900:	601a      	str	r2, [r3, #0]
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_exit>:

void _exit (int status)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001916:	f04f 31ff 	mov.w	r1, #4294967295
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffe7 	bl	80018ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <_exit+0x12>

08001924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
  }

  return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
  }
  return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019be:	605a      	str	r2, [r3, #4]
  return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f00b f8a0 	bl	800cb74 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20018000 	.word	0x20018000
 8001a60:	00009000 	.word	0x00009000
 8001a64:	200014f0 	.word	0x200014f0
 8001a68:	200016d0 	.word	0x200016d0

08001a6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001a96:	4a15      	ldr	r2, [pc, #84]	@ (8001aec <MX_USART2_UART_Init+0x5c>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_USART2_UART_Init+0x58>)
 8001ad4:	f002 fd1e 	bl	8004514 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ade:	f7ff fea4 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200014f4 	.word	0x200014f4
 8001aec:	40004400 	.word	0x40004400

08001af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0ac      	sub	sp, #176	@ 0xb0
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2288      	movs	r2, #136	@ 0x88
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00a ffdd 	bl	800cad0 <memset>
  if(uartHandle->Instance==USART2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ba0 <HAL_UART_MspInit+0xb0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d13b      	bne.n	8001b98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 f835 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b38:	f7ff fe77 	bl	800182a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_UART_MspInit+0xb4>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	4a18      	ldr	r2, [pc, #96]	@ (8001ba4 <HAL_UART_MspInit+0xb4>)
 8001b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b48:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <HAL_UART_MspInit+0xb4>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <HAL_UART_MspInit+0xb4>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <HAL_UART_MspInit+0xb4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b60:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_UART_MspInit+0xb4>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b84:	2307      	movs	r3, #7
 8001b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b94:	f000 f9b8 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b98:	bf00      	nop
 8001b9a:	37b0      	adds	r7, #176	@ 0xb0
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bac:	f7ff ff5e 	bl	8001a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb2:	490d      	ldr	r1, [pc, #52]	@ (8001be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <LoopForever+0xe>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf4 <LoopForever+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f00a ffd3 	bl	800cb80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bda:	f7ff fd51 	bl	8001680 <main>

08001bde <LoopForever>:

LoopForever:
    b LoopForever
 8001bde:	e7fe      	b.n	8001bde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001bec:	080126b0 	.word	0x080126b0
  ldr r2, =_sbss
 8001bf0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001bf4:	200016cc 	.word	0x200016cc

08001bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_2_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <HAL_Init+0x3c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c38 <HAL_Init+0x3c>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f944 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 f80f 	bl	8001c3c <HAL_InitTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	e001      	b.n	8001c2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c2a:	f7ff fe05 	bl	8001838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_InitTick+0x70>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f941 	bl	8001eee <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d809      	bhi.n	8001c8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f919 	bl	8001eb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_InitTick+0x74>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e004      	b.n	8001c9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e001      	b.n	8001c9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	2000157c 	.word	0x2000157c

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000157c 	.word	0x2000157c

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	@ (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff47 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff5c 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb0 	bl	8001e5c <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e17f      	b.n	8002218 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8171 	beq.w	8002212 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d005      	beq.n	8001f48 <HAL_GPIO_Init+0x40>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d130      	bne.n	8001faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f7e:	2201      	movs	r2, #1
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 0201 	and.w	r2, r3, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d118      	bne.n	8001fe8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f003 0201 	and.w	r2, r3, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d017      	beq.n	8002024 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ac 	beq.w	8002212 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002238 <HAL_GPIO_Init+0x330>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	4a5e      	ldr	r2, [pc, #376]	@ (8002238 <HAL_GPIO_Init+0x330>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <HAL_GPIO_Init+0x330>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d2:	4a5a      	ldr	r2, [pc, #360]	@ (800223c <HAL_GPIO_Init+0x334>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x242>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4f      	ldr	r2, [pc, #316]	@ (8002240 <HAL_GPIO_Init+0x338>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x23e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4e      	ldr	r2, [pc, #312]	@ (8002244 <HAL_GPIO_Init+0x33c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x23a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4d      	ldr	r2, [pc, #308]	@ (8002248 <HAL_GPIO_Init+0x340>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x236>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4c      	ldr	r2, [pc, #304]	@ (800224c <HAL_GPIO_Init+0x344>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x232>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4b      	ldr	r2, [pc, #300]	@ (8002250 <HAL_GPIO_Init+0x348>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x22e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4a      	ldr	r2, [pc, #296]	@ (8002254 <HAL_GPIO_Init+0x34c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x22a>
 800212e:	2306      	movs	r3, #6
 8002130:	e00c      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002132:	2307      	movs	r3, #7
 8002134:	e00a      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002136:	2305      	movs	r3, #5
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x244>
 800213a:	2304      	movs	r3, #4
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x244>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x244>
 800214a:	2300      	movs	r3, #0
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800215c:	4937      	ldr	r1, [pc, #220]	@ (800223c <HAL_GPIO_Init+0x334>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216a:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_GPIO_Init+0x350>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800218e:	4a32      	ldr	r2, [pc, #200]	@ (8002258 <HAL_GPIO_Init+0x350>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002194:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <HAL_GPIO_Init+0x350>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021b8:	4a27      	ldr	r2, [pc, #156]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021be:	4b26      	ldr	r3, [pc, #152]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800220c:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <HAL_GPIO_Init+0x350>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f47f ae78 	bne.w	8001f18 <HAL_GPIO_Init+0x10>
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800
 8002248:	48000c00 	.word	0x48000c00
 800224c:	48001000 	.word	0x48001000
 8002250:	48001400 	.word	0x48001400
 8002254:	48001800 	.word	0x48001800
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e08d      	b.n	80023ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff f986 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	@ 0x24
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e006      	b.n	8002314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d108      	bne.n	800232e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	e007      	b.n	800233e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800234c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002350:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69d9      	ldr	r1, [r3, #28]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	4608      	mov	r0, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	817b      	strh	r3, [r7, #10]
 80023d6:	460b      	mov	r3, r1
 80023d8:	813b      	strh	r3, [r7, #8]
 80023da:	4613      	mov	r3, r2
 80023dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 80f9 	bne.w	80025de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x34>
 80023f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0ed      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Mem_Write+0x4e>
 800240e:	2302      	movs	r3, #2
 8002410:	e0e6      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800241a:	f7ff fc5f 	bl	8001cdc <HAL_GetTick>
 800241e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2319      	movs	r3, #25
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fac3 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d1      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2221      	movs	r2, #33	@ 0x21
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2240      	movs	r2, #64	@ 0x40
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800245c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002464:	88f8      	ldrh	r0, [r7, #6]
 8002466:	893a      	ldrh	r2, [r7, #8]
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4603      	mov	r3, r0
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f9d3 	bl	8002820 <I2C_RequestMemoryWrite>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0a9      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2bff      	cmp	r3, #255	@ 0xff
 8002494:	d90e      	bls.n	80024b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	22ff      	movs	r2, #255	@ 0xff
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	2300      	movs	r3, #0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fc47 	bl	8002d40 <I2C_TransferConfig>
 80024b2:	e00f      	b.n	80024d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	2300      	movs	r3, #0
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fc36 	bl	8002d40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fac6 	bl	8002a6a <I2C_WaitOnTXISFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e07b      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d034      	beq.n	800258c <HAL_I2C_Mem_Write+0x1c8>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	d130      	bne.n	800258c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fa3f 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e04d      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2bff      	cmp	r3, #255	@ 0xff
 800254c:	d90e      	bls.n	800256c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	22ff      	movs	r2, #255	@ 0xff
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	b2da      	uxtb	r2, r3
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fbeb 	bl	8002d40 <I2C_TransferConfig>
 800256a:	e00f      	b.n	800258c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	b2da      	uxtb	r2, r3
 800257c:	8979      	ldrh	r1, [r7, #10]
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fbda 	bl	8002d40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d19e      	bne.n	80024d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 faac 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e01a      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2220      	movs	r2, #32
 80025b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_I2C_Mem_Write+0x224>)
 80025be:	400b      	ands	r3, r1
 80025c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025de:	2302      	movs	r3, #2
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	fe00e800 	.word	0xfe00e800

080025ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	817b      	strh	r3, [r7, #10]
 80025fe:	460b      	mov	r3, r1
 8002600:	813b      	strh	r3, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	f040 80fd 	bne.w	800280e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_I2C_Mem_Read+0x34>
 800261a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002626:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0f1      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2C_Mem_Read+0x4e>
 8002636:	2302      	movs	r3, #2
 8002638:	e0ea      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002642:	f7ff fb4b 	bl	8001cdc <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2319      	movs	r3, #25
 800264e:	2201      	movs	r2, #1
 8002650:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f9af 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0d5      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2222      	movs	r2, #34	@ 0x22
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2240      	movs	r2, #64	@ 0x40
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002684:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268c:	88f8      	ldrh	r0, [r7, #6]
 800268e:	893a      	ldrh	r2, [r7, #8]
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4603      	mov	r3, r0
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f913 	bl	80028c8 <I2C_RequestMemoryRead>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0ad      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2bff      	cmp	r3, #255	@ 0xff
 80026bc:	d90e      	bls.n	80026dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	8979      	ldrh	r1, [r7, #10]
 80026cc:	4b52      	ldr	r3, [pc, #328]	@ (8002818 <HAL_I2C_Mem_Read+0x22c>)
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fb33 	bl	8002d40 <I2C_TransferConfig>
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002818 <HAL_I2C_Mem_Read+0x22c>)
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fb22 	bl	8002d40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	2200      	movs	r2, #0
 8002704:	2104      	movs	r1, #4
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f956 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07c      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d034      	beq.n	80027bc <HAL_I2C_Mem_Read+0x1d0>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d130      	bne.n	80027bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002760:	2200      	movs	r2, #0
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f927 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e04d      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2bff      	cmp	r3, #255	@ 0xff
 800277c:	d90e      	bls.n	800279c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002788:	b2da      	uxtb	r2, r3
 800278a:	8979      	ldrh	r1, [r7, #10]
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fad3 	bl	8002d40 <I2C_TransferConfig>
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fac2 	bl	8002d40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d19a      	bne.n	80026fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f994 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e01a      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2220      	movs	r2, #32
 80027e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_I2C_Mem_Read+0x230>)
 80027ee:	400b      	ands	r3, r1
 80027f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	80002400 	.word	0x80002400
 800281c:	fe00e800 	.word	0xfe00e800

08002820 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	817b      	strh	r3, [r7, #10]
 8002832:	460b      	mov	r3, r1
 8002834:	813b      	strh	r3, [r7, #8]
 8002836:	4613      	mov	r3, r2
 8002838:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	8979      	ldrh	r1, [r7, #10]
 8002840:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <I2C_RequestMemoryWrite+0xa4>)
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fa79 	bl	8002d40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	69b9      	ldr	r1, [r7, #24]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f909 	bl	8002a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e02c      	b.n	80028bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002868:	893b      	ldrh	r3, [r7, #8]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	629a      	str	r2, [r3, #40]	@ 0x28
 8002872:	e015      	b.n	80028a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	b29b      	uxth	r3, r3
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	69b9      	ldr	r1, [r7, #24]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f8ef 	bl	8002a6a <I2C_WaitOnTXISFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e012      	b.n	80028bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002896:	893b      	ldrh	r3, [r7, #8]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2200      	movs	r2, #0
 80028a8:	2180      	movs	r1, #128	@ 0x80
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f884 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	80002000 	.word	0x80002000

080028c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	4608      	mov	r0, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	817b      	strh	r3, [r7, #10]
 80028da:	460b      	mov	r3, r1
 80028dc:	813b      	strh	r3, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	8979      	ldrh	r1, [r7, #10]
 80028e8:	4b20      	ldr	r3, [pc, #128]	@ (800296c <I2C_RequestMemoryRead+0xa4>)
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2300      	movs	r3, #0
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa26 	bl	8002d40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f8b6 	bl	8002a6a <I2C_WaitOnTXISFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e02c      	b.n	8002962 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800290e:	893b      	ldrh	r3, [r7, #8]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
 8002918:	e015      	b.n	8002946 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800291a:	893b      	ldrh	r3, [r7, #8]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	b29b      	uxth	r3, r3
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f89c 	bl	8002a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e012      	b.n	8002962 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800293c:	893b      	ldrh	r3, [r7, #8]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2200      	movs	r2, #0
 800294e:	2140      	movs	r1, #64	@ 0x40
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f831 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	80002000 	.word	0x80002000

08002970 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d103      	bne.n	800298e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d007      	beq.n	80029ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	619a      	str	r2, [r3, #24]
  }
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c8:	e03b      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8d6 	bl	8002b80 <I2C_IsErrorOccurred>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e041      	b.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d02d      	beq.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7ff f979 	bl	8001cdc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d122      	bne.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	4013      	ands	r3, r2
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d113      	bne.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00f      	b.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d0b4      	beq.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a76:	e033      	b.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f87f 	bl	8002b80 <I2C_IsErrorOccurred>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e031      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d025      	beq.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a94:	f7ff f922 	bl	8001cdc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d302      	bcc.n	8002aaa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11a      	bne.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d013      	beq.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d1c4      	bne.n	8002a78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b04:	e02f      	b.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f838 	bl	8002b80 <I2C_IsErrorOccurred>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e02d      	b.n	8002b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7ff f8df 	bl	8001cdc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11a      	bne.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d013      	beq.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e007      	b.n	8002b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d1c8      	bne.n	8002b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	@ 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d068      	beq.n	8002c7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bb4:	e049      	b.n	8002c4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d045      	beq.n	8002c4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7ff f88d 	bl	8001cdc <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_IsErrorOccurred+0x54>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d13a      	bne.n	8002c4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002be6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bf6:	d121      	bne.n	8002c3c <I2C_IsErrorOccurred+0xbc>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bfe:	d01d      	beq.n	8002c3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d01a      	beq.n	8002c3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c16:	f7ff f861 	bl	8001cdc <HAL_GetTick>
 8002c1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1c:	e00e      	b.n	8002c3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c1e:	f7ff f85d 	bl	8001cdc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b19      	cmp	r3, #25
 8002c2a:	d907      	bls.n	8002c3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	f043 0320 	orr.w	r3, r3, #32
 8002c32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c3a:	e006      	b.n	8002c4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d1e9      	bne.n	8002c1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d003      	beq.n	8002c60 <I2C_IsErrorOccurred+0xe0>
 8002c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0aa      	beq.n	8002bb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d103      	bne.n	8002c70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f043 0308 	orr.w	r3, r3, #8
 8002cb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01c      	beq.n	8002d2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fe3b 	bl	8002970 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <I2C_IsErrorOccurred+0x1bc>)
 8002d06:	400b      	ands	r3, r1
 8002d08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3728      	adds	r7, #40	@ 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	fe00e800 	.word	0xfe00e800

08002d40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	817b      	strh	r3, [r7, #10]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d58:	7a7b      	ldrb	r3, [r7, #9]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	0d5b      	lsrs	r3, r3, #21
 8002d7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <I2C_TransferConfig+0x60>)
 8002d80:	430b      	orrs	r3, r1
 8002d82:	43db      	mvns	r3, r3
 8002d84:	ea02 0103 	and.w	r1, r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	03ff63ff 	.word	0x03ff63ff

08002da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d138      	bne.n	8002e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e032      	b.n	8002e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	@ 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d139      	bne.n	8002ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e033      	b.n	8002ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2224      	movs	r2, #36	@ 0x24
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ed8:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <HAL_PWREx_GetVoltageRange+0x18>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40007000 	.word	0x40007000

08002ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efe:	d130      	bne.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0c:	d038      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0e:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f16:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2232      	movs	r2, #50	@ 0x32
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f34:	e002      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f48:	d102      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f2      	bne.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5c:	d110      	bne.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00f      	b.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d007      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f70:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f78:	4a05      	ldr	r2, [pc, #20]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000
 8002f94:	20000000 	.word	0x20000000
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e3ca      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b97      	ldr	r3, [pc, #604]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b94      	ldr	r3, [pc, #592]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80e4 	beq.w	8003198 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4a>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f040 808b 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 8087 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fe6:	4b89      	ldr	r3, [pc, #548]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e3a2      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	4b82      	ldr	r3, [pc, #520]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCC_OscConfig+0x7c>
 800300e:	4b7f      	ldr	r3, [pc, #508]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003016:	e005      	b.n	8003024 <HAL_RCC_OscConfig+0x88>
 8003018:	4b7c      	ldr	r3, [pc, #496]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	4293      	cmp	r3, r2
 8003026:	d223      	bcs.n	8003070 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd55 	bl	8003adc <RCC_SetFlashLatencyFromMSIRange>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e383      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b73      	ldr	r3, [pc, #460]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a72      	ldr	r2, [pc, #456]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b70      	ldr	r3, [pc, #448]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	496d      	ldr	r1, [pc, #436]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4968      	ldr	r1, [pc, #416]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	e025      	b.n	80030bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003070:	4b66      	ldr	r3, [pc, #408]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a65      	ldr	r2, [pc, #404]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b63      	ldr	r3, [pc, #396]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4960      	ldr	r1, [pc, #384]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308e:	4b5f      	ldr	r3, [pc, #380]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	495b      	ldr	r1, [pc, #364]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fd15 	bl	8003adc <RCC_SetFlashLatencyFromMSIRange>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e343      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030bc:	f000 fc4a 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b52      	ldr	r3, [pc, #328]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	4950      	ldr	r1, [pc, #320]	@ (8003210 <HAL_RCC_OscConfig+0x274>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003214 <HAL_RCC_OscConfig+0x278>)
 80030da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCC_OscConfig+0x27c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe fdab 	bl	8001c3c <HAL_InitTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d052      	beq.n	8003196 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	e327      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d032      	beq.n	8003162 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030fc:	4b43      	ldr	r3, [pc, #268]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a42      	ldr	r2, [pc, #264]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003108:	f7fe fde8 	bl	8001cdc <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003110:	f7fe fde4 	bl	8001cdc <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e310      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003122:	4b3a      	ldr	r3, [pc, #232]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	4b37      	ldr	r3, [pc, #220]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a36      	ldr	r2, [pc, #216]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4931      	ldr	r1, [pc, #196]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314c:	4b2f      	ldr	r3, [pc, #188]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	492c      	ldr	r1, [pc, #176]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	e01a      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003162:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a29      	ldr	r2, [pc, #164]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800316e:	f7fe fdb5 	bl	8001cdc <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003176:	f7fe fdb1 	bl	8001cdc <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e2dd      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003188:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x1da>
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003196:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d074      	beq.n	800328e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x21a>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d10e      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d10b      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b6:	4b15      	ldr	r3, [pc, #84]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d064      	beq.n	800328c <HAL_RCC_OscConfig+0x2f0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d160      	bne.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e2ba      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x24a>
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e026      	b.n	8003234 <HAL_RCC_OscConfig+0x298>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ee:	d115      	bne.n	800321c <HAL_RCC_OscConfig+0x280>
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a05      	ldr	r2, [pc, #20]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a02      	ldr	r2, [pc, #8]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e014      	b.n	8003234 <HAL_RCC_OscConfig+0x298>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	08011db4 	.word	0x08011db4
 8003214:	20000000 	.word	0x20000000
 8003218:	20000004 	.word	0x20000004
 800321c:	4ba0      	ldr	r3, [pc, #640]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a9f      	ldr	r2, [pc, #636]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b9d      	ldr	r3, [pc, #628]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a9c      	ldr	r2, [pc, #624]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fd4e 	bl	8001cdc <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fd4a 	bl	8001cdc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e276      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003256:	4b92      	ldr	r3, [pc, #584]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x2a8>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fd3a 	bl	8001cdc <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fd36 	bl	8001cdc <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e262      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327e:	4b88      	ldr	r3, [pc, #544]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x2d0>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d060      	beq.n	800335c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d005      	beq.n	80032ac <HAL_RCC_OscConfig+0x310>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d119      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d116      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ac:	4b7c      	ldr	r3, [pc, #496]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x328>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e23f      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b76      	ldr	r3, [pc, #472]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	4973      	ldr	r1, [pc, #460]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d8:	e040      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d023      	beq.n	800332a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e2:	4b6f      	ldr	r3, [pc, #444]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe fcf5 	bl	8001cdc <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe fcf1 	bl	8001cdc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e21d      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003308:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	495f      	ldr	r1, [pc, #380]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
 8003328:	e018      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b5d      	ldr	r3, [pc, #372]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fcd1 	bl	8001cdc <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe fccd 	bl	8001cdc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1f9      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003350:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d03c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01c      	beq.n	80033aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003370:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003376:	4a4a      	ldr	r2, [pc, #296]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe fcac 	bl	8001cdc <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe fca8 	bl	8001cdc <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1d4      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339a:	4b41      	ldr	r3, [pc, #260]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ef      	beq.n	8003388 <HAL_RCC_OscConfig+0x3ec>
 80033a8:	e01b      	b.n	80033e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b3d      	ldr	r3, [pc, #244]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b0:	4a3b      	ldr	r2, [pc, #236]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fc8f 	bl	8001cdc <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe fc8b 	bl	8001cdc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1b7      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ef      	bne.n	80033c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a6 	beq.w	800353c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	@ 0x58
 800340c:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d118      	bne.n	800345a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003428:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003434:	f7fe fc52 	bl	8001cdc <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fe fc4e 	bl	8001cdc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e17a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d108      	bne.n	8003474 <HAL_RCC_OscConfig+0x4d8>
 8003462:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	4a0d      	ldr	r2, [pc, #52]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003472:	e029      	b.n	80034c8 <HAL_RCC_OscConfig+0x52c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_OscConfig+0x50c>
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	4a07      	ldr	r2, [pc, #28]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	4a03      	ldr	r2, [pc, #12]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x52c>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
 80034a8:	4b9c      	ldr	r3, [pc, #624]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a9b      	ldr	r2, [pc, #620]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b8:	4b98      	ldr	r3, [pc, #608]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	4a97      	ldr	r2, [pc, #604]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe fc04 	bl	8001cdc <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe fc00 	bl	8001cdc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e12a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	4b8b      	ldr	r3, [pc, #556]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ed      	beq.n	80034d8 <HAL_RCC_OscConfig+0x53c>
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe fbed 	bl	8001cdc <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fe fbe9 	bl	8001cdc <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e113      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800351c:	4b7f      	ldr	r3, [pc, #508]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ed      	bne.n	8003506 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352a:	7ffb      	ldrb	r3, [r7, #31]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b7a      	ldr	r3, [pc, #488]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	4a79      	ldr	r2, [pc, #484]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80fe 	beq.w	8003742 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	2b02      	cmp	r3, #2
 800354c:	f040 80d0 	bne.w	80036f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003550:	4b72      	ldr	r3, [pc, #456]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	429a      	cmp	r2, r3
 8003562:	d130      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	3b01      	subs	r3, #1
 8003570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d127      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11f      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003590:	2a07      	cmp	r2, #7
 8003592:	bf14      	ite	ne
 8003594:	2201      	movne	r2, #1
 8003596:	2200      	moveq	r2, #0
 8003598:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d06e      	beq.n	80036a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d069      	beq.n	80036a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035d8:	4b50      	ldr	r3, [pc, #320]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0ad      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035e8:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f4:	f7fe fb72 	bl	8001cdc <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fb6e 	bl	8001cdc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e09a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361a:	4b40      	ldr	r3, [pc, #256]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_RCC_OscConfig+0x784>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800362a:	3a01      	subs	r2, #1
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003634:	0212      	lsls	r2, r2, #8
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0552      	lsls	r2, r2, #21
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003648:	0852      	lsrs	r2, r2, #1
 800364a:	3a01      	subs	r2, #1
 800364c:	0652      	lsls	r2, r2, #25
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003654:	0912      	lsrs	r2, r2, #4
 8003656:	0452      	lsls	r2, r2, #17
 8003658:	430a      	orrs	r2, r1
 800365a:	4930      	ldr	r1, [pc, #192]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003660:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2d      	ldr	r2, [pc, #180]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a2a      	ldr	r2, [pc, #168]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003678:	f7fe fb30 	bl	8001cdc <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fb2c 	bl	8001cdc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e058      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	4b22      	ldr	r3, [pc, #136]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369e:	e050      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e04f      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d148      	bne.n	8003742 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036bc:	4b17      	ldr	r3, [pc, #92]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c8:	f7fe fb08 	bl	8001cdc <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe fb04 	bl	8001cdc <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e030      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x734>
 80036ee:	e028      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d023      	beq.n	800373e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a08      	ldr	r2, [pc, #32]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe faeb 	bl	8001cdc <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	e00c      	b.n	8003724 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe fae7 	bl	8001cdc <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d905      	bls.n	8003724 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e013      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
 800371c:	40021000 	.word	0x40021000
 8003720:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ec      	bne.n	800370a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4905      	ldr	r1, [pc, #20]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003736:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_RCC_OscConfig+0x7b4>)
 8003738:	4013      	ands	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
 800373c:	e001      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	feeefffc 	.word	0xfeeefffc

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0e7      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d910      	bls.n	8003798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b72      	ldr	r3, [pc, #456]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4970      	ldr	r1, [pc, #448]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b6e      	ldr	r3, [pc, #440]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0cf      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d908      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4960      	ldr	r1, [pc, #384]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04c      	beq.n	800386c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d121      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0a6      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	4b54      	ldr	r3, [pc, #336]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d115      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e09a      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380a:	4b4e      	ldr	r3, [pc, #312]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e08e      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e086      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b46      	ldr	r3, [pc, #280]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4943      	ldr	r1, [pc, #268]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fe fa4e 	bl	8001cdc <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fe fa4a 	bl	8001cdc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e06e      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b3a      	ldr	r3, [pc, #232]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003884:	429a      	cmp	r2, r3
 8003886:	d208      	bcs.n	800389a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b2e      	ldr	r3, [pc, #184]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	492b      	ldr	r1, [pc, #172]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389a:	4b29      	ldr	r3, [pc, #164]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d210      	bcs.n	80038ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a8:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 0207 	bic.w	r2, r3, #7
 80038b0:	4923      	ldr	r1, [pc, #140]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b8:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e036      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4918      	ldr	r1, [pc, #96]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4910      	ldr	r1, [pc, #64]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003908:	f000 f824 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	490b      	ldr	r1, [pc, #44]	@ (8003948 <HAL_RCC_ClockConfig+0x1f4>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	4a09      	ldr	r2, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1fc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe f985 	bl	8001c3c <HAL_InitTick>
 8003932:	4603      	mov	r3, r0
 8003934:	72fb      	strb	r3, [r7, #11]

  return status;
 8003936:	7afb      	ldrb	r3, [r7, #11]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40022000 	.word	0x40022000
 8003944:	40021000 	.word	0x40021000
 8003948:	08011db4 	.word	0x08011db4
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	@ 0x24
 8003958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003962:	4b3e      	ldr	r3, [pc, #248]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800396c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x34>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d121      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d11e      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003988:	4b34      	ldr	r3, [pc, #208]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003994:	4b31      	ldr	r3, [pc, #196]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d102      	bne.n	80039d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039cc:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e004      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039d8:	4b23      	ldr	r3, [pc, #140]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80039da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d134      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0xa6>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d003      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xac>
 80039f8:	e005      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80039fc:	617b      	str	r3, [r7, #20]
      break;
 80039fe:	e005      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a02:	617b      	str	r3, [r7, #20]
      break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	617b      	str	r3, [r7, #20]
      break;
 8003a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	3301      	adds	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	fb03 f202 	mul.w	r2, r3, r2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	0e5b      	lsrs	r3, r3, #25
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	@ 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	08011dcc 	.word	0x08011dcc
 8003a64:	00f42400 	.word	0x00f42400
 8003a68:	007a1200 	.word	0x007a1200

08003a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a70:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000000 	.word	0x20000000

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a88:	f7ff fff0 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4904      	ldr	r1, [pc, #16]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	08011dc4 	.word	0x08011dc4

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ab4:	f7ff ffda 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0adb      	lsrs	r3, r3, #11
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08011dc4 	.word	0x08011dc4

08003adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af4:	f7ff f9ee 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003af8:	6178      	str	r0, [r7, #20]
 8003afa:	e014      	b.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b08:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b14:	f7ff f9de 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2c:	d10b      	bne.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b80      	cmp	r3, #128	@ 0x80
 8003b32:	d919      	bls.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b38:	d902      	bls.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e013      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b40:	2301      	movs	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e010      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b80      	cmp	r3, #128	@ 0x80
 8003b4a:	d902      	bls.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e00a      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b80      	cmp	r3, #128	@ 0x80
 8003b56:	d102      	bne.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b58:	2302      	movs	r3, #2
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	e004      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b70      	cmp	r3, #112	@ 0x70
 8003b62:	d101      	bne.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b64:	2301      	movs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 0207 	bic.w	r2, r3, #7
 8003b70:	4909      	ldr	r1, [pc, #36]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b78:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40022000 	.word	0x40022000

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba8:	2300      	movs	r3, #0
 8003baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d041      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bc0:	d02a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bc6:	d824      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bd2:	d81e      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bdc:	d010      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bde:	e018      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be0:	4b86      	ldr	r3, [pc, #536]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a85      	ldr	r2, [pc, #532]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bec:	e015      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fabb 	bl	8004170 <RCCEx_PLLSAI1_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfe:	e00c      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3320      	adds	r3, #32
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fba6 	bl	8004358 <RCCEx_PLLSAI2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	74fb      	strb	r3, [r7, #19]
      break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c20:	4b76      	ldr	r3, [pc, #472]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c2e:	4973      	ldr	r1, [pc, #460]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d041      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c50:	d02a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c56:	d824      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c62:	d81e      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c6c:	d010      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c70:	4b62      	ldr	r3, [pc, #392]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a61      	ldr	r2, [pc, #388]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c7c:	e015      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fa73 	bl	8004170 <RCCEx_PLLSAI1_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3320      	adds	r3, #32
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fb5e 	bl	8004358 <RCCEx_PLLSAI2_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb0:	4b52      	ldr	r3, [pc, #328]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cbe:	494f      	ldr	r1, [pc, #316]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cc6:	e001      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a0 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cde:	4b47      	ldr	r3, [pc, #284]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	4b41      	ldr	r3, [pc, #260]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf8:	4a40      	ldr	r2, [pc, #256]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d00:	4b3e      	ldr	r3, [pc, #248]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d10:	4b3b      	ldr	r3, [pc, #236]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3a      	ldr	r2, [pc, #232]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d1c:	f7fd ffde 	bl	8001cdc <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d22:	e009      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd ffda 	bl	8001cdc <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d902      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	74fb      	strb	r3, [r7, #19]
        break;
 8003d36:	e005      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d38:	4b31      	ldr	r3, [pc, #196]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d15c      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01f      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d019      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d68:	4b24      	ldr	r3, [pc, #144]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	4a20      	ldr	r2, [pc, #128]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d84:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d94:	4a19      	ldr	r2, [pc, #100]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fd ff99 	bl	8001cdc <HAL_GetTick>
 8003daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd ff95 	bl	8001cdc <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d902      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ec      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dda:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dea:	4904      	ldr	r1, [pc, #16]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003df2:	e009      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	74bb      	strb	r3, [r7, #18]
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e08:	7c7b      	ldrb	r3, [r7, #17]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0e:	4b9e      	ldr	r3, [pc, #632]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	4a9d      	ldr	r2, [pc, #628]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e26:	4b98      	ldr	r3, [pc, #608]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	4994      	ldr	r1, [pc, #592]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e48:	4b8f      	ldr	r3, [pc, #572]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4e:	f023 020c 	bic.w	r2, r3, #12
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	498c      	ldr	r1, [pc, #560]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e6a:	4b87      	ldr	r3, [pc, #540]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	4983      	ldr	r1, [pc, #524]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	497b      	ldr	r1, [pc, #492]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eae:	4b76      	ldr	r3, [pc, #472]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ebc:	4972      	ldr	r1, [pc, #456]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	496a      	ldr	r1, [pc, #424]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef2:	4b65      	ldr	r3, [pc, #404]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	4961      	ldr	r1, [pc, #388]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f14:	4b5c      	ldr	r3, [pc, #368]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f22:	4959      	ldr	r1, [pc, #356]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	4950      	ldr	r1, [pc, #320]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f58:	4b4b      	ldr	r3, [pc, #300]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	4948      	ldr	r1, [pc, #288]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7a:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	493f      	ldr	r1, [pc, #252]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d028      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003faa:	4937      	ldr	r1, [pc, #220]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fba:	d106      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbc:	4b32      	ldr	r3, [pc, #200]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a31      	ldr	r2, [pc, #196]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fc6:	60d3      	str	r3, [r2, #12]
 8003fc8:	e011      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fd2:	d10c      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f8c8 	bl	8004170 <RCCEx_PLLSAI1_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d028      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ffa:	4b23      	ldr	r3, [pc, #140]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	491f      	ldr	r1, [pc, #124]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004018:	d106      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4a1a      	ldr	r2, [pc, #104]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004024:	60d3      	str	r3, [r2, #12]
 8004026:	e011      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004030:	d10c      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f899 	bl	8004170 <RCCEx_PLLSAI1_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	4908      	ldr	r1, [pc, #32]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a02      	ldr	r2, [pc, #8]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
 8004084:	e014      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f867 	bl	8004170 <RCCEx_PLLSAI1_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d02f      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040bc:	4b2b      	ldr	r3, [pc, #172]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040ca:	4928      	ldr	r1, [pc, #160]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040da:	d10d      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f844 	bl	8004170 <RCCEx_PLLSAI1_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	74bb      	strb	r3, [r7, #18]
 80040f6:	e011      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3320      	adds	r3, #32
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f925 	bl	8004358 <RCCEx_PLLSAI2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004128:	4b10      	ldr	r3, [pc, #64]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004136:	490d      	ldr	r1, [pc, #52]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415a:	4904      	ldr	r1, [pc, #16]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004162:	7cbb      	ldrb	r3, [r7, #18]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000

08004170 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417e:	4b75      	ldr	r3, [pc, #468]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800418a:	4b72      	ldr	r3, [pc, #456]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0203 	and.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d10d      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
       ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
       ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d047      	beq.n	8004246 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e044      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d018      	beq.n	80041f6 <RCCEx_PLLSAI1_Config+0x86>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d825      	bhi.n	8004214 <RCCEx_PLLSAI1_Config+0xa4>
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <RCCEx_PLLSAI1_Config+0x62>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d009      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x74>
 80041d0:	e020      	b.n	8004214 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d2:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e2:	e01a      	b.n	800421a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e013      	b.n	800421e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f6:	4b57      	ldr	r3, [pc, #348]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004202:	4b54      	ldr	r3, [pc, #336]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004212:	e006      	b.n	8004222 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e004      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004222:	bf00      	nop
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800422a:	4b4a      	ldr	r3, [pc, #296]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	430b      	orrs	r3, r1
 8004240:	4944      	ldr	r1, [pc, #272]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004242:	4313      	orrs	r3, r2
 8004244:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d17d      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800424c:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a40      	ldr	r2, [pc, #256]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004252:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fd fd40 	bl	8001cdc <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800425e:	e009      	b.n	8004274 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004260:	f7fd fd3c 	bl	8001cdc <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
        break;
 8004272:	e005      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004274:	4b37      	ldr	r3, [pc, #220]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ef      	bne.n	8004260 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d160      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d111      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800428c:	4b31      	ldr	r3, [pc, #196]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	0211      	lsls	r1, r2, #8
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	0912      	lsrs	r2, r2, #4
 80042a4:	0452      	lsls	r2, r2, #17
 80042a6:	430a      	orrs	r2, r1
 80042a8:	492a      	ldr	r1, [pc, #168]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]
 80042ae:	e027      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d112      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b6:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6892      	ldr	r2, [r2, #8]
 80042c6:	0211      	lsls	r1, r2, #8
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6912      	ldr	r2, [r2, #16]
 80042cc:	0852      	lsrs	r2, r2, #1
 80042ce:	3a01      	subs	r2, #1
 80042d0:	0552      	lsls	r2, r2, #21
 80042d2:	430a      	orrs	r2, r1
 80042d4:	491f      	ldr	r1, [pc, #124]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	610b      	str	r3, [r1, #16]
 80042da:	e011      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6892      	ldr	r2, [r2, #8]
 80042ec:	0211      	lsls	r1, r2, #8
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6952      	ldr	r2, [r2, #20]
 80042f2:	0852      	lsrs	r2, r2, #1
 80042f4:	3a01      	subs	r2, #1
 80042f6:	0652      	lsls	r2, r2, #25
 80042f8:	430a      	orrs	r2, r1
 80042fa:	4916      	ldr	r1, [pc, #88]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004300:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a13      	ldr	r2, [pc, #76]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800430a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fd fce6 	bl	8001cdc <HAL_GetTick>
 8004310:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004312:	e009      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004314:	f7fd fce2 	bl	8001cdc <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d902      	bls.n	8004328 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	73fb      	strb	r3, [r7, #15]
          break;
 8004326:	e005      	b.n	8004334 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ef      	beq.n	8004314 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	4904      	ldr	r1, [pc, #16]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004344:	4313      	orrs	r3, r2
 8004346:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000

08004358 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004366:	4b6a      	ldr	r3, [pc, #424]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d018      	beq.n	80043a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004372:	4b67      	ldr	r3, [pc, #412]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0203 	and.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d10d      	bne.n	800439e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
       ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800438a:	4b61      	ldr	r3, [pc, #388]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
       ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d047      	beq.n	800442e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e044      	b.n	800442e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d018      	beq.n	80043de <RCCEx_PLLSAI2_Config+0x86>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d825      	bhi.n	80043fc <RCCEx_PLLSAI2_Config+0xa4>
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d002      	beq.n	80043ba <RCCEx_PLLSAI2_Config+0x62>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d009      	beq.n	80043cc <RCCEx_PLLSAI2_Config+0x74>
 80043b8:	e020      	b.n	80043fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ba:	4b55      	ldr	r3, [pc, #340]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11d      	bne.n	8004402 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ca:	e01a      	b.n	8004402 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043cc:	4b50      	ldr	r3, [pc, #320]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e013      	b.n	8004406 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043de:	4b4c      	ldr	r3, [pc, #304]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ea:	4b49      	ldr	r3, [pc, #292]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043fa:	e006      	b.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e004      	b.n	800440c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800440a:	bf00      	nop
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004412:	4b3f      	ldr	r3, [pc, #252]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	430b      	orrs	r3, r1
 8004428:	4939      	ldr	r1, [pc, #228]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d167      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004434:	4b36      	ldr	r3, [pc, #216]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a35      	ldr	r2, [pc, #212]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fd fc4c 	bl	8001cdc <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004446:	e009      	b.n	800445c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004448:	f7fd fc48 	bl	8001cdc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
        break;
 800445a:	e005      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800445c:	4b2c      	ldr	r3, [pc, #176]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ef      	bne.n	8004448 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d14a      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d111      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004474:	4b26      	ldr	r3, [pc, #152]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800447c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	0211      	lsls	r1, r2, #8
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68d2      	ldr	r2, [r2, #12]
 800448a:	0912      	lsrs	r2, r2, #4
 800448c:	0452      	lsls	r2, r2, #17
 800448e:	430a      	orrs	r2, r1
 8004490:	491f      	ldr	r1, [pc, #124]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004492:	4313      	orrs	r3, r2
 8004494:	614b      	str	r3, [r1, #20]
 8004496:	e011      	b.n	80044bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004498:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	0211      	lsls	r1, r2, #8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6912      	ldr	r2, [r2, #16]
 80044ae:	0852      	lsrs	r2, r2, #1
 80044b0:	3a01      	subs	r2, #1
 80044b2:	0652      	lsls	r2, r2, #25
 80044b4:	430a      	orrs	r2, r1
 80044b6:	4916      	ldr	r1, [pc, #88]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044bc:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fd fc08 	bl	8001cdc <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ce:	e009      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d0:	f7fd fc04 	bl	8001cdc <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	73fb      	strb	r3, [r7, #15]
          break;
 80044e2:	e005      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ef      	beq.n	80044d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044f6:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4904      	ldr	r1, [pc, #16]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004500:	4313      	orrs	r3, r2
 8004502:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000

08004514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e040      	b.n	80045a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd fada 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	@ 0x24
 8004540:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fae0 	bl	8004b20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f825 	bl	80045b0 <UART_SetConfig>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e01b      	b.n	80045a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800457e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800458e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fb5f 	bl	8004c64 <UART_CheckIdleState>
 80045a6:	4603      	mov	r3, r0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b4:	b08a      	sub	sp, #40	@ 0x28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4ba4      	ldr	r3, [pc, #656]	@ (8004870 <UART_SetConfig+0x2c0>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a99      	ldr	r2, [pc, #612]	@ (8004874 <UART_SetConfig+0x2c4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004618:	4313      	orrs	r3, r2
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a90      	ldr	r2, [pc, #576]	@ (8004878 <UART_SetConfig+0x2c8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d126      	bne.n	8004688 <UART_SetConfig+0xd8>
 800463a:	4b90      	ldr	r3, [pc, #576]	@ (800487c <UART_SetConfig+0x2cc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b03      	cmp	r3, #3
 8004646:	d81b      	bhi.n	8004680 <UART_SetConfig+0xd0>
 8004648:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <UART_SetConfig+0xa0>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004661 	.word	0x08004661
 8004654:	08004671 	.word	0x08004671
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004666:	e116      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004668:	2302      	movs	r3, #2
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e112      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004670:	2304      	movs	r3, #4
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004676:	e10e      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004678:	2308      	movs	r3, #8
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e10a      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004680:	2310      	movs	r3, #16
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004686:	e106      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <UART_SetConfig+0x2d0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d138      	bne.n	8004704 <UART_SetConfig+0x154>
 8004692:	4b7a      	ldr	r3, [pc, #488]	@ (800487c <UART_SetConfig+0x2cc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d82d      	bhi.n	80046fc <UART_SetConfig+0x14c>
 80046a0:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <UART_SetConfig+0xf8>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046fd 	.word	0x080046fd
 80046b0:	080046fd 	.word	0x080046fd
 80046b4:	080046fd 	.word	0x080046fd
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080046fd 	.word	0x080046fd
 80046c0:	080046fd 	.word	0x080046fd
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	080046e5 	.word	0x080046e5
 80046cc:	080046fd 	.word	0x080046fd
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	080046fd 	.word	0x080046fd
 80046d8:	080046f5 	.word	0x080046f5
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e0d8      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046e4:	2302      	movs	r3, #2
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e0d4      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f2:	e0d0      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fa:	e0cc      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004702:	e0c8      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5e      	ldr	r2, [pc, #376]	@ (8004884 <UART_SetConfig+0x2d4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d125      	bne.n	800475a <UART_SetConfig+0x1aa>
 800470e:	4b5b      	ldr	r3, [pc, #364]	@ (800487c <UART_SetConfig+0x2cc>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004718:	2b30      	cmp	r3, #48	@ 0x30
 800471a:	d016      	beq.n	800474a <UART_SetConfig+0x19a>
 800471c:	2b30      	cmp	r3, #48	@ 0x30
 800471e:	d818      	bhi.n	8004752 <UART_SetConfig+0x1a2>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d00a      	beq.n	800473a <UART_SetConfig+0x18a>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d814      	bhi.n	8004752 <UART_SetConfig+0x1a2>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <UART_SetConfig+0x182>
 800472c:	2b10      	cmp	r3, #16
 800472e:	d008      	beq.n	8004742 <UART_SetConfig+0x192>
 8004730:	e00f      	b.n	8004752 <UART_SetConfig+0x1a2>
 8004732:	2300      	movs	r3, #0
 8004734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004738:	e0ad      	b.n	8004896 <UART_SetConfig+0x2e6>
 800473a:	2302      	movs	r3, #2
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004740:	e0a9      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004742:	2304      	movs	r3, #4
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004748:	e0a5      	b.n	8004896 <UART_SetConfig+0x2e6>
 800474a:	2308      	movs	r3, #8
 800474c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004750:	e0a1      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004752:	2310      	movs	r3, #16
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004758:	e09d      	b.n	8004896 <UART_SetConfig+0x2e6>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a4a      	ldr	r2, [pc, #296]	@ (8004888 <UART_SetConfig+0x2d8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d125      	bne.n	80047b0 <UART_SetConfig+0x200>
 8004764:	4b45      	ldr	r3, [pc, #276]	@ (800487c <UART_SetConfig+0x2cc>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800476e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004770:	d016      	beq.n	80047a0 <UART_SetConfig+0x1f0>
 8004772:	2bc0      	cmp	r3, #192	@ 0xc0
 8004774:	d818      	bhi.n	80047a8 <UART_SetConfig+0x1f8>
 8004776:	2b80      	cmp	r3, #128	@ 0x80
 8004778:	d00a      	beq.n	8004790 <UART_SetConfig+0x1e0>
 800477a:	2b80      	cmp	r3, #128	@ 0x80
 800477c:	d814      	bhi.n	80047a8 <UART_SetConfig+0x1f8>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <UART_SetConfig+0x1d8>
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0x1e8>
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x1f8>
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478e:	e082      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004796:	e07e      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479e:	e07a      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a6:	e076      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ae:	e072      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a35      	ldr	r2, [pc, #212]	@ (800488c <UART_SetConfig+0x2dc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d12a      	bne.n	8004810 <UART_SetConfig+0x260>
 80047ba:	4b30      	ldr	r3, [pc, #192]	@ (800487c <UART_SetConfig+0x2cc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c8:	d01a      	beq.n	8004800 <UART_SetConfig+0x250>
 80047ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ce:	d81b      	bhi.n	8004808 <UART_SetConfig+0x258>
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d4:	d00c      	beq.n	80047f0 <UART_SetConfig+0x240>
 80047d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047da:	d815      	bhi.n	8004808 <UART_SetConfig+0x258>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <UART_SetConfig+0x238>
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e4:	d008      	beq.n	80047f8 <UART_SetConfig+0x248>
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x258>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ee:	e052      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047f0:	2302      	movs	r3, #2
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f6:	e04e      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fe:	e04a      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004806:	e046      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480e:	e042      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a17      	ldr	r2, [pc, #92]	@ (8004874 <UART_SetConfig+0x2c4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d13a      	bne.n	8004890 <UART_SetConfig+0x2e0>
 800481a:	4b18      	ldr	r3, [pc, #96]	@ (800487c <UART_SetConfig+0x2cc>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004820:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004824:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004828:	d01a      	beq.n	8004860 <UART_SetConfig+0x2b0>
 800482a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800482e:	d81b      	bhi.n	8004868 <UART_SetConfig+0x2b8>
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004834:	d00c      	beq.n	8004850 <UART_SetConfig+0x2a0>
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483a:	d815      	bhi.n	8004868 <UART_SetConfig+0x2b8>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <UART_SetConfig+0x298>
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004844:	d008      	beq.n	8004858 <UART_SetConfig+0x2a8>
 8004846:	e00f      	b.n	8004868 <UART_SetConfig+0x2b8>
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e022      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004856:	e01e      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e01a      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e016      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e012      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004870:	efff69f3 	.word	0xefff69f3
 8004874:	40008000 	.word	0x40008000
 8004878:	40013800 	.word	0x40013800
 800487c:	40021000 	.word	0x40021000
 8004880:	40004400 	.word	0x40004400
 8004884:	40004800 	.word	0x40004800
 8004888:	40004c00 	.word	0x40004c00
 800488c:	40005000 	.word	0x40005000
 8004890:	2310      	movs	r3, #16
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a9f      	ldr	r2, [pc, #636]	@ (8004b18 <UART_SetConfig+0x568>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d17a      	bne.n	8004996 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d824      	bhi.n	80048f2 <UART_SetConfig+0x342>
 80048a8:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <UART_SetConfig+0x300>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048e3 	.word	0x080048e3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	080048f3 	.word	0x080048f3
 80048d0:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7ff f8d6 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80048d8:	61f8      	str	r0, [r7, #28]
        break;
 80048da:	e010      	b.n	80048fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b8f      	ldr	r3, [pc, #572]	@ (8004b1c <UART_SetConfig+0x56c>)
 80048de:	61fb      	str	r3, [r7, #28]
        break;
 80048e0:	e00d      	b.n	80048fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7ff f837 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 80048e6:	61f8      	str	r0, [r7, #28]
        break;
 80048e8:	e009      	b.n	80048fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ee:	61fb      	str	r3, [r7, #28]
        break;
 80048f0:	e005      	b.n	80048fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80fb 	beq.w	8004afc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	429a      	cmp	r2, r3
 8004914:	d305      	bcc.n	8004922 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	429a      	cmp	r2, r3
 8004920:	d903      	bls.n	800492a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004928:	e0e8      	b.n	8004afc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2200      	movs	r2, #0
 800492e:	461c      	mov	r4, r3
 8004930:	4615      	mov	r5, r2
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	022b      	lsls	r3, r5, #8
 800493c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004940:	0222      	lsls	r2, r4, #8
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	6849      	ldr	r1, [r1, #4]
 8004946:	0849      	lsrs	r1, r1, #1
 8004948:	2000      	movs	r0, #0
 800494a:	4688      	mov	r8, r1
 800494c:	4681      	mov	r9, r0
 800494e:	eb12 0a08 	adds.w	sl, r2, r8
 8004952:	eb43 0b09 	adc.w	fp, r3, r9
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004964:	4650      	mov	r0, sl
 8004966:	4659      	mov	r1, fp
 8004968:	f7fc f98e 	bl	8000c88 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4613      	mov	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800497a:	d308      	bcc.n	800498e <UART_SetConfig+0x3de>
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004982:	d204      	bcs.n	800498e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	e0b6      	b.n	8004afc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004994:	e0b2      	b.n	8004afc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800499e:	d15e      	bne.n	8004a5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d828      	bhi.n	80049fa <UART_SetConfig+0x44a>
 80049a8:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <UART_SetConfig+0x400>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049fb 	.word	0x080049fb
 80049cc:	080049fb 	.word	0x080049fb
 80049d0:	080049f3 	.word	0x080049f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7ff f856 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80049d8:	61f8      	str	r0, [r7, #28]
        break;
 80049da:	e014      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7ff f868 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 80049e0:	61f8      	str	r0, [r7, #28]
        break;
 80049e2:	e010      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b4d      	ldr	r3, [pc, #308]	@ (8004b1c <UART_SetConfig+0x56c>)
 80049e6:	61fb      	str	r3, [r7, #28]
        break;
 80049e8:	e00d      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe ffb3 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 80049ee:	61f8      	str	r0, [r7, #28]
        break;
 80049f0:	e009      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f6:	61fb      	str	r3, [r7, #28]
        break;
 80049f8:	e005      	b.n	8004a06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d077      	beq.n	8004afc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005a      	lsls	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d916      	bls.n	8004a56 <UART_SetConfig+0x4a6>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2e:	d212      	bcs.n	8004a56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f023 030f 	bic.w	r3, r3, #15
 8004a38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	8afb      	ldrh	r3, [r7, #22]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	8afa      	ldrh	r2, [r7, #22]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	e052      	b.n	8004afc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a5c:	e04e      	b.n	8004afc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d827      	bhi.n	8004ab6 <UART_SetConfig+0x506>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <UART_SetConfig+0x4bc>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004ab7 	.word	0x08004ab7
 8004a7c:	08004aa7 	.word	0x08004aa7
 8004a80:	08004ab7 	.word	0x08004ab7
 8004a84:	08004ab7 	.word	0x08004ab7
 8004a88:	08004ab7 	.word	0x08004ab7
 8004a8c:	08004aaf 	.word	0x08004aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7fe fff8 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8004a94:	61f8      	str	r0, [r7, #28]
        break;
 8004a96:	e014      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7ff f80a 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	61f8      	str	r0, [r7, #28]
        break;
 8004a9e:	e010      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b1c <UART_SetConfig+0x56c>)
 8004aa2:	61fb      	str	r3, [r7, #28]
        break;
 8004aa4:	e00d      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa6:	f7fe ff55 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8004aaa:	61f8      	str	r0, [r7, #28]
        break;
 8004aac:	e009      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab2:	61fb      	str	r3, [r7, #28]
        break;
 8004ab4:	e005      	b.n	8004ac2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ac0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d019      	beq.n	8004afc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	085a      	lsrs	r2, r3, #1
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	441a      	add	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d909      	bls.n	8004af6 <UART_SetConfig+0x546>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae8:	d205      	bcs.n	8004af6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e002      	b.n	8004afc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	@ 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b16:	bf00      	nop
 8004b18:	40008000 	.word	0x40008000
 8004b1c:	00f42400 	.word	0x00f42400

08004b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c1e:	d10a      	bne.n	8004c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b098      	sub	sp, #96	@ 0x60
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c74:	f7fd f832 	bl	8001cdc <HAL_GetTick>
 8004c78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d12e      	bne.n	8004ce6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c90:	2200      	movs	r2, #0
 8004c92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f88c 	bl	8004db4 <UART_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d021      	beq.n	8004ce6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e062      	b.n	8004dac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d149      	bne.n	8004d88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f856 	bl	8004db4 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03c      	beq.n	8004d88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d60:	61fa      	str	r2, [r7, #28]
 8004d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e011      	b.n	8004dac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3758      	adds	r7, #88	@ 0x58
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	e04f      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d04b      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fc ff85 	bl	8001cdc <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d302      	bcc.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e04e      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d037      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b80      	cmp	r3, #128	@ 0x80
 8004dfa:	d034      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d031      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d110      	bne.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2208      	movs	r2, #8
 8004e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f838 	bl	8004e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2208      	movs	r2, #8
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e029      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e40:	d111      	bne.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f81e 	bl	8004e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e00f      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	bf0c      	ite	eq
 8004e76:	2301      	moveq	r3, #1
 8004e78:	2300      	movne	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d0a0      	beq.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b095      	sub	sp, #84	@ 0x54
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d118      	bne.n	8004f36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f023 0310 	bic.w	r3, r3, #16
 8004f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f4a:	bf00      	nop
 8004f4c:	3754      	adds	r7, #84	@ 0x54
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <DataHist_parameters>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8004f5e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004f62:	7020      	strb	r0, [r4, #0]
 8004f64:	6808      	ldr	r0, [r1, #0]
 8004f66:	6060      	str	r0, [r4, #4]
 8004f68:	6848      	ldr	r0, [r1, #4]
 8004f6a:	60a0      	str	r0, [r4, #8]
 8004f6c:	6888      	ldr	r0, [r1, #8]
 8004f6e:	60e0      	str	r0, [r4, #12]
 8004f70:	68c8      	ldr	r0, [r1, #12]
 8004f72:	6120      	str	r0, [r4, #16]
 8004f74:	6908      	ldr	r0, [r1, #16]
 8004f76:	6160      	str	r0, [r4, #20]
 8004f78:	6948      	ldr	r0, [r1, #20]
 8004f7a:	61a0      	str	r0, [r4, #24]
 8004f7c:	6988      	ldr	r0, [r1, #24]
 8004f7e:	61e0      	str	r0, [r4, #28]
 8004f80:	69c8      	ldr	r0, [r1, #28]
 8004f82:	6220      	str	r0, [r4, #32]
 8004f84:	6a09      	ldr	r1, [r1, #32]
 8004f86:	6261      	str	r1, [r4, #36]	@ 0x24
 8004f88:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 8004f8c:	8811      	ldrh	r1, [r2, #0]
 8004f8e:	edd2 7a01 	vldr	s15, [r2, #4]
 8004f92:	8521      	strh	r1, [r4, #40]	@ 0x28
 8004f94:	f102 0e80 	add.w	lr, r2, #128	@ 0x80
 8004f98:	f104 0830 	add.w	r8, r4, #48	@ 0x30
 8004f9c:	2700      	movs	r7, #0
 8004f9e:	f1ae 0278 	sub.w	r2, lr, #120	@ 0x78
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	f852 0b04 	ldr.w	r0, [r2], #4
 8004fa8:	f841 0b04 	str.w	r0, [r1], #4
 8004fac:	4572      	cmp	r2, lr
 8004fae:	d1f9      	bne.n	8004fa4 <DataHist_parameters+0x4c>
 8004fb0:	371e      	adds	r7, #30
 8004fb2:	2f5a      	cmp	r7, #90	@ 0x5a
 8004fb4:	f108 0878 	add.w	r8, r8, #120	@ 0x78
 8004fb8:	f102 0e78 	add.w	lr, r2, #120	@ 0x78
 8004fbc:	d1ef      	bne.n	8004f9e <DataHist_parameters+0x46>
 8004fbe:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 8004fc2:	881a      	ldrh	r2, [r3, #0]
 8004fc4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8004fc8:	f8a4 2198 	strh.w	r2, [r4, #408]	@ 0x198
 8004fcc:	f103 0e80 	add.w	lr, r3, #128	@ 0x80
 8004fd0:	f504 77d0 	add.w	r7, r4, #416	@ 0x1a0
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f1ae 0378 	sub.w	r3, lr, #120	@ 0x78
 8004fda:	463a      	mov	r2, r7
 8004fdc:	f853 1b04 	ldr.w	r1, [r3], #4
 8004fe0:	f842 1b04 	str.w	r1, [r2], #4
 8004fe4:	4573      	cmp	r3, lr
 8004fe6:	d1f9      	bne.n	8004fdc <DataHist_parameters+0x84>
 8004fe8:	301e      	adds	r0, #30
 8004fea:	285a      	cmp	r0, #90	@ 0x5a
 8004fec:	f107 0778 	add.w	r7, r7, #120	@ 0x78
 8004ff0:	f103 0e78 	add.w	lr, r3, #120	@ 0x78
 8004ff4:	d1ef      	bne.n	8004fd6 <DataHist_parameters+0x7e>
 8004ff6:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
 8004ffa:	f8bc 3000 	ldrh.w	r3, [ip]
 8004ffe:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8005002:	f8a4 3308 	strh.w	r3, [r4, #776]	@ 0x308
 8005006:	f10c 0c80 	add.w	ip, ip, #128	@ 0x80
 800500a:	f504 7e44 	add.w	lr, r4, #784	@ 0x310
 800500e:	2000      	movs	r0, #0
 8005010:	f1ac 0378 	sub.w	r3, ip, #120	@ 0x78
 8005014:	4672      	mov	r2, lr
 8005016:	f853 1b04 	ldr.w	r1, [r3], #4
 800501a:	f842 1b04 	str.w	r1, [r2], #4
 800501e:	4563      	cmp	r3, ip
 8005020:	d1f9      	bne.n	8005016 <DataHist_parameters+0xbe>
 8005022:	301e      	adds	r0, #30
 8005024:	285a      	cmp	r0, #90	@ 0x5a
 8005026:	f10e 0e78 	add.w	lr, lr, #120	@ 0x78
 800502a:	f103 0c78 	add.w	ip, r3, #120	@ 0x78
 800502e:	d1ef      	bne.n	8005010 <DataHist_parameters+0xb8>
 8005030:	f8c4 730c 	str.w	r7, [r4, #780]	@ 0x30c
 8005034:	8833      	ldrh	r3, [r6, #0]
 8005036:	6877      	ldr	r7, [r6, #4]
 8005038:	f8a4 3478 	strh.w	r3, [r4, #1144]	@ 0x478
 800503c:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 8005040:	f504 6c90 	add.w	ip, r4, #1152	@ 0x480
 8005044:	2600      	movs	r6, #0
 8005046:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 800504a:	4662      	mov	r2, ip
 800504c:	f853 1b04 	ldr.w	r1, [r3], #4
 8005050:	f842 1b04 	str.w	r1, [r2], #4
 8005054:	4283      	cmp	r3, r0
 8005056:	d1f9      	bne.n	800504c <DataHist_parameters+0xf4>
 8005058:	361e      	adds	r6, #30
 800505a:	2e5a      	cmp	r6, #90	@ 0x5a
 800505c:	f10c 0c78 	add.w	ip, ip, #120	@ 0x78
 8005060:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8005064:	d1ef      	bne.n	8005046 <DataHist_parameters+0xee>
 8005066:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 800506a:	69aa      	ldr	r2, [r5, #24]
 800506c:	605f      	str	r7, [r3, #4]
 800506e:	f504 63bd 	add.w	r3, r4, #1512	@ 0x5e8
 8005072:	7829      	ldrb	r1, [r5, #0]
 8005074:	f884 15e8 	strb.w	r1, [r4, #1512]	@ 0x5e8
 8005078:	619a      	str	r2, [r3, #24]
 800507a:	6869      	ldr	r1, [r5, #4]
 800507c:	6059      	str	r1, [r3, #4]
 800507e:	f504 62be 	add.w	r2, r4, #1520	@ 0x5f0
 8005082:	68a9      	ldr	r1, [r5, #8]
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	f204 52f4 	addw	r2, r4, #1524	@ 0x5f4
 800508a:	68e9      	ldr	r1, [r5, #12]
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	f504 62bf 	add.w	r2, r4, #1528	@ 0x5f8
 8005092:	6929      	ldr	r1, [r5, #16]
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	f204 52fc 	addw	r2, r4, #1532	@ 0x5fc
 800509a:	6969      	ldr	r1, [r5, #20]
 800509c:	6011      	str	r1, [r2, #0]
 800509e:	69e9      	ldr	r1, [r5, #28]
 80050a0:	61d9      	str	r1, [r3, #28]
 80050a2:	f504 62c1 	add.w	r2, r4, #1544	@ 0x608
 80050a6:	6a2b      	ldr	r3, [r5, #32]
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	f204 630c 	addw	r3, r4, #1548	@ 0x60c
 80050ae:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f504 63c2 	add.w	r3, r4, #1552	@ 0x610
 80050b6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f204 6414 	addw	r4, r4, #1556	@ 0x614
 80050be:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c6:	bf00      	nop

080050c8 <rotVect>:
 80050c8:	f991 3001 	ldrsb.w	r3, [r1, #1]
 80050cc:	ed92 7a01 	vldr	s14, [r2, #4]
 80050d0:	ed92 6a00 	vldr	s12, [r2]
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	f991 3000 	ldrsb.w	r3, [r1]
 80050dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e0:	ee06 3a90 	vmov	s13, r3
 80050e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e8:	f991 3002 	ldrsb.w	r3, [r1, #2]
 80050ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80050f0:	ee07 3a10 	vmov	s14, r3
 80050f4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80050f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050fc:	edd2 6a02 	vldr	s13, [r2, #8]
 8005100:	eee7 7a26 	vfma.f32	s15, s14, s13
 8005104:	edc0 7a00 	vstr	s15, [r0]
 8005108:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800510c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005110:	ed92 6a00 	vldr	s12, [r2]
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800511c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005120:	ee06 3a90 	vmov	s13, r3
 8005124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005128:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800512c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005130:	ee07 3a10 	vmov	s14, r3
 8005134:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005138:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800513c:	edd2 6a02 	vldr	s13, [r2, #8]
 8005140:	eee7 7a26 	vfma.f32	s15, s14, s13
 8005144:	edc0 7a01 	vstr	s15, [r0, #4]
 8005148:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800514c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005150:	ed92 6a00 	vldr	s12, [r2]
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800515c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005160:	ee06 3a90 	vmov	s13, r3
 8005164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005168:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800516c:	f991 3008 	ldrsb.w	r3, [r1, #8]
 8005170:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005174:	ee07 3a10 	vmov	s14, r3
 8005178:	edd2 6a02 	vldr	s13, [r2, #8]
 800517c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005180:	eee7 7a26 	vfma.f32	s15, s14, s13
 8005184:	edc0 7a02 	vstr	s15, [r0, #8]
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	0000      	movs	r0, r0
	...

08005190 <findDirection>:
 8005190:	b5d0      	push	{r4, r6, r7, lr}
 8005192:	ed2d 8b04 	vpush	{d8-d9}
 8005196:	eef0 8ac0 	vabs.f32	s17, s0
 800519a:	eeb0 8ae0 	vabs.f32	s16, s1
 800519e:	eef4 8ac8 	vcmpe.f32	s17, s16
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	4604      	mov	r4, r0
 80051a8:	eeb0 9ac1 	vabs.f32	s18, s2
 80051ac:	dd36      	ble.n	800521c <findDirection+0x8c>
 80051ae:	eef4 8ac9 	vcmpe.f32	s17, s18
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	dd31      	ble.n	800521c <findDirection+0x8c>
 80051b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	ee18 0a90 	vmov	r0, s17
 80051c4:	f340 8094 	ble.w	80052f0 <findDirection+0x160>
 80051c8:	f7fb f9be 	bl	8000548 <__aeabi_f2d>
 80051cc:	4606      	mov	r6, r0
 80051ce:	ee18 0a10 	vmov	r0, s16
 80051d2:	460f      	mov	r7, r1
 80051d4:	f7fb f9b8 	bl	8000548 <__aeabi_f2d>
 80051d8:	a387      	add	r3, pc, #540	@ (adr r3, 80053f8 <findDirection+0x268>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fa0b 	bl	80005f8 <__aeabi_dmul>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4630      	mov	r0, r6
 80051e8:	4639      	mov	r1, r7
 80051ea:	f7fb fc95 	bl	8000b18 <__aeabi_dcmpgt>
 80051ee:	b188      	cbz	r0, 8005214 <findDirection+0x84>
 80051f0:	ee19 0a10 	vmov	r0, s18
 80051f4:	f7fb f9a8 	bl	8000548 <__aeabi_f2d>
 80051f8:	a37f      	add	r3, pc, #508	@ (adr r3, 80053f8 <findDirection+0x268>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fb f9fb 	bl	80005f8 <__aeabi_dmul>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb fc85 	bl	8000b18 <__aeabi_dcmpgt>
 800520e:	2800      	cmp	r0, #0
 8005210:	bf18      	it	ne
 8005212:	2404      	movne	r4, #4
 8005214:	ecbd 8b04 	vpop	{d8-d9}
 8005218:	4620      	mov	r0, r4
 800521a:	bdd0      	pop	{r4, r6, r7, pc}
 800521c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	dd32      	ble.n	800528c <findDirection+0xfc>
 8005226:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	ee18 0a10 	vmov	r0, s16
 8005232:	f340 8086 	ble.w	8005342 <findDirection+0x1b2>
 8005236:	f7fb f987 	bl	8000548 <__aeabi_f2d>
 800523a:	4606      	mov	r6, r0
 800523c:	ee18 0a90 	vmov	r0, s17
 8005240:	460f      	mov	r7, r1
 8005242:	f7fb f981 	bl	8000548 <__aeabi_f2d>
 8005246:	a36c      	add	r3, pc, #432	@ (adr r3, 80053f8 <findDirection+0x268>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f7fb f9d4 	bl	80005f8 <__aeabi_dmul>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4630      	mov	r0, r6
 8005256:	4639      	mov	r1, r7
 8005258:	f7fb fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800525c:	2800      	cmp	r0, #0
 800525e:	d0d9      	beq.n	8005214 <findDirection+0x84>
 8005260:	ee19 0a10 	vmov	r0, s18
 8005264:	f7fb f970 	bl	8000548 <__aeabi_f2d>
 8005268:	a363      	add	r3, pc, #396	@ (adr r3, 80053f8 <findDirection+0x268>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f7fb f9c3 	bl	80005f8 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4630      	mov	r0, r6
 8005278:	4639      	mov	r1, r7
 800527a:	f7fb fc4d 	bl	8000b18 <__aeabi_dcmpgt>
 800527e:	ecbd 8b04 	vpop	{d8-d9}
 8005282:	2800      	cmp	r0, #0
 8005284:	bf18      	it	ne
 8005286:	2401      	movne	r4, #1
 8005288:	4620      	mov	r0, r4
 800528a:	bdd0      	pop	{r4, r6, r7, pc}
 800528c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	ee19 0a10 	vmov	r0, s18
 8005298:	dd7f      	ble.n	800539a <findDirection+0x20a>
 800529a:	f7fb f955 	bl	8000548 <__aeabi_f2d>
 800529e:	4606      	mov	r6, r0
 80052a0:	ee18 0a10 	vmov	r0, s16
 80052a4:	460f      	mov	r7, r1
 80052a6:	f7fb f94f 	bl	8000548 <__aeabi_f2d>
 80052aa:	a353      	add	r3, pc, #332	@ (adr r3, 80053f8 <findDirection+0x268>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fb f9a2 	bl	80005f8 <__aeabi_dmul>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4630      	mov	r0, r6
 80052ba:	4639      	mov	r1, r7
 80052bc:	f7fb fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0a7      	beq.n	8005214 <findDirection+0x84>
 80052c4:	ee18 0a90 	vmov	r0, s17
 80052c8:	f7fb f93e 	bl	8000548 <__aeabi_f2d>
 80052cc:	a34a      	add	r3, pc, #296	@ (adr r3, 80053f8 <findDirection+0x268>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fb f991 	bl	80005f8 <__aeabi_dmul>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4630      	mov	r0, r6
 80052dc:	4639      	mov	r1, r7
 80052de:	f7fb fc1b 	bl	8000b18 <__aeabi_dcmpgt>
 80052e2:	ecbd 8b04 	vpop	{d8-d9}
 80052e6:	2800      	cmp	r0, #0
 80052e8:	bf18      	it	ne
 80052ea:	2400      	movne	r4, #0
 80052ec:	4620      	mov	r0, r4
 80052ee:	bdd0      	pop	{r4, r6, r7, pc}
 80052f0:	f7fb f92a 	bl	8000548 <__aeabi_f2d>
 80052f4:	4606      	mov	r6, r0
 80052f6:	ee18 0a10 	vmov	r0, s16
 80052fa:	460f      	mov	r7, r1
 80052fc:	f7fb f924 	bl	8000548 <__aeabi_f2d>
 8005300:	a33d      	add	r3, pc, #244	@ (adr r3, 80053f8 <findDirection+0x268>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fb f977 	bl	80005f8 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4630      	mov	r0, r6
 8005310:	4639      	mov	r1, r7
 8005312:	f7fb fc01 	bl	8000b18 <__aeabi_dcmpgt>
 8005316:	2800      	cmp	r0, #0
 8005318:	f43f af7c 	beq.w	8005214 <findDirection+0x84>
 800531c:	ee19 0a10 	vmov	r0, s18
 8005320:	f7fb f912 	bl	8000548 <__aeabi_f2d>
 8005324:	a334      	add	r3, pc, #208	@ (adr r3, 80053f8 <findDirection+0x268>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fb f965 	bl	80005f8 <__aeabi_dmul>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4630      	mov	r0, r6
 8005334:	4639      	mov	r1, r7
 8005336:	f7fb fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800533a:	2800      	cmp	r0, #0
 800533c:	bf18      	it	ne
 800533e:	2405      	movne	r4, #5
 8005340:	e768      	b.n	8005214 <findDirection+0x84>
 8005342:	f7fb f901 	bl	8000548 <__aeabi_f2d>
 8005346:	4606      	mov	r6, r0
 8005348:	ee18 0a90 	vmov	r0, s17
 800534c:	460f      	mov	r7, r1
 800534e:	f7fb f8fb 	bl	8000548 <__aeabi_f2d>
 8005352:	a329      	add	r3, pc, #164	@ (adr r3, 80053f8 <findDirection+0x268>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f94e 	bl	80005f8 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4630      	mov	r0, r6
 8005362:	4639      	mov	r1, r7
 8005364:	f7fb fbd8 	bl	8000b18 <__aeabi_dcmpgt>
 8005368:	2800      	cmp	r0, #0
 800536a:	f43f af53 	beq.w	8005214 <findDirection+0x84>
 800536e:	ee19 0a10 	vmov	r0, s18
 8005372:	f7fb f8e9 	bl	8000548 <__aeabi_f2d>
 8005376:	a320      	add	r3, pc, #128	@ (adr r3, 80053f8 <findDirection+0x268>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fb f93c 	bl	80005f8 <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4630      	mov	r0, r6
 8005386:	4639      	mov	r1, r7
 8005388:	f7fb fbc6 	bl	8000b18 <__aeabi_dcmpgt>
 800538c:	ecbd 8b04 	vpop	{d8-d9}
 8005390:	2800      	cmp	r0, #0
 8005392:	bf18      	it	ne
 8005394:	2403      	movne	r4, #3
 8005396:	4620      	mov	r0, r4
 8005398:	bdd0      	pop	{r4, r6, r7, pc}
 800539a:	f7fb f8d5 	bl	8000548 <__aeabi_f2d>
 800539e:	4606      	mov	r6, r0
 80053a0:	ee18 0a10 	vmov	r0, s16
 80053a4:	460f      	mov	r7, r1
 80053a6:	f7fb f8cf 	bl	8000548 <__aeabi_f2d>
 80053aa:	a313      	add	r3, pc, #76	@ (adr r3, 80053f8 <findDirection+0x268>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4630      	mov	r0, r6
 80053ba:	4639      	mov	r1, r7
 80053bc:	f7fb fbac 	bl	8000b18 <__aeabi_dcmpgt>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	f43f af27 	beq.w	8005214 <findDirection+0x84>
 80053c6:	ee18 0a90 	vmov	r0, s17
 80053ca:	f7fb f8bd 	bl	8000548 <__aeabi_f2d>
 80053ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80053f8 <findDirection+0x268>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f7fb f910 	bl	80005f8 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fb fb9a 	bl	8000b18 <__aeabi_dcmpgt>
 80053e4:	ecbd 8b04 	vpop	{d8-d9}
 80053e8:	2800      	cmp	r0, #0
 80053ea:	bf18      	it	ne
 80053ec:	2402      	movne	r4, #2
 80053ee:	4620      	mov	r0, r4
 80053f0:	bdd0      	pop	{r4, r6, r7, pc}
 80053f2:	bf00      	nop
 80053f4:	f3af 8000 	nop.w
 80053f8:	e0000000 	.word	0xe0000000
 80053fc:	3ff6b851 	.word	0x3ff6b851

08005400 <updateOrientation>:
 8005400:	2300      	movs	r3, #0
 8005402:	6003      	str	r3, [r0, #0]
 8005404:	6043      	str	r3, [r0, #4]
 8005406:	7203      	strb	r3, [r0, #8]
 8005408:	f891 c000 	ldrb.w	ip, [r1]
 800540c:	784a      	ldrb	r2, [r1, #1]
 800540e:	f1ac 0342 	sub.w	r3, ip, #66	@ 0x42
 8005412:	2b17      	cmp	r3, #23
 8005414:	bf98      	it	ls
 8005416:	f10c 0c20 	addls.w	ip, ip, #32
 800541a:	f1a2 0342 	sub.w	r3, r2, #66	@ 0x42
 800541e:	bf98      	it	ls
 8005420:	fa5f fc8c 	uxtbls.w	ip, ip
 8005424:	2b17      	cmp	r3, #23
 8005426:	788b      	ldrb	r3, [r1, #2]
 8005428:	bf98      	it	ls
 800542a:	3220      	addls	r2, #32
 800542c:	f1a3 0142 	sub.w	r1, r3, #66	@ 0x42
 8005430:	bf98      	it	ls
 8005432:	b2d2      	uxtbls	r2, r2
 8005434:	2917      	cmp	r1, #23
 8005436:	bf98      	it	ls
 8005438:	3320      	addls	r3, #32
 800543a:	f1ac 0c64 	sub.w	ip, ip, #100	@ 0x64
 800543e:	bf98      	it	ls
 8005440:	b2db      	uxtbls	r3, r3
 8005442:	f1bc 0f13 	cmp.w	ip, #19
 8005446:	d80d      	bhi.n	8005464 <updateOrientation+0x64>
 8005448:	e8df f00c 	tbb	[pc, ip]
 800544c:	0c0c0a32 	.word	0x0c0c0a32
 8005450:	0c0c0c0c 	.word	0x0c0c0c0c
 8005454:	0c350c0c 	.word	0x0c350c0c
 8005458:	380c0c0c 	.word	0x380c0c0c
 800545c:	3e0c3b0c 	.word	0x3e0c3b0c
 8005460:	2101      	movs	r1, #1
 8005462:	7001      	strb	r1, [r0, #0]
 8005464:	3a64      	subs	r2, #100	@ 0x64
 8005466:	2a13      	cmp	r2, #19
 8005468:	d80d      	bhi.n	8005486 <updateOrientation+0x86>
 800546a:	e8df f002 	tbb	[pc, r2]
 800546e:	0a30      	.short	0x0a30
 8005470:	0c0c0c0c 	.word	0x0c0c0c0c
 8005474:	0c0c0c0c 	.word	0x0c0c0c0c
 8005478:	0c0c0c33 	.word	0x0c0c0c33
 800547c:	390c360c 	.word	0x390c360c
 8005480:	3c0c      	.short	0x3c0c
 8005482:	2201      	movs	r2, #1
 8005484:	7042      	strb	r2, [r0, #1]
 8005486:	3b64      	subs	r3, #100	@ 0x64
 8005488:	2b13      	cmp	r3, #19
 800548a:	d80d      	bhi.n	80054a8 <updateOrientation+0xa8>
 800548c:	e8df f003 	tbb	[pc, r3]
 8005490:	0c0c2e0a 	.word	0x0c0c2e0a
 8005494:	0c0c0c0c 	.word	0x0c0c0c0c
 8005498:	0c310c0c 	.word	0x0c310c0c
 800549c:	340c0c0c 	.word	0x340c0c0c
 80054a0:	0d0c370c 	.word	0x0d0c370c
 80054a4:	23ff      	movs	r3, #255	@ 0xff
 80054a6:	7203      	strb	r3, [r0, #8]
 80054a8:	4770      	bx	lr
 80054aa:	23ff      	movs	r3, #255	@ 0xff
 80054ac:	7083      	strb	r3, [r0, #2]
 80054ae:	4770      	bx	lr
 80054b0:	21ff      	movs	r1, #255	@ 0xff
 80054b2:	7181      	strb	r1, [r0, #6]
 80054b4:	e7d6      	b.n	8005464 <updateOrientation+0x64>
 80054b6:	2101      	movs	r1, #1
 80054b8:	70c1      	strb	r1, [r0, #3]
 80054ba:	e7d3      	b.n	8005464 <updateOrientation+0x64>
 80054bc:	21ff      	movs	r1, #255	@ 0xff
 80054be:	70c1      	strb	r1, [r0, #3]
 80054c0:	e7d0      	b.n	8005464 <updateOrientation+0x64>
 80054c2:	2101      	movs	r1, #1
 80054c4:	7181      	strb	r1, [r0, #6]
 80054c6:	e7cd      	b.n	8005464 <updateOrientation+0x64>
 80054c8:	21ff      	movs	r1, #255	@ 0xff
 80054ca:	7001      	strb	r1, [r0, #0]
 80054cc:	e7ca      	b.n	8005464 <updateOrientation+0x64>
 80054ce:	22ff      	movs	r2, #255	@ 0xff
 80054d0:	71c2      	strb	r2, [r0, #7]
 80054d2:	e7d8      	b.n	8005486 <updateOrientation+0x86>
 80054d4:	2201      	movs	r2, #1
 80054d6:	7102      	strb	r2, [r0, #4]
 80054d8:	e7d5      	b.n	8005486 <updateOrientation+0x86>
 80054da:	22ff      	movs	r2, #255	@ 0xff
 80054dc:	7102      	strb	r2, [r0, #4]
 80054de:	e7d2      	b.n	8005486 <updateOrientation+0x86>
 80054e0:	2201      	movs	r2, #1
 80054e2:	71c2      	strb	r2, [r0, #7]
 80054e4:	e7cf      	b.n	8005486 <updateOrientation+0x86>
 80054e6:	22ff      	movs	r2, #255	@ 0xff
 80054e8:	7042      	strb	r2, [r0, #1]
 80054ea:	e7cc      	b.n	8005486 <updateOrientation+0x86>
 80054ec:	2301      	movs	r3, #1
 80054ee:	7083      	strb	r3, [r0, #2]
 80054f0:	4770      	bx	lr
 80054f2:	2301      	movs	r3, #1
 80054f4:	7143      	strb	r3, [r0, #5]
 80054f6:	4770      	bx	lr
 80054f8:	23ff      	movs	r3, #255	@ 0xff
 80054fa:	7143      	strb	r3, [r0, #5]
 80054fc:	4770      	bx	lr
 80054fe:	2301      	movs	r3, #1
 8005500:	7203      	strb	r3, [r0, #8]
 8005502:	4770      	bx	lr

08005504 <qmult>:
 8005504:	ed91 2a03 	vldr	s4, [r1, #12]
 8005508:	ed90 3a01 	vldr	s6, [r0, #4]
 800550c:	edd0 5a02 	vldr	s11, [r0, #8]
 8005510:	edd1 4a01 	vldr	s9, [r1, #4]
 8005514:	ed90 4a00 	vldr	s8, [r0]
 8005518:	ed91 5a02 	vldr	s10, [r1, #8]
 800551c:	edd1 3a00 	vldr	s7, [r1]
 8005520:	edd0 2a03 	vldr	s5, [r0, #12]
 8005524:	ee25 6aa4 	vmul.f32	s12, s11, s9
 8005528:	ee62 6a03 	vmul.f32	s13, s4, s6
 800552c:	ee22 7a25 	vmul.f32	s14, s4, s11
 8005530:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 8005534:	eea4 6a02 	vfma.f32	s12, s8, s4
 8005538:	eee4 6a05 	vfma.f32	s13, s8, s10
 800553c:	eea3 7a23 	vfma.f32	s14, s6, s7
 8005540:	eee4 7a63 	vfms.f32	s15, s8, s7
 8005544:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8005548:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800554c:	eea5 7a22 	vfma.f32	s14, s10, s5
 8005550:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005554:	eea3 6a45 	vfms.f32	s12, s6, s10
 8005558:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800555c:	eea4 7a64 	vfms.f32	s14, s8, s9
 8005560:	eee5 7a65 	vfms.f32	s15, s10, s11
 8005564:	ed82 6a00 	vstr	s12, [r2]
 8005568:	edc2 6a01 	vstr	s13, [r2, #4]
 800556c:	ed82 7a02 	vstr	s14, [r2, #8]
 8005570:	edc2 7a03 	vstr	s15, [r2, #12]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <dataDerivative5>:
 8005578:	ed90 7a01 	vldr	s14, [r0, #4]
 800557c:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 8005580:	edd0 6a04 	vldr	s13, [r0, #16]
 8005584:	ed90 6a00 	vldr	s12, [r0]
 8005588:	ed90 4a02 	vldr	s8, [r0, #8]
 800558c:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 8005590:	eeb8 5a00 	vmov.f32	s10, #128	@ 0xc0000000 -2.0
 8005594:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005598:	ed90 7a03 	vldr	s14, [r0, #12]
 800559c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055a0:	edd0 6a0b 	vldr	s13, [r0, #44]	@ 0x2c
 80055a4:	ee96 7a05 	vfnms.f32	s14, s12, s10
 80055a8:	eee4 6a05 	vfma.f32	s13, s8, s10
 80055ac:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 80055b0:	ed90 5a0c 	vldr	s10, [r0, #48]	@ 0x30
 80055b4:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80055b8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80055bc:	ee37 7a24 	vadd.f32	s14, s14, s9
 80055c0:	eeb0 6a66 	vmov.f32	s12, s13
 80055c4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005600 <dataDerivative5+0x88>
 80055c8:	eea5 7a25 	vfma.f32	s14, s10, s11
 80055cc:	ee60 6a26 	vmul.f32	s13, s0, s13
 80055d0:	ed90 5a05 	vldr	s10, [r0, #20]
 80055d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055d8:	ee36 6a45 	vsub.f32	s12, s12, s10
 80055dc:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 80055e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80055e4:	eea5 6a25 	vfma.f32	s12, s10, s11
 80055e8:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80055ec:	ee66 6a86 	vmul.f32	s13, s13, s12
 80055f0:	eea7 0a07 	vfma.f32	s0, s14, s14
 80055f4:	eea6 0aa6 	vfma.f32	s0, s13, s13
 80055f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	3dcccccd 	.word	0x3dcccccd

08005604 <b_dcm2q>:
 8005604:	ed90 5a08 	vldr	s10, [r0, #32]
 8005608:	edd0 7a00 	vldr	s15, [r0]
 800560c:	edd0 6a04 	vldr	s13, [r0, #16]
 8005610:	ee37 7a85 	vadd.f32	s14, s15, s10
 8005614:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8005618:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800561c:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 8005620:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	bfc5      	ittet	gt
 800562a:	eeb7 6a00 	vmovgt.f32	s12, #112	@ 0x3f800000  1.0
 800562e:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 8005632:	eddf 5a43 	vldrle	s11, [pc, #268]	@ 8005740 <b_dcm2q+0x13c>
 8005636:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800563a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800563e:	ee35 6a47 	vsub.f32	s12, s10, s14
 8005642:	ee35 7a07 	vadd.f32	s14, s10, s14
 8005646:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564e:	bfc5      	ittet	gt
 8005650:	eef7 4a00 	vmovgt.f32	s9, #112	@ 0x3f800000  1.0
 8005654:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8005658:	ed9f 6a39 	vldrle	s12, [pc, #228]	@ 8005740 <b_dcm2q+0x13c>
 800565c:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8005660:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 8005664:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8005668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566c:	dd5b      	ble.n	8005726 <b_dcm2q+0x122>
 800566e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8005672:	ee37 7a24 	vadd.f32	s14, s14, s9
 8005676:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800567a:	eef1 4ac7 	vsqrt.f32	s9, s14
 800567e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8005682:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005686:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800568a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800568e:	edd0 6a07 	vldr	s13, [r0, #28]
 8005692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	bf85      	ittet	hi
 800569c:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 80056a0:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 80056a4:	ed9f 7a26 	vldrls	s14, [pc, #152]	@ 8005740 <b_dcm2q+0x13c>
 80056a8:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 80056ac:	edd0 7a05 	vldr	s15, [r0, #20]
 80056b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056bc:	d43c      	bmi.n	8005738 <b_dcm2q+0x134>
 80056be:	bfd8      	it	le
 80056c0:	ee27 7a27 	vmulle.f32	s14, s14, s15
 80056c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80056c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056cc:	ed81 7a00 	vstr	s14, [r1]
 80056d0:	edd0 7a06 	vldr	s15, [r0, #24]
 80056d4:	ed90 7a02 	vldr	s14, [r0, #8]
 80056d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	d425      	bmi.n	8005732 <b_dcm2q+0x12e>
 80056e6:	bfd8      	it	le
 80056e8:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 80056ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80056f0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80056f4:	edc1 5a01 	vstr	s11, [r1, #4]
 80056f8:	edd0 7a01 	vldr	s15, [r0, #4]
 80056fc:	ed90 7a03 	vldr	s14, [r0, #12]
 8005700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570c:	d40e      	bmi.n	800572c <b_dcm2q+0x128>
 800570e:	bfd8      	it	le
 8005710:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8005714:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005718:	ee26 6a27 	vmul.f32	s12, s12, s15
 800571c:	edc1 4a03 	vstr	s9, [r1, #12]
 8005720:	ed81 6a02 	vstr	s12, [r1, #8]
 8005724:	4770      	bx	lr
 8005726:	eddf 4a06 	vldr	s9, [pc, #24]	@ 8005740 <b_dcm2q+0x13c>
 800572a:	e7aa      	b.n	8005682 <b_dcm2q+0x7e>
 800572c:	eeb1 6a46 	vneg.f32	s12, s12
 8005730:	e7f0      	b.n	8005714 <b_dcm2q+0x110>
 8005732:	eef1 5a65 	vneg.f32	s11, s11
 8005736:	e7d9      	b.n	80056ec <b_dcm2q+0xe8>
 8005738:	eeb1 7a47 	vneg.f32	s14, s14
 800573c:	e7c2      	b.n	80056c4 <b_dcm2q+0xc0>
 800573e:	bf00      	nop
 8005740:	00000000 	.word	0x00000000

08005744 <getRotationMatrix>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4613      	mov	r3, r2
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	4618      	mov	r0, r3
 800574e:	2224      	movs	r2, #36	@ 0x24
 8005750:	2100      	movs	r1, #0
 8005752:	f007 f9bd 	bl	800cad0 <memset>
 8005756:	edd5 5a00 	vldr	s11, [r5]
 800575a:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 8005880 <getRotationMatrix+0x13c>
 800575e:	edc0 5a02 	vstr	s11, [r0, #8]
 8005762:	edd5 4a01 	vldr	s9, [r5, #4]
 8005766:	edc0 4a05 	vstr	s9, [r0, #20]
 800576a:	ed95 5a02 	vldr	s10, [r5, #8]
 800576e:	ed80 5a08 	vstr	s10, [r0, #32]
 8005772:	ed94 4a02 	vldr	s8, [r4, #8]
 8005776:	edd4 3a01 	vldr	s7, [r4, #4]
 800577a:	ed94 6a00 	vldr	s12, [r4]
 800577e:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 8005782:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 8005786:	eee3 6a85 	vfma.f32	s13, s7, s10
 800578a:	4603      	mov	r3, r0
 800578c:	eee6 7a24 	vfma.f32	s15, s12, s9
 8005790:	ee25 7a46 	vnmul.f32	s14, s10, s12
 8005794:	eeb0 6ae6 	vabs.f32	s12, s13
 8005798:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800579c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a0:	eea4 7a25 	vfma.f32	s14, s8, s11
 80057a4:	bfdc      	itt	le
 80057a6:	ee86 4a83 	vdivle.f32	s8, s13, s6
 80057aa:	eeb0 6a43 	vmovle.f32	s12, s6
 80057ae:	eef0 3ac7 	vabs.f32	s7, s14
 80057b2:	eeb4 6ae3 	vcmpe.f32	s12, s7
 80057b6:	bfd4      	ite	le
 80057b8:	ee24 4a04 	vmulle.f32	s8, s8, s8
 80057bc:	eeb7 4a00 	vmovgt.f32	s8, #112	@ 0x3f800000  1.0
 80057c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c4:	ed80 7a03 	vstr	s14, [r0, #12]
 80057c8:	edc0 7a06 	vstr	s15, [r0, #24]
 80057cc:	d43f      	bmi.n	800584e <getRotationMatrix+0x10a>
 80057ce:	eec7 3a06 	vdiv.f32	s7, s14, s12
 80057d2:	eea3 4aa3 	vfma.f32	s8, s7, s7
 80057d6:	eeb0 3a44 	vmov.f32	s6, s8
 80057da:	eeb0 4ae7 	vabs.f32	s8, s15
 80057de:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80057e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e6:	d543      	bpl.n	8005870 <getRotationMatrix+0x12c>
 80057e8:	eec6 2a04 	vdiv.f32	s5, s12, s8
 80057ec:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80057f0:	ee62 2aa2 	vmul.f32	s5, s5, s5
 80057f4:	eeb0 6a44 	vmov.f32	s12, s8
 80057f8:	eee3 3a22 	vfma.f32	s7, s6, s5
 80057fc:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8005800:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8005804:	ee24 6a06 	vmul.f32	s12, s8, s12
 8005808:	ee83 4a86 	vdiv.f32	s8, s7, s12
 800580c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005810:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005814:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005818:	ee65 3a47 	vnmul.f32	s7, s10, s14
 800581c:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8005820:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8005824:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8005828:	eef0 4a44 	vmov.f32	s9, s8
 800582c:	eee6 4a85 	vfma.f32	s9, s13, s10
 8005830:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005834:	edc3 6a00 	vstr	s13, [r3]
 8005838:	ed83 7a03 	vstr	s14, [r3, #12]
 800583c:	edc3 7a06 	vstr	s15, [r3, #24]
 8005840:	edc3 3a01 	vstr	s7, [r3, #4]
 8005844:	edc3 4a04 	vstr	s9, [r3, #16]
 8005848:	ed83 6a07 	vstr	s12, [r3, #28]
 800584c:	bd38      	pop	{r3, r4, r5, pc}
 800584e:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8005852:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8005856:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800585a:	eeb0 6a63 	vmov.f32	s12, s7
 800585e:	eea4 3a22 	vfma.f32	s6, s8, s5
 8005862:	eeb0 4ae7 	vabs.f32	s8, s15
 8005866:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586e:	d4bb      	bmi.n	80057e8 <getRotationMatrix+0xa4>
 8005870:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8005874:	eef0 3a43 	vmov.f32	s7, s6
 8005878:	eee4 3a04 	vfma.f32	s7, s8, s8
 800587c:	e7be      	b.n	80057fc <getRotationMatrix+0xb8>
 800587e:	bf00      	nop
 8005880:	00000000 	.word	0x00000000

08005884 <kf_update>:
 8005884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	ed2d 8b10 	vpush	{d8-d15}
 800588c:	f2ad 4d2c 	subw	sp, sp, #1068	@ 0x42c
 8005890:	3901      	subs	r1, #1
 8005892:	f8dd 4490 	ldr.w	r4, [sp, #1168]	@ 0x490
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	ed94 2a00 	vldr	s4, [r4]
 800589c:	edd4 2a01 	vldr	s5, [r4, #4]
 80058a0:	ed94 3a02 	vldr	s6, [r4, #8]
 80058a4:	edd4 3a03 	vldr	s7, [r4, #12]
 80058a8:	ed94 4a04 	vldr	s8, [r4, #16]
 80058ac:	edd4 4a05 	vldr	s9, [r4, #20]
 80058b0:	ed94 5a06 	vldr	s10, [r4, #24]
 80058b4:	edd4 5a07 	vldr	s11, [r4, #28]
 80058b8:	ed94 6a08 	vldr	s12, [r4, #32]
 80058bc:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 80058c0:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80058c4:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80058c8:	ed9f 8a1c 	vldr	s16, [pc, #112]	@ 800593c <kf_update+0xb8>
 80058cc:	9104      	str	r1, [sp, #16]
 80058ce:	ab0b      	add	r3, sp, #44	@ 0x2c
 80058d0:	ee22 2a02 	vmul.f32	s4, s4, s4
 80058d4:	ee62 2aa2 	vmul.f32	s5, s5, s5
 80058d8:	ee23 3a03 	vmul.f32	s6, s6, s6
 80058dc:	ee63 3aa3 	vmul.f32	s7, s7, s7
 80058e0:	ee24 4a04 	vmul.f32	s8, s8, s8
 80058e4:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80058e8:	ee25 5a05 	vmul.f32	s10, s10, s10
 80058ec:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80058f0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80058f4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80058f8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80058fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	2300      	movs	r3, #0
 8005904:	4606      	mov	r6, r0
 8005906:	9200      	str	r2, [sp, #0]
 8005908:	ed8d 2a0b 	vstr	s4, [sp, #44]	@ 0x2c
 800590c:	edcd 2a0c 	vstr	s5, [sp, #48]	@ 0x30
 8005910:	ed8d 3a0d 	vstr	s6, [sp, #52]	@ 0x34
 8005914:	edcd 3a0e 	vstr	s7, [sp, #56]	@ 0x38
 8005918:	ed8d 4a0f 	vstr	s8, [sp, #60]	@ 0x3c
 800591c:	edcd 4a10 	vstr	s9, [sp, #64]	@ 0x40
 8005920:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
 8005924:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8005928:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 800592c:	edcd 6a14 	vstr	s13, [sp, #80]	@ 0x50
 8005930:	ed8d 7a15 	vstr	s14, [sp, #84]	@ 0x54
 8005934:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	e010      	b.n	800595e <kf_update+0xda>
 800593c:	00000000 	.word	0x00000000
 8005940:	9a00      	ldr	r2, [sp, #0]
 8005942:	9b01      	ldr	r3, [sp, #4]
 8005944:	3204      	adds	r2, #4
 8005946:	9200      	str	r2, [sp, #0]
 8005948:	9a02      	ldr	r2, [sp, #8]
 800594a:	3204      	adds	r2, #4
 800594c:	9202      	str	r2, [sp, #8]
 800594e:	9a03      	ldr	r2, [sp, #12]
 8005950:	3301      	adds	r3, #1
 8005952:	3204      	adds	r2, #4
 8005954:	2b0c      	cmp	r3, #12
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	9203      	str	r2, [sp, #12]
 800595a:	f000 857b 	beq.w	8006454 <kf_update+0xbd0>
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005964:	9204      	str	r2, [sp, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0ea      	beq.n	8005940 <kf_update+0xbc>
 800596a:	9a03      	ldr	r2, [sp, #12]
 800596c:	ed8d 8a17 	vstr	s16, [sp, #92]	@ 0x5c
 8005970:	f106 0328 	add.w	r3, r6, #40	@ 0x28
 8005974:	ac17      	add	r4, sp, #92	@ 0x5c
 8005976:	edd2 da00 	vldr	s27, [r2]
 800597a:	ed92 ea0c 	vldr	s28, [r2, #48]	@ 0x30
 800597e:	edd2 ea18 	vldr	s29, [r2, #96]	@ 0x60
 8005982:	ed92 fa24 	vldr	s30, [r2, #144]	@ 0x90
 8005986:	edd2 fa30 	vldr	s31, [r2, #192]	@ 0xc0
 800598a:	edd2 6a3c 	vldr	s13, [r2, #240]	@ 0xf0
 800598e:	ed92 6a48 	vldr	s12, [r2, #288]	@ 0x120
 8005992:	edd2 5a54 	vldr	s11, [r2, #336]	@ 0x150
 8005996:	ed92 5a60 	vldr	s10, [r2, #384]	@ 0x180
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	ed8d 8a18 	vstr	s16, [sp, #96]	@ 0x60
 80059a0:	ed8d 8a19 	vstr	s16, [sp, #100]	@ 0x64
 80059a4:	ed8d 8a1a 	vstr	s16, [sp, #104]	@ 0x68
 80059a8:	ed8d 8a1b 	vstr	s16, [sp, #108]	@ 0x6c
 80059ac:	ed8d 8a1c 	vstr	s16, [sp, #112]	@ 0x70
 80059b0:	ed8d 8a1d 	vstr	s16, [sp, #116]	@ 0x74
 80059b4:	ed8d 8a1e 	vstr	s16, [sp, #120]	@ 0x78
 80059b8:	ed8d 8a1f 	vstr	s16, [sp, #124]	@ 0x7c
 80059bc:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 80059c0:	4622      	mov	r2, r4
 80059c2:	ecb3 7a01 	vldmia	r3!, {s14}
 80059c6:	ecf2 7a01 	vldmia	r2!, {s15}
 80059ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80059ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d2:	d006      	beq.n	80059e2 <kf_update+0x15e>
 80059d4:	eef5 da40 	vcmp.f32	s27, #0.0
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	bf18      	it	ne
 80059de:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 80059e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80059e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80059ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ee:	d006      	beq.n	80059fe <kf_update+0x17a>
 80059f0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80059f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f8:	bf18      	it	ne
 80059fa:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 80059fe:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8005a02:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0a:	d006      	beq.n	8005a1a <kf_update+0x196>
 8005a0c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8005a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a14:	bf18      	it	ne
 8005a16:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8005a1a:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8005a1e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a26:	d006      	beq.n	8005a36 <kf_update+0x1b2>
 8005a28:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8005a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a30:	bf18      	it	ne
 8005a32:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8005a36:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8005a3a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a42:	d006      	beq.n	8005a52 <kf_update+0x1ce>
 8005a44:	eef5 fa40 	vcmp.f32	s31, #0.0
 8005a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4c:	bf18      	it	ne
 8005a4e:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8005a52:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8005a56:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	d006      	beq.n	8005a6e <kf_update+0x1ea>
 8005a60:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a68:	bf18      	it	ne
 8005a6a:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8005a6e:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8005a72:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7a:	d006      	beq.n	8005a8a <kf_update+0x206>
 8005a7c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a84:	bf18      	it	ne
 8005a86:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8005a8a:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8005a8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	d006      	beq.n	8005aa6 <kf_update+0x222>
 8005a98:	eef5 5a40 	vcmp.f32	s11, #0.0
 8005a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa0:	bf18      	it	ne
 8005aa2:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8005aa6:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 8005aaa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	d006      	beq.n	8005ac2 <kf_update+0x23e>
 8005ab4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8005ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abc:	bf18      	it	ne
 8005abe:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005ac8:	f47f af7b 	bne.w	80059c2 <kf_update+0x13e>
 8005acc:	eef5 da40 	vcmp.f32	s27, #0.0
 8005ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad4:	eddd ba17 	vldr	s23, [sp, #92]	@ 0x5c
 8005ad8:	f040 8492 	bne.w	8006400 <kf_update+0xb7c>
 8005adc:	eef0 7a6d 	vmov.f32	s15, s27
 8005ae0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8005ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae8:	ed9d ca18 	vldr	s24, [sp, #96]	@ 0x60
 8005aec:	d006      	beq.n	8005afc <kf_update+0x278>
 8005aee:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8005af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af6:	bf18      	it	ne
 8005af8:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 8005afc:	eef5 ea40 	vcmp.f32	s29, #0.0
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	ed9d aa19 	vldr	s20, [sp, #100]	@ 0x64
 8005b08:	d006      	beq.n	8005b18 <kf_update+0x294>
 8005b0a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8005b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b12:	bf18      	it	ne
 8005b14:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 8005b18:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8005b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b20:	ed9d da1a 	vldr	s26, [sp, #104]	@ 0x68
 8005b24:	d006      	beq.n	8005b34 <kf_update+0x2b0>
 8005b26:	eeb5 da40 	vcmp.f32	s26, #0.0
 8005b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2e:	bf18      	it	ne
 8005b30:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 8005b34:	eef5 fa40 	vcmp.f32	s31, #0.0
 8005b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3c:	eddd ca1b 	vldr	s25, [sp, #108]	@ 0x6c
 8005b40:	d006      	beq.n	8005b50 <kf_update+0x2cc>
 8005b42:	eef5 ca40 	vcmp.f32	s25, #0.0
 8005b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4a:	bf18      	it	ne
 8005b4c:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8005b50:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b58:	ed9d ba1c 	vldr	s22, [sp, #112]	@ 0x70
 8005b5c:	d006      	beq.n	8005b6c <kf_update+0x2e8>
 8005b5e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8005b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b66:	bf18      	it	ne
 8005b68:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 8005b6c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b74:	eddd aa1d 	vldr	s21, [sp, #116]	@ 0x74
 8005b78:	d006      	beq.n	8005b88 <kf_update+0x304>
 8005b7a:	eef5 aa40 	vcmp.f32	s21, #0.0
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	bf18      	it	ne
 8005b84:	eeea 7a86 	vfmane.f32	s15, s21, s12
 8005b88:	eef5 5a40 	vcmp.f32	s11, #0.0
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	eddd 9a1e 	vldr	s19, [sp, #120]	@ 0x78
 8005b94:	d006      	beq.n	8005ba4 <kf_update+0x320>
 8005b96:	eef5 9a40 	vcmp.f32	s19, #0.0
 8005b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9e:	bf18      	it	ne
 8005ba0:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8005ba4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	ed9d 9a1f 	vldr	s18, [sp, #124]	@ 0x7c
 8005bb0:	d006      	beq.n	8005bc0 <kf_update+0x33c>
 8005bb2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bba:	bf18      	it	ne
 8005bbc:	eee9 7a05 	vfmane.f32	s15, s18, s10
 8005bc0:	9b02      	ldr	r3, [sp, #8]
 8005bc2:	ed93 7a00 	vldr	s14, [r3]
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bcc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8005bd0:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	ee6b ba87 	vmul.f32	s23, s23, s14
 8005bda:	ee2c ca07 	vmul.f32	s24, s24, s14
 8005bde:	ee2a aa07 	vmul.f32	s20, s20, s14
 8005be2:	ee2d da07 	vmul.f32	s26, s26, s14
 8005be6:	ee67 ca2c 	vmul.f32	s25, s14, s25
 8005bea:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8005bee:	ee67 aa2a 	vmul.f32	s21, s14, s21
 8005bf2:	ee69 9a87 	vmul.f32	s19, s19, s14
 8005bf6:	ee29 9a07 	vmul.f32	s18, s18, s14
 8005bfa:	edcd ba17 	vstr	s23, [sp, #92]	@ 0x5c
 8005bfe:	ed8d ca18 	vstr	s24, [sp, #96]	@ 0x60
 8005c02:	ed8d aa19 	vstr	s20, [sp, #100]	@ 0x64
 8005c06:	ed8d da1a 	vstr	s26, [sp, #104]	@ 0x68
 8005c0a:	edcd ca1b 	vstr	s25, [sp, #108]	@ 0x6c
 8005c0e:	ed8d ba1c 	vstr	s22, [sp, #112]	@ 0x70
 8005c12:	edcd aa1d 	vstr	s21, [sp, #116]	@ 0x74
 8005c16:	edcd 9a1e 	vstr	s19, [sp, #120]	@ 0x78
 8005c1a:	ed8d 9a1f 	vstr	s18, [sp, #124]	@ 0x7c
 8005c1e:	f340 83eb 	ble.w	80063f8 <kf_update+0xb74>
 8005c22:	eef5 da40 	vcmp.f32	s27, #0.0
 8005c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2a:	f000 8456 	beq.w	80064da <kf_update+0xc56>
 8005c2e:	edd6 7a01 	vldr	s15, [r6, #4]
 8005c32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3a:	f040 8477 	bne.w	800652c <kf_update+0xca8>
 8005c3e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8005c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c46:	d008      	beq.n	8005c5a <kf_update+0x3d6>
 8005c48:	ed96 7a02 	vldr	s14, [r6, #8]
 8005c4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c54:	bf18      	it	ne
 8005c56:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8005c5a:	eef5 ea40 	vcmp.f32	s29, #0.0
 8005c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c62:	d008      	beq.n	8005c76 <kf_update+0x3f2>
 8005c64:	ed96 7a03 	vldr	s14, [r6, #12]
 8005c68:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c70:	bf18      	it	ne
 8005c72:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8005c76:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8005c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7e:	d008      	beq.n	8005c92 <kf_update+0x40e>
 8005c80:	ed96 7a04 	vldr	s14, [r6, #16]
 8005c84:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8c:	bf18      	it	ne
 8005c8e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8005c92:	eef5 fa40 	vcmp.f32	s31, #0.0
 8005c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9a:	d008      	beq.n	8005cae <kf_update+0x42a>
 8005c9c:	ed96 7a05 	vldr	s14, [r6, #20]
 8005ca0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca8:	bf18      	it	ne
 8005caa:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8005cae:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb6:	d008      	beq.n	8005cca <kf_update+0x446>
 8005cb8:	ed96 7a06 	vldr	s14, [r6, #24]
 8005cbc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc4:	bf18      	it	ne
 8005cc6:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8005cca:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	d008      	beq.n	8005ce6 <kf_update+0x462>
 8005cd4:	ed96 7a07 	vldr	s14, [r6, #28]
 8005cd8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce0:	bf18      	it	ne
 8005ce2:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8005ce6:	eef5 5a40 	vcmp.f32	s11, #0.0
 8005cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cee:	d008      	beq.n	8005d02 <kf_update+0x47e>
 8005cf0:	ed96 7a08 	vldr	s14, [r6, #32]
 8005cf4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfc:	bf18      	it	ne
 8005cfe:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8005d02:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8005d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0a:	d008      	beq.n	8005d1e <kf_update+0x49a>
 8005d0c:	ed96 7a09 	vldr	s14, [r6, #36]	@ 0x24
 8005d10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d18:	bf18      	it	ne
 8005d1a:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8005d1e:	9b00      	ldr	r3, [sp, #0]
 8005d20:	edd3 8a00 	vldr	s17, [r3]
 8005d24:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8005d28:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	a868      	add	r0, sp, #416	@ 0x1a0
 8005d30:	ed8d 5a09 	vstr	s10, [sp, #36]	@ 0x24
 8005d34:	edcd 5a08 	vstr	s11, [sp, #32]
 8005d38:	ed8d 6a07 	vstr	s12, [sp, #28]
 8005d3c:	edcd 6a06 	vstr	s13, [sp, #24]
 8005d40:	f006 fec6 	bl	800cad0 <memset>
 8005d44:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005d46:	ed9d 5a09 	vldr	s10, [sp, #36]	@ 0x24
 8005d4a:	eddd 5a08 	vldr	s11, [sp, #32]
 8005d4e:	ed9d 6a07 	vldr	s12, [sp, #28]
 8005d52:	eddd 6a06 	vldr	s13, [sp, #24]
 8005d56:	a971      	add	r1, sp, #452	@ 0x1c4
 8005d58:	461a      	mov	r2, r3
 8005d5a:	ecf4 7a01 	vldmia	r4!, {s15}
 8005d5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d66:	d062      	beq.n	8005e2e <kf_update+0x5aa>
 8005d68:	eef5 da40 	vcmp.f32	s27, #0.0
 8005d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d70:	d005      	beq.n	8005d7e <kf_update+0x4fa>
 8005d72:	ed92 7a00 	vldr	s14, [r2]
 8005d76:	eea7 7aad 	vfma.f32	s14, s15, s27
 8005d7a:	ed82 7a00 	vstr	s14, [r2]
 8005d7e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	d005      	beq.n	8005d94 <kf_update+0x510>
 8005d88:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8005d8c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8005d90:	ed82 7a09 	vstr	s14, [r2, #36]	@ 0x24
 8005d94:	eef5 ea40 	vcmp.f32	s29, #0.0
 8005d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9c:	d005      	beq.n	8005daa <kf_update+0x526>
 8005d9e:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 8005da2:	eea7 7aae 	vfma.f32	s14, s15, s29
 8005da6:	ed82 7a12 	vstr	s14, [r2, #72]	@ 0x48
 8005daa:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8005dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db2:	d005      	beq.n	8005dc0 <kf_update+0x53c>
 8005db4:	ed92 7a1b 	vldr	s14, [r2, #108]	@ 0x6c
 8005db8:	eea7 7a8f 	vfma.f32	s14, s15, s30
 8005dbc:	ed82 7a1b 	vstr	s14, [r2, #108]	@ 0x6c
 8005dc0:	eef5 fa40 	vcmp.f32	s31, #0.0
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	d005      	beq.n	8005dd6 <kf_update+0x552>
 8005dca:	ed92 7a24 	vldr	s14, [r2, #144]	@ 0x90
 8005dce:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8005dd2:	ed82 7a24 	vstr	s14, [r2, #144]	@ 0x90
 8005dd6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dde:	d005      	beq.n	8005dec <kf_update+0x568>
 8005de0:	ed92 7a2d 	vldr	s14, [r2, #180]	@ 0xb4
 8005de4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8005de8:	ed82 7a2d 	vstr	s14, [r2, #180]	@ 0xb4
 8005dec:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df4:	d005      	beq.n	8005e02 <kf_update+0x57e>
 8005df6:	ed92 7a36 	vldr	s14, [r2, #216]	@ 0xd8
 8005dfa:	eea7 7a86 	vfma.f32	s14, s15, s12
 8005dfe:	ed82 7a36 	vstr	s14, [r2, #216]	@ 0xd8
 8005e02:	eef5 5a40 	vcmp.f32	s11, #0.0
 8005e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0a:	d005      	beq.n	8005e18 <kf_update+0x594>
 8005e0c:	ed92 7a3f 	vldr	s14, [r2, #252]	@ 0xfc
 8005e10:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005e14:	ed82 7a3f 	vstr	s14, [r2, #252]	@ 0xfc
 8005e18:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8005e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e20:	d005      	beq.n	8005e2e <kf_update+0x5aa>
 8005e22:	ed92 7a48 	vldr	s14, [r2, #288]	@ 0x120
 8005e26:	eea7 7a85 	vfma.f32	s14, s15, s10
 8005e2a:	ed82 7a48 	vstr	s14, [r2, #288]	@ 0x120
 8005e2e:	3204      	adds	r2, #4
 8005e30:	4291      	cmp	r1, r2
 8005e32:	d192      	bne.n	8005d5a <kf_update+0x4d6>
 8005e34:	afb9      	add	r7, sp, #740	@ 0x2e4
 8005e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e3a:	a868      	add	r0, sp, #416	@ 0x1a0
 8005e3c:	463a      	mov	r2, r7
 8005e3e:	f04f 0b02 	mov.w	fp, #2
 8005e42:	f04f 0e03 	mov.w	lr, #3
 8005e46:	f04f 0c04 	mov.w	ip, #4
 8005e4a:	f04f 0a05 	mov.w	sl, #5
 8005e4e:	f04f 0906 	mov.w	r9, #6
 8005e52:	f04f 0807 	mov.w	r8, #7
 8005e56:	2408      	movs	r4, #8
 8005e58:	2100      	movs	r1, #0
 8005e5a:	9306      	str	r3, [sp, #24]
 8005e5c:	e07b      	b.n	8005f56 <kf_update+0x6d2>
 8005e5e:	edd0 7a00 	vldr	s15, [r0]
 8005e62:	ed82 8a01 	vstr	s16, [r2, #4]
 8005e66:	eef1 7a67 	vneg.f32	s15, s15
 8005e6a:	2901      	cmp	r1, #1
 8005e6c:	edc0 7a00 	vstr	s15, [r0]
 8005e70:	f1a4 0507 	sub.w	r5, r4, #7
 8005e74:	f000 8110 	beq.w	8006098 <kf_update+0x814>
 8005e78:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005e7a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005e7e:	edd5 7a00 	vldr	s15, [r5]
 8005e82:	ed82 8a02 	vstr	s16, [r2, #8]
 8005e86:	eef1 7a67 	vneg.f32	s15, s15
 8005e8a:	2902      	cmp	r1, #2
 8005e8c:	edc5 7a00 	vstr	s15, [r5]
 8005e90:	f000 80ef 	beq.w	8006072 <kf_update+0x7ee>
 8005e94:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005e96:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8005e9a:	edd5 7a00 	vldr	s15, [r5]
 8005e9e:	ed82 8a03 	vstr	s16, [r2, #12]
 8005ea2:	eef1 7a67 	vneg.f32	s15, s15
 8005ea6:	2903      	cmp	r1, #3
 8005ea8:	edc5 7a00 	vstr	s15, [r5]
 8005eac:	d176      	bne.n	8005f9c <kf_update+0x718>
 8005eae:	edd0 7a03 	vldr	s15, [r0, #12]
 8005eb2:	ed82 8a04 	vstr	s16, [r2, #16]
 8005eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eba:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8005ebe:	edc0 7a03 	vstr	s15, [r0, #12]
 8005ec2:	edd5 7a00 	vldr	s15, [r5]
 8005ec6:	ed82 8a05 	vstr	s16, [r2, #20]
 8005eca:	eef1 7a67 	vneg.f32	s15, s15
 8005ece:	edc5 7a00 	vstr	s15, [r5]
 8005ed2:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8005ed6:	edd5 7a00 	vldr	s15, [r5]
 8005eda:	ed82 8a06 	vstr	s16, [r2, #24]
 8005ede:	eef1 7a67 	vneg.f32	s15, s15
 8005ee2:	edc5 7a00 	vstr	s15, [r5]
 8005ee6:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005ee8:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8005eec:	edd5 7a00 	vldr	s15, [r5]
 8005ef0:	ed82 8a07 	vstr	s16, [r2, #28]
 8005ef4:	eef1 7a67 	vneg.f32	s15, s15
 8005ef8:	2907      	cmp	r1, #7
 8005efa:	edc5 7a00 	vstr	s15, [r5]
 8005efe:	f040 80a4 	bne.w	800604a <kf_update+0x7c6>
 8005f02:	edd0 7a07 	vldr	s15, [r0, #28]
 8005f06:	ed82 8a08 	vstr	s16, [r2, #32]
 8005f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f0e:	edc0 7a07 	vstr	s15, [r0, #28]
 8005f12:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005f14:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8005f18:	edd5 7a00 	vldr	s15, [r5]
 8005f1c:	00a5      	lsls	r5, r4, #2
 8005f1e:	eef1 7a67 	vneg.f32	s15, s15
 8005f22:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005f24:	3101      	adds	r1, #1
 8005f26:	441d      	add	r5, r3
 8005f28:	2909      	cmp	r1, #9
 8005f2a:	edc5 7a00 	vstr	s15, [r5]
 8005f2e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8005f32:	f104 0409 	add.w	r4, r4, #9
 8005f36:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 8005f3a:	f108 0809 	add.w	r8, r8, #9
 8005f3e:	f109 0909 	add.w	r9, r9, #9
 8005f42:	f10a 0a09 	add.w	sl, sl, #9
 8005f46:	f10c 0c09 	add.w	ip, ip, #9
 8005f4a:	f10e 0e09 	add.w	lr, lr, #9
 8005f4e:	f10b 0b09 	add.w	fp, fp, #9
 8005f52:	f000 80d2 	beq.w	80060fa <kf_update+0x876>
 8005f56:	ed82 8a00 	vstr	s16, [r2]
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	f47f af7f 	bne.w	8005e5e <kf_update+0x5da>
 8005f60:	eddd 7a68 	vldr	s15, [sp, #416]	@ 0x1a0
 8005f64:	ed82 8a01 	vstr	s16, [r2, #4]
 8005f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f6c:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005f6e:	1fe5      	subs	r5, r4, #7
 8005f70:	edc0 7a00 	vstr	s15, [r0]
 8005f74:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005f78:	edd5 7a00 	vldr	s15, [r5]
 8005f7c:	ed82 8a02 	vstr	s16, [r2, #8]
 8005f80:	eef1 7a67 	vneg.f32	s15, s15
 8005f84:	edc5 7a00 	vstr	s15, [r5]
 8005f88:	ed82 8a03 	vstr	s16, [r2, #12]
 8005f8c:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8005f90:	edd5 7a00 	vldr	s15, [r5]
 8005f94:	eef1 7a67 	vneg.f32	s15, s15
 8005f98:	edc5 7a00 	vstr	s15, [r5]
 8005f9c:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005f9e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8005fa2:	edd5 7a00 	vldr	s15, [r5]
 8005fa6:	ed82 8a04 	vstr	s16, [r2, #16]
 8005faa:	eef1 7a67 	vneg.f32	s15, s15
 8005fae:	2904      	cmp	r1, #4
 8005fb0:	edc5 7a00 	vstr	s15, [r5]
 8005fb4:	d02d      	beq.n	8006012 <kf_update+0x78e>
 8005fb6:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005fb8:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8005fbc:	edd5 7a00 	vldr	s15, [r5]
 8005fc0:	ed82 8a05 	vstr	s16, [r2, #20]
 8005fc4:	eef1 7a67 	vneg.f32	s15, s15
 8005fc8:	2905      	cmp	r1, #5
 8005fca:	edc5 7a00 	vstr	s15, [r5]
 8005fce:	d077      	beq.n	80060c0 <kf_update+0x83c>
 8005fd0:	ab68      	add	r3, sp, #416	@ 0x1a0
 8005fd2:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8005fd6:	edd5 7a00 	vldr	s15, [r5]
 8005fda:	ed82 8a06 	vstr	s16, [r2, #24]
 8005fde:	eef1 7a67 	vneg.f32	s15, s15
 8005fe2:	2906      	cmp	r1, #6
 8005fe4:	edc5 7a00 	vstr	s15, [r5]
 8005fe8:	f47f af7d 	bne.w	8005ee6 <kf_update+0x662>
 8005fec:	edd0 7a06 	vldr	s15, [r0, #24]
 8005ff0:	ed82 8a07 	vstr	s16, [r2, #28]
 8005ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ff8:	ed82 8a08 	vstr	s16, [r2, #32]
 8005ffc:	edc0 7a06 	vstr	s15, [r0, #24]
 8006000:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8006004:	edd5 7a00 	vldr	s15, [r5]
 8006008:	eef1 7a67 	vneg.f32	s15, s15
 800600c:	edc5 7a00 	vstr	s15, [r5]
 8006010:	e77f      	b.n	8005f12 <kf_update+0x68e>
 8006012:	edd0 7a04 	vldr	s15, [r0, #16]
 8006016:	ed82 8a05 	vstr	s16, [r2, #20]
 800601a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800601e:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8006022:	edc0 7a04 	vstr	s15, [r0, #16]
 8006026:	edd5 7a00 	vldr	s15, [r5]
 800602a:	ed82 8a06 	vstr	s16, [r2, #24]
 800602e:	eef1 7a67 	vneg.f32	s15, s15
 8006032:	edc5 7a00 	vstr	s15, [r5]
 8006036:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800603a:	edd5 7a00 	vldr	s15, [r5]
 800603e:	ed82 8a07 	vstr	s16, [r2, #28]
 8006042:	eef1 7a67 	vneg.f32	s15, s15
 8006046:	edc5 7a00 	vstr	s15, [r5]
 800604a:	ab68      	add	r3, sp, #416	@ 0x1a0
 800604c:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8006050:	edd5 7a00 	vldr	s15, [r5]
 8006054:	ed82 8a08 	vstr	s16, [r2, #32]
 8006058:	eef1 7a67 	vneg.f32	s15, s15
 800605c:	2908      	cmp	r1, #8
 800605e:	edc5 7a00 	vstr	s15, [r5]
 8006062:	f47f af56 	bne.w	8005f12 <kf_update+0x68e>
 8006066:	edd0 7a08 	vldr	s15, [r0, #32]
 800606a:	00a5      	lsls	r5, r4, #2
 800606c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006070:	e757      	b.n	8005f22 <kf_update+0x69e>
 8006072:	edd0 7a02 	vldr	s15, [r0, #8]
 8006076:	ed82 8a03 	vstr	s16, [r2, #12]
 800607a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800607e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8006082:	edc0 7a02 	vstr	s15, [r0, #8]
 8006086:	edd5 7a00 	vldr	s15, [r5]
 800608a:	ed82 8a04 	vstr	s16, [r2, #16]
 800608e:	eef1 7a67 	vneg.f32	s15, s15
 8006092:	edc5 7a00 	vstr	s15, [r5]
 8006096:	e78e      	b.n	8005fb6 <kf_update+0x732>
 8006098:	edd0 7a01 	vldr	s15, [r0, #4]
 800609c:	ed82 8a02 	vstr	s16, [r2, #8]
 80060a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80060a6:	ed82 8a03 	vstr	s16, [r2, #12]
 80060aa:	edc0 7a01 	vstr	s15, [r0, #4]
 80060ae:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 80060b2:	edd5 7a00 	vldr	s15, [r5]
 80060b6:	eef1 7a67 	vneg.f32	s15, s15
 80060ba:	edc5 7a00 	vstr	s15, [r5]
 80060be:	e76d      	b.n	8005f9c <kf_update+0x718>
 80060c0:	edd0 7a05 	vldr	s15, [r0, #20]
 80060c4:	ed82 8a06 	vstr	s16, [r2, #24]
 80060c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060cc:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 80060d0:	edc0 7a05 	vstr	s15, [r0, #20]
 80060d4:	edd5 7a00 	vldr	s15, [r5]
 80060d8:	ed82 8a07 	vstr	s16, [r2, #28]
 80060dc:	eef1 7a67 	vneg.f32	s15, s15
 80060e0:	edc5 7a00 	vstr	s15, [r5]
 80060e4:	ed82 8a08 	vstr	s16, [r2, #32]
 80060e8:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80060ec:	edd5 7a00 	vldr	s15, [r5]
 80060f0:	eef1 7a67 	vneg.f32	s15, s15
 80060f4:	edc5 7a00 	vstr	s15, [r5]
 80060f8:	e70b      	b.n	8005f12 <kf_update+0x68e>
 80060fa:	9b06      	ldr	r3, [sp, #24]
 80060fc:	2400      	movs	r4, #0
 80060fe:	f506 70a2 	add.w	r0, r6, #324	@ 0x144
 8006102:	ecf3 3a01 	vldmia	r3!, {s7}
 8006106:	ed93 4a08 	vldr	s8, [r3, #32]
 800610a:	edd3 4a11 	vldr	s9, [r3, #68]	@ 0x44
 800610e:	ed93 5a1a 	vldr	s10, [r3, #104]	@ 0x68
 8006112:	edd3 5a23 	vldr	s11, [r3, #140]	@ 0x8c
 8006116:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 800611a:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 800611e:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8006122:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8006126:	4632      	mov	r2, r6
 8006128:	4639      	mov	r1, r7
 800612a:	eef5 3a40 	vcmp.f32	s7, #0.0
 800612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006132:	d00c      	beq.n	800614e <kf_update+0x8ca>
 8006134:	ed92 3a0a 	vldr	s6, [r2, #40]	@ 0x28
 8006138:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006140:	d005      	beq.n	800614e <kf_update+0x8ca>
 8006142:	edd1 2a00 	vldr	s5, [r1]
 8006146:	eee3 2a83 	vfma.f32	s5, s7, s6
 800614a:	edc1 2a00 	vstr	s5, [r1]
 800614e:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8006152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006156:	d00c      	beq.n	8006172 <kf_update+0x8ee>
 8006158:	ed92 3a0b 	vldr	s6, [r2, #44]	@ 0x2c
 800615c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8006160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006164:	d005      	beq.n	8006172 <kf_update+0x8ee>
 8006166:	edd1 2a00 	vldr	s5, [r1]
 800616a:	eee4 2a03 	vfma.f32	s5, s8, s6
 800616e:	edc1 2a00 	vstr	s5, [r1]
 8006172:	eef5 4a40 	vcmp.f32	s9, #0.0
 8006176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617a:	d00c      	beq.n	8006196 <kf_update+0x912>
 800617c:	ed92 3a0c 	vldr	s6, [r2, #48]	@ 0x30
 8006180:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	d005      	beq.n	8006196 <kf_update+0x912>
 800618a:	edd1 2a00 	vldr	s5, [r1]
 800618e:	eee4 2a83 	vfma.f32	s5, s9, s6
 8006192:	edc1 2a00 	vstr	s5, [r1]
 8006196:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619e:	d00c      	beq.n	80061ba <kf_update+0x936>
 80061a0:	ed92 3a0d 	vldr	s6, [r2, #52]	@ 0x34
 80061a4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80061a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ac:	d005      	beq.n	80061ba <kf_update+0x936>
 80061ae:	edd1 2a00 	vldr	s5, [r1]
 80061b2:	eee5 2a03 	vfma.f32	s5, s10, s6
 80061b6:	edc1 2a00 	vstr	s5, [r1]
 80061ba:	eef5 5a40 	vcmp.f32	s11, #0.0
 80061be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c2:	d00c      	beq.n	80061de <kf_update+0x95a>
 80061c4:	ed92 3a0e 	vldr	s6, [r2, #56]	@ 0x38
 80061c8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80061cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d0:	d005      	beq.n	80061de <kf_update+0x95a>
 80061d2:	edd1 2a00 	vldr	s5, [r1]
 80061d6:	eee5 2a83 	vfma.f32	s5, s11, s6
 80061da:	edc1 2a00 	vstr	s5, [r1]
 80061de:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	d00c      	beq.n	8006202 <kf_update+0x97e>
 80061e8:	ed92 3a0f 	vldr	s6, [r2, #60]	@ 0x3c
 80061ec:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80061f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f4:	d005      	beq.n	8006202 <kf_update+0x97e>
 80061f6:	edd1 2a00 	vldr	s5, [r1]
 80061fa:	eee6 2a03 	vfma.f32	s5, s12, s6
 80061fe:	edc1 2a00 	vstr	s5, [r1]
 8006202:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620a:	d00c      	beq.n	8006226 <kf_update+0x9a2>
 800620c:	ed92 3a10 	vldr	s6, [r2, #64]	@ 0x40
 8006210:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	d005      	beq.n	8006226 <kf_update+0x9a2>
 800621a:	edd1 2a00 	vldr	s5, [r1]
 800621e:	eee6 2a83 	vfma.f32	s5, s13, s6
 8006222:	edc1 2a00 	vstr	s5, [r1]
 8006226:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	d00c      	beq.n	800624a <kf_update+0x9c6>
 8006230:	ed92 3a11 	vldr	s6, [r2, #68]	@ 0x44
 8006234:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8006238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623c:	d005      	beq.n	800624a <kf_update+0x9c6>
 800623e:	edd1 2a00 	vldr	s5, [r1]
 8006242:	eee7 2a03 	vfma.f32	s5, s14, s6
 8006246:	edc1 2a00 	vstr	s5, [r1]
 800624a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800624e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006252:	d00c      	beq.n	800626e <kf_update+0x9ea>
 8006254:	ed92 3a12 	vldr	s6, [r2, #72]	@ 0x48
 8006258:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800625c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006260:	d005      	beq.n	800626e <kf_update+0x9ea>
 8006262:	edd1 2a00 	vldr	s5, [r1]
 8006266:	eee7 2a83 	vfma.f32	s5, s15, s6
 800626a:	edc1 2a00 	vstr	s5, [r1]
 800626e:	3224      	adds	r2, #36	@ 0x24
 8006270:	4282      	cmp	r2, r0
 8006272:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8006276:	f47f af58 	bne.w	800612a <kf_update+0x8a6>
 800627a:	3401      	adds	r4, #1
 800627c:	2c09      	cmp	r4, #9
 800627e:	f107 0704 	add.w	r7, r7, #4
 8006282:	f47f af3e 	bne.w	8006102 <kf_update+0x87e>
 8006286:	9805      	ldr	r0, [sp, #20]
 8006288:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800628c:	a9b9      	add	r1, sp, #740	@ 0x2e4
 800628e:	f006 fc9e 	bl	800cbce <memcpy>
 8006292:	eef5 ba40 	vcmp.f32	s23, #0.0
 8006296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629a:	d05f      	beq.n	800635c <kf_update+0xad8>
 800629c:	eef5 8a40 	vcmp.f32	s17, #0.0
 80062a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a4:	d05a      	beq.n	800635c <kf_update+0xad8>
 80062a6:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80062aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ae:	ee68 baab 	vmul.f32	s23, s17, s23
 80062b2:	f000 812c 	beq.w	800650e <kf_update+0xc8a>
 80062b6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80062ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062be:	ee2c ca28 	vmul.f32	s24, s24, s17
 80062c2:	f000 8121 	beq.w	8006508 <kf_update+0xc84>
 80062c6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80062ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ce:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80062d2:	f000 8114 	beq.w	80064fe <kf_update+0xc7a>
 80062d6:	eef5 ca40 	vcmp.f32	s25, #0.0
 80062da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062de:	ee28 7a8d 	vmul.f32	s14, s17, s26
 80062e2:	eeb0 aa4c 	vmov.f32	s20, s24
 80062e6:	f040 812f 	bne.w	8006548 <kf_update+0xcc4>
 80062ea:	eef0 ca47 	vmov.f32	s25, s14
 80062ee:	eeb0 da67 	vmov.f32	s26, s15
 80062f2:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80062f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fa:	d065      	beq.n	80063c8 <kf_update+0xb44>
 80062fc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006304:	f000 80f0 	beq.w	80064e8 <kf_update+0xc64>
 8006308:	eef0 7a48 	vmov.f32	s15, s16
 800630c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8006310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006314:	ee28 7a8b 	vmul.f32	s14, s17, s22
 8006318:	d17d      	bne.n	8006416 <kf_update+0xb92>
 800631a:	eef0 aa47 	vmov.f32	s21, s14
 800631e:	eeb0 ba67 	vmov.f32	s22, s15
 8006322:	eef5 9a40 	vcmp.f32	s19, #0.0
 8006326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632a:	f000 8082 	beq.w	8006432 <kf_update+0xbae>
 800632e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006336:	f000 80da 	beq.w	80064ee <kf_update+0xc6a>
 800633a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006342:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8006346:	eef0 7a48 	vmov.f32	s15, s16
 800634a:	f040 812a 	bne.w	80065a2 <kf_update+0xd1e>
 800634e:	eef0 8a49 	vmov.f32	s17, s18
 8006352:	eef0 9a67 	vmov.f32	s19, s15
 8006356:	eeb0 9a47 	vmov.f32	s18, s14
 800635a:	e086      	b.n	800646a <kf_update+0xbe6>
 800635c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8006360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006364:	d005      	beq.n	8006372 <kf_update+0xaee>
 8006366:	eef5 8a40 	vcmp.f32	s17, #0.0
 800636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636e:	f040 80f9 	bne.w	8006564 <kf_update+0xce0>
 8006372:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	d071      	beq.n	8006460 <kf_update+0xbdc>
 800637c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	f040 8116 	bne.w	80065b4 <kf_update+0xd30>
 8006388:	eeb0 aa68 	vmov.f32	s20, s17
 800638c:	eef0 ba68 	vmov.f32	s23, s17
 8006390:	eeb5 da40 	vcmp.f32	s26, #0.0
 8006394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006398:	d007      	beq.n	80063aa <kf_update+0xb26>
 800639a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800639e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a2:	f040 80c7 	bne.w	8006534 <kf_update+0xcb0>
 80063a6:	eeb0 da68 	vmov.f32	s26, s17
 80063aa:	eef5 ca40 	vcmp.f32	s25, #0.0
 80063ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b2:	d09e      	beq.n	80062f2 <kf_update+0xa6e>
 80063b4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80063b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063bc:	f040 80f7 	bne.w	80065ae <kf_update+0xd2a>
 80063c0:	eeb0 ba68 	vmov.f32	s22, s17
 80063c4:	eef0 ca68 	vmov.f32	s25, s17
 80063c8:	eef5 aa40 	vcmp.f32	s21, #0.0
 80063cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d0:	d0a7      	beq.n	8006322 <kf_update+0xa9e>
 80063d2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80063d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063da:	f040 80ce 	bne.w	800657a <kf_update+0xcf6>
 80063de:	eef5 9a40 	vcmp.f32	s19, #0.0
 80063e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e6:	f000 8087 	beq.w	80064f8 <kf_update+0xc74>
 80063ea:	eeb0 9a68 	vmov.f32	s18, s17
 80063ee:	eef0 9a68 	vmov.f32	s19, s17
 80063f2:	eef0 aa68 	vmov.f32	s21, s17
 80063f6:	e038      	b.n	800646a <kf_update+0xbe6>
 80063f8:	9b00      	ldr	r3, [sp, #0]
 80063fa:	edd3 8a00 	vldr	s17, [r3]
 80063fe:	e493      	b.n	8005d28 <kf_update+0x4a4>
 8006400:	eef5 ba40 	vcmp.f32	s23, #0.0
 8006404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006408:	bf14      	ite	ne
 800640a:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 800640e:	eef0 7a6b 	vmoveq.f32	s15, s23
 8006412:	f7ff bb65 	b.w	8005ae0 <kf_update+0x25c>
 8006416:	eef5 9a40 	vcmp.f32	s19, #0.0
 800641a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641e:	eeb0 ba67 	vmov.f32	s22, s15
 8006422:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8006426:	f040 80b2 	bne.w	800658e <kf_update+0xd0a>
 800642a:	eef0 9a67 	vmov.f32	s19, s15
 800642e:	eef0 aa47 	vmov.f32	s21, s14
 8006432:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643a:	d014      	beq.n	8006466 <kf_update+0xbe2>
 800643c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006444:	d04d      	beq.n	80064e2 <kf_update+0xc5e>
 8006446:	eeb0 7a48 	vmov.f32	s14, s16
 800644a:	ee68 8a89 	vmul.f32	s17, s17, s18
 800644e:	eeb0 9a47 	vmov.f32	s18, s14
 8006452:	e00a      	b.n	800646a <kf_update+0xbe6>
 8006454:	f20d 4d2c 	addw	sp, sp, #1068	@ 0x42c
 8006458:	ecbd 8b10 	vpop	{d8-d15}
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	eef0 ba4a 	vmov.f32	s23, s20
 8006464:	e794      	b.n	8006390 <kf_update+0xb0c>
 8006466:	eef0 8a49 	vmov.f32	s17, s18
 800646a:	edd6 3a01 	vldr	s7, [r6, #4]
 800646e:	ed96 4a02 	vldr	s8, [r6, #8]
 8006472:	edd6 4a03 	vldr	s9, [r6, #12]
 8006476:	ed96 5a04 	vldr	s10, [r6, #16]
 800647a:	edd6 5a05 	vldr	s11, [r6, #20]
 800647e:	ed96 6a06 	vldr	s12, [r6, #24]
 8006482:	edd6 6a07 	vldr	s13, [r6, #28]
 8006486:	ed96 7a08 	vldr	s14, [r6, #32]
 800648a:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 800648e:	ee73 baab 	vadd.f32	s23, s7, s23
 8006492:	ee34 aa0a 	vadd.f32	s20, s8, s20
 8006496:	ee34 da8d 	vadd.f32	s26, s9, s26
 800649a:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800649e:	ee35 ba8b 	vadd.f32	s22, s11, s22
 80064a2:	ee76 aa2a 	vadd.f32	s21, s12, s21
 80064a6:	ee76 9aa9 	vadd.f32	s19, s13, s19
 80064aa:	ee37 9a09 	vadd.f32	s18, s14, s18
 80064ae:	ee77 8aa8 	vadd.f32	s17, s15, s17
 80064b2:	edc6 ba01 	vstr	s23, [r6, #4]
 80064b6:	ed86 aa02 	vstr	s20, [r6, #8]
 80064ba:	ed86 da03 	vstr	s26, [r6, #12]
 80064be:	edc6 ca04 	vstr	s25, [r6, #16]
 80064c2:	ed86 ba05 	vstr	s22, [r6, #20]
 80064c6:	edc6 aa06 	vstr	s21, [r6, #24]
 80064ca:	edc6 9a07 	vstr	s19, [r6, #28]
 80064ce:	ed86 9a08 	vstr	s18, [r6, #32]
 80064d2:	edc6 8a09 	vstr	s17, [r6, #36]	@ 0x24
 80064d6:	f7ff ba33 	b.w	8005940 <kf_update+0xbc>
 80064da:	eef0 7a6d 	vmov.f32	s15, s27
 80064de:	f7ff bbae 	b.w	8005c3e <kf_update+0x3ba>
 80064e2:	eeb0 9a68 	vmov.f32	s18, s17
 80064e6:	e7c0      	b.n	800646a <kf_update+0xbe6>
 80064e8:	eeb0 ba68 	vmov.f32	s22, s17
 80064ec:	e76c      	b.n	80063c8 <kf_update+0xb44>
 80064ee:	eeb0 9a68 	vmov.f32	s18, s17
 80064f2:	eef0 9a68 	vmov.f32	s19, s17
 80064f6:	e7b8      	b.n	800646a <kf_update+0xbe6>
 80064f8:	eef0 aa69 	vmov.f32	s21, s19
 80064fc:	e799      	b.n	8006432 <kf_update+0xbae>
 80064fe:	eeb0 da67 	vmov.f32	s26, s15
 8006502:	eeb0 aa4c 	vmov.f32	s20, s24
 8006506:	e750      	b.n	80063aa <kf_update+0xb26>
 8006508:	eeb0 aa4c 	vmov.f32	s20, s24
 800650c:	e740      	b.n	8006390 <kf_update+0xb0c>
 800650e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8006512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006516:	f43f af3b 	beq.w	8006390 <kf_update+0xb0c>
 800651a:	eeb5 da40 	vcmp.f32	s26, #0.0
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8006526:	f47f aed6 	bne.w	80062d6 <kf_update+0xa52>
 800652a:	e7e8      	b.n	80064fe <kf_update+0xc7a>
 800652c:	ee67 7aad 	vmul.f32	s15, s15, s27
 8006530:	f7ff bb85 	b.w	8005c3e <kf_update+0x3ba>
 8006534:	eef5 ca40 	vcmp.f32	s25, #0.0
 8006538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653c:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8006540:	eef0 7a48 	vmov.f32	s15, s16
 8006544:	f43f aed1 	beq.w	80062ea <kf_update+0xa66>
 8006548:	eeb0 da67 	vmov.f32	s26, s15
 800654c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8006550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006554:	ee68 7aac 	vmul.f32	s15, s17, s25
 8006558:	d126      	bne.n	80065a8 <kf_update+0xd24>
 800655a:	eeb0 ba67 	vmov.f32	s22, s15
 800655e:	eef0 ca47 	vmov.f32	s25, s14
 8006562:	e731      	b.n	80063c8 <kf_update+0xb44>
 8006564:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8006568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656c:	ee2c ca28 	vmul.f32	s24, s24, s17
 8006570:	eef0 ba48 	vmov.f32	s23, s16
 8006574:	f47f aea7 	bne.w	80062c6 <kf_update+0xa42>
 8006578:	e7c6      	b.n	8006508 <kf_update+0xc84>
 800657a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006582:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8006586:	eeb0 7a48 	vmov.f32	s14, s16
 800658a:	f43f af4e 	beq.w	800642a <kf_update+0xba6>
 800658e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006596:	eef0 aa47 	vmov.f32	s21, s14
 800659a:	ee28 7aa9 	vmul.f32	s14, s17, s19
 800659e:	f43f aed6 	beq.w	800634e <kf_update+0xaca>
 80065a2:	eef0 9a67 	vmov.f32	s19, s15
 80065a6:	e750      	b.n	800644a <kf_update+0xbc6>
 80065a8:	eef0 ca47 	vmov.f32	s25, s14
 80065ac:	e6ae      	b.n	800630c <kf_update+0xa88>
 80065ae:	eeb0 7a48 	vmov.f32	s14, s16
 80065b2:	e7cb      	b.n	800654c <kf_update+0xcc8>
 80065b4:	ed9f ca06 	vldr	s24, [pc, #24]	@ 80065d0 <kf_update+0xd4c>
 80065b8:	eeb5 da40 	vcmp.f32	s26, #0.0
 80065bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c0:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80065c4:	eef0 ba4c 	vmov.f32	s23, s24
 80065c8:	f47f ae85 	bne.w	80062d6 <kf_update+0xa52>
 80065cc:	e797      	b.n	80064fe <kf_update+0xc7a>
 80065ce:	bf00      	nop
 80065d0:	00000000 	.word	0x00000000

080065d4 <q2hpr>:
 80065d4:	b510      	push	{r4, lr}
 80065d6:	ed90 7a00 	vldr	s14, [r0]
 80065da:	edd0 6a01 	vldr	s13, [r0, #4]
 80065de:	edd0 7a02 	vldr	s15, [r0, #8]
 80065e2:	edd0 4a03 	vldr	s9, [r0, #12]
 80065e6:	ed2d 8b0a 	vpush	{d8-d12}
 80065ea:	ee27 0a26 	vmul.f32	s0, s14, s13
 80065ee:	ee27 5a27 	vmul.f32	s10, s14, s15
 80065f2:	ee66 5aa7 	vmul.f32	s11, s13, s15
 80065f6:	ee67 0a07 	vmul.f32	s1, s14, s14
 80065fa:	ee26 aaa6 	vmul.f32	s20, s13, s13
 80065fe:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006602:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006606:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800660a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800660e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 8006612:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8006616:	ee36 ba06 	vadd.f32	s22, s12, s12
 800661a:	ee70 aa00 	vadd.f32	s21, s0, s0
 800661e:	ee35 ca05 	vadd.f32	s24, s10, s10
 8006622:	ee77 8a07 	vadd.f32	s17, s14, s14
 8006626:	ee75 baa5 	vadd.f32	s23, s11, s11
 800662a:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800662e:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8006632:	460c      	mov	r4, r1
 8006634:	bb8a      	cbnz	r2, 800669a <q2hpr+0xc6>
 8006636:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800663a:	eeb7 ba00 	vmov.f32	s22, #112	@ 0x3f800000  1.0
 800663e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8006642:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8006646:	f009 fddf 	bl	8010208 <atan2f>
 800664a:	eeb0 8a40 	vmov.f32	s16, s0
 800664e:	ed84 8a00 	vstr	s16, [r4]
 8006652:	ee38 0aab 	vadd.f32	s0, s17, s23
 8006656:	f009 fdab 	bl	80101b0 <asinf>
 800665a:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800665e:	eef0 8a40 	vmov.f32	s17, s0
 8006662:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8006666:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800666a:	f009 fdcd 	bl	8010208 <atan2f>
 800666e:	eef1 8a68 	vneg.f32	s17, s17
 8006672:	eeb0 9a40 	vmov.f32	s18, s0
 8006676:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	ed84 9a02 	vstr	s18, [r4, #8]
 8006682:	edc4 8a01 	vstr	s17, [r4, #4]
 8006686:	d505      	bpl.n	8006694 <q2hpr+0xc0>
 8006688:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80066e0 <q2hpr+0x10c>
 800668c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8006690:	ed84 8a00 	vstr	s16, [r4]
 8006694:	ecbd 8b0a 	vpop	{d8-d12}
 8006698:	bd10      	pop	{r4, pc}
 800669a:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800669e:	f009 fd87 	bl	80101b0 <asinf>
 80066a2:	ee79 0a8a 	vadd.f32	s1, s19, s20
 80066a6:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 80066aa:	ee79 0ae0 	vsub.f32	s1, s19, s1
 80066ae:	eeb0 9a40 	vmov.f32	s18, s0
 80066b2:	ee38 0aab 	vadd.f32	s0, s17, s23
 80066b6:	f009 fda7 	bl	8010208 <atan2f>
 80066ba:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 80066be:	eef0 8a40 	vmov.f32	s17, s0
 80066c2:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80066c6:	ee79 0ae0 	vsub.f32	s1, s19, s1
 80066ca:	eeb1 0a40 	vneg.f32	s0, s0
 80066ce:	f009 fd9b 	bl	8010208 <atan2f>
 80066d2:	eef1 8a68 	vneg.f32	s17, s17
 80066d6:	eeb0 8a40 	vmov.f32	s16, s0
 80066da:	ed84 0a00 	vstr	s0, [r4]
 80066de:	e7ca      	b.n	8006676 <q2hpr+0xa2>
 80066e0:	40c90fdb 	.word	0x40c90fdb

080066e4 <output_update>:
 80066e4:	edd0 7a01 	vldr	s15, [r0, #4]
 80066e8:	edd0 5a00 	vldr	s11, [r0]
 80066ec:	edd0 6a02 	vldr	s13, [r0, #8]
 80066f0:	ed90 5a03 	vldr	s10, [r0, #12]
 80066f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80066f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066fc:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8006700:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8006704:	4615      	mov	r5, r2
 8006706:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800670a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800670e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8006712:	460f      	mov	r7, r1
 8006714:	461e      	mov	r6, r3
 8006716:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800671a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800671e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8006722:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006726:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800672a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800672e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006732:	ee35 5ac6 	vsub.f32	s10, s11, s12
 8006736:	2a00      	cmp	r2, #0
 8006738:	d145      	bne.n	80067c6 <output_update+0xe2>
 800673a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800673e:	eeb1 7a47 	vneg.f32	s14, s14
 8006742:	ed83 7a00 	vstr	s14, [r3]
 8006746:	edc3 7a01 	vstr	s15, [r3, #4]
 800674a:	ed83 5a02 	vstr	s10, [r3, #8]
 800674e:	4629      	mov	r1, r5
 8006750:	4604      	mov	r4, r0
 8006752:	f7ff ff3f 	bl	80065d4 <q2hpr>
 8006756:	ed95 7a01 	vldr	s14, [r5, #4]
 800675a:	edd5 7a02 	vldr	s15, [r5, #8]
 800675e:	edd5 6a00 	vldr	s13, [r5]
 8006762:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 8006870 <output_update+0x18c>
 8006766:	ee27 7a46 	vnmul.f32	s14, s14, s12
 800676a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800676e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006772:	ed85 7a01 	vstr	s14, [r5, #4]
 8006776:	edc5 6a00 	vstr	s13, [r5]
 800677a:	edc5 7a02 	vstr	s15, [r5, #8]
 800677e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006782:	edd6 7a00 	vldr	s15, [r6]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800678c:	edc8 7a00 	vstr	s15, [r8]
 8006790:	ed97 7a00 	vldr	s14, [r7]
 8006794:	edd6 7a01 	vldr	s15, [r6, #4]
 8006798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800679c:	edc8 7a01 	vstr	s15, [r8, #4]
 80067a0:	edd6 7a02 	vldr	s15, [r6, #8]
 80067a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80067a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067ac:	edc8 7a02 	vstr	s15, [r8, #8]
 80067b0:	edd4 7a02 	vldr	s15, [r4, #8]
 80067b4:	6862      	ldr	r2, [r4, #4]
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	eef1 7a67 	vneg.f32	s15, s15
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	edc4 7a02 	vstr	s15, [r4, #8]
 80067c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c6:	2a01      	cmp	r2, #1
 80067c8:	d015      	beq.n	80067f6 <output_update+0x112>
 80067ca:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8006870 <output_update+0x18c>
 80067ce:	edd5 6a00 	vldr	s13, [r5]
 80067d2:	ed95 7a01 	vldr	s14, [r5, #4]
 80067d6:	edd5 7a02 	vldr	s15, [r5, #8]
 80067da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80067de:	ee27 7a06 	vmul.f32	s14, s14, s12
 80067e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80067e6:	edc5 6a00 	vstr	s13, [r5]
 80067ea:	ed85 7a01 	vstr	s14, [r5, #4]
 80067ee:	edc5 7a02 	vstr	s15, [r5, #8]
 80067f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067fa:	ee36 6a65 	vsub.f32	s12, s12, s11
 80067fe:	eeb1 7a47 	vneg.f32	s14, s14
 8006802:	edc3 7a00 	vstr	s15, [r3]
 8006806:	ed83 7a01 	vstr	s14, [r3, #4]
 800680a:	ed83 6a02 	vstr	s12, [r3, #8]
 800680e:	4629      	mov	r1, r5
 8006810:	f7ff fee0 	bl	80065d4 <q2hpr>
 8006814:	edd5 6a00 	vldr	s13, [r5]
 8006818:	ed95 7a01 	vldr	s14, [r5, #4]
 800681c:	edd5 7a02 	vldr	s15, [r5, #8]
 8006820:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8006870 <output_update+0x18c>
 8006824:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006828:	ee67 7a86 	vmul.f32	s15, s15, s12
 800682c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006830:	ed85 7a01 	vstr	s14, [r5, #4]
 8006834:	edc5 6a00 	vstr	s13, [r5]
 8006838:	edc5 7a02 	vstr	s15, [r5, #8]
 800683c:	ed97 7a00 	vldr	s14, [r7]
 8006840:	edd6 7a00 	vldr	s15, [r6]
 8006844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006848:	edc8 7a00 	vstr	s15, [r8]
 800684c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006850:	edd6 7a01 	vldr	s15, [r6, #4]
 8006854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006858:	edc8 7a01 	vstr	s15, [r8, #4]
 800685c:	edd6 7a02 	vldr	s15, [r6, #8]
 8006860:	ed97 7a02 	vldr	s14, [r7, #8]
 8006864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006868:	edc8 7a02 	vstr	s15, [r8, #8]
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006870:	42652ee1 	.word	0x42652ee1
 8006874:	00000000 	.word	0x00000000

08006878 <MFX_emptyAttitude>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	ed2d 8b02 	vpush	{d8}
 8006880:	4fe9      	ldr	r7, [pc, #932]	@ (8006c28 <MFX_emptyAttitude+0x3b0>)
 8006882:	eddf 8aea 	vldr	s17, [pc, #936]	@ 8006c2c <MFX_emptyAttitude+0x3b4>
 8006886:	f6ad 4dd4 	subw	sp, sp, #3284	@ 0xcd4
 800688a:	f50d 64d7 	add.w	r4, sp, #1720	@ 0x6b8
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	46bc      	mov	ip, r7
 8006894:	e9c4 8800 	strd	r8, r8, [r4]
 8006898:	f83c 3b04 	ldrh.w	r3, [ip], #4
 800689c:	f8c4 8008 	str.w	r8, [r4, #8]
 80068a0:	f88d 854a 	strb.w	r8, [sp, #1354]	@ 0x54a
 80068a4:	f8ad 3548 	strh.w	r3, [sp, #1352]	@ 0x548
 80068a8:	4681      	mov	r9, r0
 80068aa:	f8dd 3548 	ldr.w	r3, [sp, #1352]	@ 0x548
 80068ae:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 80068b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
 80068bc:	ab2b      	add	r3, sp, #172	@ 0xac
 80068be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80068c2:	ab2e      	add	r3, sp, #184	@ 0xb8
 80068c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80068c8:	ab31      	add	r3, sp, #196	@ 0xc4
 80068ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80068ce:	ab34      	add	r3, sp, #208	@ 0xd0
 80068d0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80068d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80068d8:	ab37      	add	r3, sp, #220	@ 0xdc
 80068da:	edcd 8a08 	vstr	s17, [sp, #32]
 80068de:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 80068e2:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 80068e6:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 80068ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80068ee:	ab3a      	add	r3, sp, #232	@ 0xe8
 80068f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80068f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80068f8:	f10d 0e44 	add.w	lr, sp, #68	@ 0x44
 80068fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006900:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006904:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006908:	f44f 75b4 	mov.w	r5, #360	@ 0x168
 800690c:	f8dc 3000 	ldr.w	r3, [ip]
 8006910:	f8ce 3000 	str.w	r3, [lr]
 8006914:	462a      	mov	r2, r5
 8006916:	4641      	mov	r1, r8
 8006918:	4620      	mov	r0, r4
 800691a:	f006 f8d9 	bl	800cad0 <memset>
 800691e:	f44f 56f0 	mov.w	r6, #7680	@ 0x1e00
 8006922:	462a      	mov	r2, r5
 8006924:	4621      	mov	r1, r4
 8006926:	a840      	add	r0, sp, #256	@ 0x100
 8006928:	f8ad 60f8 	strh.w	r6, [sp, #248]	@ 0xf8
 800692c:	f006 f94f 	bl	800cbce <memcpy>
 8006930:	462a      	mov	r2, r5
 8006932:	4641      	mov	r1, r8
 8006934:	4620      	mov	r0, r4
 8006936:	ed8d 8a3f 	vstr	s16, [sp, #252]	@ 0xfc
 800693a:	f006 f8c9 	bl	800cad0 <memset>
 800693e:	462a      	mov	r2, r5
 8006940:	4621      	mov	r1, r4
 8006942:	a89c      	add	r0, sp, #624	@ 0x270
 8006944:	f8ad 6268 	strh.w	r6, [sp, #616]	@ 0x268
 8006948:	f006 f941 	bl	800cbce <memcpy>
 800694c:	462a      	mov	r2, r5
 800694e:	4641      	mov	r1, r8
 8006950:	4620      	mov	r0, r4
 8006952:	ed8d 8a9b 	vstr	s16, [sp, #620]	@ 0x26c
 8006956:	f006 f8bb 	bl	800cad0 <memset>
 800695a:	462a      	mov	r2, r5
 800695c:	4621      	mov	r1, r4
 800695e:	a8f8      	add	r0, sp, #992	@ 0x3e0
 8006960:	f8ad 63d8 	strh.w	r6, [sp, #984]	@ 0x3d8
 8006964:	f006 f933 	bl	800cbce <memcpy>
 8006968:	462a      	mov	r2, r5
 800696a:	4641      	mov	r1, r8
 800696c:	4620      	mov	r0, r4
 800696e:	ed8d 8af7 	vstr	s16, [sp, #988]	@ 0x3dc
 8006972:	f006 f8ad 	bl	800cad0 <memset>
 8006976:	462a      	mov	r2, r5
 8006978:	4621      	mov	r1, r4
 800697a:	f50d 60aa 	add.w	r0, sp, #1360	@ 0x550
 800697e:	f8ad 6548 	strh.w	r6, [sp, #1352]	@ 0x548
 8006982:	f006 f924 	bl	800cbce <memcpy>
 8006986:	f04f 0301 	mov.w	r3, #1
 800698a:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 800698e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8006992:	4ba7      	ldr	r3, [pc, #668]	@ (8006c30 <MFX_emptyAttitude+0x3b8>)
 8006994:	9320      	str	r3, [sp, #128]	@ 0x80
 8006996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006998:	ae0c      	add	r6, sp, #48	@ 0x30
 800699a:	46b3      	mov	fp, r6
 800699c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800699e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80069a2:	e9c4 8800 	strd	r8, r8, [r4]
 80069a6:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80069aa:	f8c4 8010 	str.w	r8, [r4, #16]
 80069ae:	f10d 0c6c 	add.w	ip, sp, #108	@ 0x6c
 80069b2:	46a6      	mov	lr, r4
 80069b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80069b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80069bc:	f50d 6aa9 	add.w	sl, sp, #1352	@ 0x548
 80069c0:	682d      	ldr	r5, [r5, #0]
 80069c2:	f8cc 5000 	str.w	r5, [ip]
 80069c6:	af21      	add	r7, sp, #132	@ 0x84
 80069c8:	ed8a 8a01 	vstr	s16, [sl, #4]
 80069cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80069ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80069d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069d4:	abf6      	add	r3, sp, #984	@ 0x3d8
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	aa3e      	add	r2, sp, #248	@ 0xf8
 80069da:	f8c7 8000 	str.w	r8, [r7]
 80069de:	ab9a      	add	r3, sp, #616	@ 0x268
 80069e0:	a911      	add	r1, sp, #68	@ 0x44
 80069e2:	9403      	str	r4, [sp, #12]
 80069e4:	2001      	movs	r0, #1
 80069e6:	f7fe fab7 	bl	8004f58 <DataHist_parameters>
 80069ea:	4b92      	ldr	r3, [pc, #584]	@ (8006c34 <MFX_emptyAttitude+0x3bc>)
 80069ec:	f8c9 3018 	str.w	r3, [r9, #24]
 80069f0:	4b91      	ldr	r3, [pc, #580]	@ (8006c38 <MFX_emptyAttitude+0x3c0>)
 80069f2:	f8c9 301c 	str.w	r3, [r9, #28]
 80069f6:	4b91      	ldr	r3, [pc, #580]	@ (8006c3c <MFX_emptyAttitude+0x3c4>)
 80069f8:	f8c9 3020 	str.w	r3, [r9, #32]
 80069fc:	4b90      	ldr	r3, [pc, #576]	@ (8006c40 <MFX_emptyAttitude+0x3c8>)
 80069fe:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
 8006a02:	ae2b      	add	r6, sp, #172	@ 0xac
 8006a04:	4b8f      	ldr	r3, [pc, #572]	@ (8006c44 <MFX_emptyAttitude+0x3cc>)
 8006a06:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
 8006a0a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8006a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8006c48 <MFX_emptyAttitude+0x3d0>)
 8006a0e:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 8006a12:	4b8e      	ldr	r3, [pc, #568]	@ (8006c4c <MFX_emptyAttitude+0x3d4>)
 8006a14:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
 8006a18:	4b8d      	ldr	r3, [pc, #564]	@ (8006c50 <MFX_emptyAttitude+0x3d8>)
 8006a1a:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
 8006a1e:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8006a22:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
 8006a26:	ad2e      	add	r5, sp, #184	@ 0xb8
 8006a28:	f89d 30aa 	ldrb.w	r3, [sp, #170]	@ 0xaa
 8006a2c:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8006a30:	f8c9 1078 	str.w	r1, [r9, #120]	@ 0x78
 8006a34:	f8c9 207c 	str.w	r2, [r9, #124]	@ 0x7c
 8006a38:	cd07      	ldmia	r5!, {r0, r1, r2}
 8006a3a:	f889 3072 	strb.w	r3, [r9, #114]	@ 0x72
 8006a3e:	f240 1301 	movw	r3, #257	@ 0x101
 8006a42:	ed9f 6b77 	vldr	d6, [pc, #476]	@ 8006c20 <MFX_emptyAttitude+0x3a8>
 8006a46:	f8a9 3000 	strh.w	r3, [r9]
 8006a4a:	f8a9 3004 	strh.w	r3, [r9, #4]
 8006a4e:	4b81      	ldr	r3, [pc, #516]	@ (8006c54 <MFX_emptyAttitude+0x3dc>)
 8006a50:	f8c9 300c 	str.w	r3, [r9, #12]
 8006a54:	4b80      	ldr	r3, [pc, #512]	@ (8006c58 <MFX_emptyAttitude+0x3e0>)
 8006a56:	f8c9 3014 	str.w	r3, [r9, #20]
 8006a5a:	f509 7346 	add.w	r3, r9, #792	@ 0x318
 8006a5e:	9304      	str	r3, [sp, #16]
 8006a60:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
 8006a64:	ed89 6b16 	vstr	d6, [r9, #88]	@ 0x58
 8006a68:	ed89 6b18 	vstr	d6, [r9, #96]	@ 0x60
 8006a6c:	f10d 0ac4 	add.w	sl, sp, #196	@ 0xc4
 8006a70:	f8a9 8002 	strh.w	r8, [r9, #2]
 8006a74:	ed89 8a02 	vstr	s16, [r9, #8]
 8006a78:	ed89 8a04 	vstr	s16, [r9, #16]
 8006a7c:	ed89 6b1a 	vstr	d6, [r9, #104]	@ 0x68
 8006a80:	f8c9 1084 	str.w	r1, [r9, #132]	@ 0x84
 8006a84:	f8c9 2088 	str.w	r2, [r9, #136]	@ 0x88
 8006a88:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8006a8c:	f10d 0bd0 	add.w	fp, sp, #208	@ 0xd0
 8006a90:	f8c9 008c 	str.w	r0, [r9, #140]	@ 0x8c
 8006a94:	f8c9 1090 	str.w	r1, [r9, #144]	@ 0x90
 8006a98:	f8c9 2094 	str.w	r2, [r9, #148]	@ 0x94
 8006a9c:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8006aa0:	af37      	add	r7, sp, #220	@ 0xdc
 8006aa2:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 8006aa6:	f8c9 109c 	str.w	r1, [r9, #156]	@ 0x9c
 8006aaa:	f8c9 20a0 	str.w	r2, [r9, #160]	@ 0xa0
 8006aae:	cf07      	ldmia	r7!, {r0, r1, r2}
 8006ab0:	f10d 0ee8 	add.w	lr, sp, #232	@ 0xe8
 8006ab4:	f8c9 00a4 	str.w	r0, [r9, #164]	@ 0xa4
 8006ab8:	f8c9 10a8 	str.w	r1, [r9, #168]	@ 0xa8
 8006abc:	f8c9 20ac 	str.w	r2, [r9, #172]	@ 0xac
 8006ac0:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8006ac4:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8006c5c <MFX_emptyAttitude+0x3e4>
 8006ac8:	ed9f 5a65 	vldr	s10, [pc, #404]	@ 8006c60 <MFX_emptyAttitude+0x3e8>
 8006acc:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8006c64 <MFX_emptyAttitude+0x3ec>
 8006ad0:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 8006ad4:	f44f 1c48 	mov.w	ip, #3276800	@ 0x320000
 8006ad8:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8006adc:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
 8006ae0:	ed89 5a65 	vstr	s10, [r9, #404]	@ 0x194
 8006ae4:	edc9 5a66 	vstr	s11, [r9, #408]	@ 0x198
 8006ae8:	ed89 7a67 	vstr	s14, [r9, #412]	@ 0x19c
 8006aec:	edc9 8a64 	vstr	s17, [r9, #400]	@ 0x190
 8006af0:	edc9 8a30 	vstr	s17, [r9, #192]	@ 0xc0
 8006af4:	edc9 8a4a 	vstr	s17, [r9, #296]	@ 0x128
 8006af8:	edc9 8a31 	vstr	s17, [r9, #196]	@ 0xc4
 8006afc:	f04f 0101 	mov.w	r1, #1
 8006b00:	f8c9 20b8 	str.w	r2, [r9, #184]	@ 0xb8
 8006b04:	edc9 8a4b 	vstr	s17, [r9, #300]	@ 0x12c
 8006b08:	edc9 8a32 	vstr	s17, [r9, #200]	@ 0xc8
 8006b0c:	edc9 8a4c 	vstr	s17, [r9, #304]	@ 0x130
 8006b10:	edc9 8a33 	vstr	s17, [r9, #204]	@ 0xcc
 8006b14:	edc9 8a4d 	vstr	s17, [r9, #308]	@ 0x134
 8006b18:	edc9 8a34 	vstr	s17, [r9, #208]	@ 0xd0
 8006b1c:	edc9 8a4e 	vstr	s17, [r9, #312]	@ 0x138
 8006b20:	edc9 8a35 	vstr	s17, [r9, #212]	@ 0xd4
 8006b24:	edc9 8a4f 	vstr	s17, [r9, #316]	@ 0x13c
 8006b28:	edc9 8a36 	vstr	s17, [r9, #216]	@ 0xd8
 8006b2c:	edc9 8a50 	vstr	s17, [r9, #320]	@ 0x140
 8006b30:	edc9 8a37 	vstr	s17, [r9, #220]	@ 0xdc
 8006b34:	edc9 8a51 	vstr	s17, [r9, #324]	@ 0x144
 8006b38:	edc9 8a38 	vstr	s17, [r9, #224]	@ 0xe0
 8006b3c:	edc9 8a52 	vstr	s17, [r9, #328]	@ 0x148
 8006b40:	edc9 8a39 	vstr	s17, [r9, #228]	@ 0xe4
 8006b44:	edc9 8a53 	vstr	s17, [r9, #332]	@ 0x14c
 8006b48:	edc9 8a3a 	vstr	s17, [r9, #232]	@ 0xe8
 8006b4c:	edc9 8a54 	vstr	s17, [r9, #336]	@ 0x150
 8006b50:	edc9 8a3b 	vstr	s17, [r9, #236]	@ 0xec
 8006b54:	edc9 8a55 	vstr	s17, [r9, #340]	@ 0x154
 8006b58:	edc9 8a3c 	vstr	s17, [r9, #240]	@ 0xf0
 8006b5c:	edc9 8a56 	vstr	s17, [r9, #344]	@ 0x158
 8006b60:	edc9 8a3d 	vstr	s17, [r9, #244]	@ 0xf4
 8006b64:	edc9 8a57 	vstr	s17, [r9, #348]	@ 0x15c
 8006b68:	edc9 8a3e 	vstr	s17, [r9, #248]	@ 0xf8
 8006b6c:	edc9 8a58 	vstr	s17, [r9, #352]	@ 0x160
 8006b70:	edc9 8a3f 	vstr	s17, [r9, #252]	@ 0xfc
 8006b74:	edc9 8a59 	vstr	s17, [r9, #356]	@ 0x164
 8006b78:	edc9 8a40 	vstr	s17, [r9, #256]	@ 0x100
 8006b7c:	edc9 8a5a 	vstr	s17, [r9, #360]	@ 0x168
 8006b80:	edc9 8a41 	vstr	s17, [r9, #260]	@ 0x104
 8006b84:	edc9 8a5b 	vstr	s17, [r9, #364]	@ 0x16c
 8006b88:	f8c9 c1a0 	str.w	ip, [r9, #416]	@ 0x1a0
 8006b8c:	edc9 7a75 	vstr	s15, [r9, #468]	@ 0x1d4
 8006b90:	edc9 7a7f 	vstr	s15, [r9, #508]	@ 0x1fc
 8006b94:	edc9 8a42 	vstr	s17, [r9, #264]	@ 0x108
 8006b98:	edc9 8a5c 	vstr	s17, [r9, #368]	@ 0x170
 8006b9c:	edc9 8a43 	vstr	s17, [r9, #268]	@ 0x10c
 8006ba0:	edc9 8a5d 	vstr	s17, [r9, #372]	@ 0x174
 8006ba4:	edc9 8a44 	vstr	s17, [r9, #272]	@ 0x110
 8006ba8:	edc9 8a5e 	vstr	s17, [r9, #376]	@ 0x178
 8006bac:	edc9 8a45 	vstr	s17, [r9, #276]	@ 0x114
 8006bb0:	edc9 8a5f 	vstr	s17, [r9, #380]	@ 0x17c
 8006bb4:	edc9 8a46 	vstr	s17, [r9, #280]	@ 0x118
 8006bb8:	edc9 8a60 	vstr	s17, [r9, #384]	@ 0x180
 8006bbc:	edc9 8a47 	vstr	s17, [r9, #284]	@ 0x11c
 8006bc0:	edc9 8a61 	vstr	s17, [r9, #388]	@ 0x184
 8006bc4:	edc9 8a48 	vstr	s17, [r9, #288]	@ 0x120
 8006bc8:	edc9 8a62 	vstr	s17, [r9, #392]	@ 0x188
 8006bcc:	edc9 8a49 	vstr	s17, [r9, #292]	@ 0x124
 8006bd0:	edc9 8a63 	vstr	s17, [r9, #396]	@ 0x18c
 8006bd4:	f889 81a4 	strb.w	r8, [r9, #420]	@ 0x1a4
 8006bd8:	f8c9 81a6 	str.w	r8, [r9, #422]	@ 0x1a6
 8006bdc:	edc9 8a6c 	vstr	s17, [r9, #432]	@ 0x1b0
 8006be0:	edc9 8a76 	vstr	s17, [r9, #472]	@ 0x1d8
 8006be4:	edc9 8a77 	vstr	s17, [r9, #476]	@ 0x1dc
 8006be8:	edc9 8a78 	vstr	s17, [r9, #480]	@ 0x1e0
 8006bec:	edc9 8a79 	vstr	s17, [r9, #484]	@ 0x1e4
 8006bf0:	edc9 8a7a 	vstr	s17, [r9, #488]	@ 0x1e8
 8006bf4:	edc9 8a7b 	vstr	s17, [r9, #492]	@ 0x1ec
 8006bf8:	edc9 8a7c 	vstr	s17, [r9, #496]	@ 0x1f0
 8006bfc:	edc9 8a7d 	vstr	s17, [r9, #500]	@ 0x1f4
 8006c00:	edc9 8a6d 	vstr	s17, [r9, #436]	@ 0x1b4
 8006c04:	edc9 8a7e 	vstr	s17, [r9, #504]	@ 0x1f8
 8006c08:	edc9 8a80 	vstr	s17, [r9, #512]	@ 0x200
 8006c0c:	edc9 7a89 	vstr	s15, [r9, #548]	@ 0x224
 8006c10:	edc9 7a93 	vstr	s15, [r9, #588]	@ 0x24c
 8006c14:	edc9 7a9d 	vstr	s15, [r9, #628]	@ 0x274
 8006c18:	e026      	b.n	8006c68 <MFX_emptyAttitude+0x3f0>
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w
	...
 8006c28:	08011d54 	.word	0x08011d54
 8006c2c:	00000000 	.word	0x00000000
 8006c30:	40a00000 	.word	0x40a00000
 8006c34:	3a9d4952 	.word	0x3a9d4952
 8006c38:	3ac49ba6 	.word	0x3ac49ba6
 8006c3c:	3b03126f 	.word	0x3b03126f
 8006c40:	3a83126f 	.word	0x3a83126f
 8006c44:	3f639581 	.word	0x3f639581
 8006c48:	402ab021 	.word	0x402ab021
 8006c4c:	3f13f7cf 	.word	0x3f13f7cf
 8006c50:	3f2ac083 	.word	0x3f2ac083
 8006c54:	01010100 	.word	0x01010100
 8006c58:	41200000 	.word	0x41200000
 8006c5c:	447a0000 	.word	0x447a0000
 8006c60:	3f4ccccd 	.word	0x3f4ccccd
 8006c64:	3f333333 	.word	0x3f333333
 8006c68:	edc9 8a81 	vstr	s17, [r9, #516]	@ 0x204
 8006c6c:	edc9 8a82 	vstr	s17, [r9, #520]	@ 0x208
 8006c70:	edc9 8a83 	vstr	s17, [r9, #524]	@ 0x20c
 8006c74:	edc9 8a84 	vstr	s17, [r9, #528]	@ 0x210
 8006c78:	edc9 8a85 	vstr	s17, [r9, #532]	@ 0x214
 8006c7c:	edc9 8a86 	vstr	s17, [r9, #536]	@ 0x218
 8006c80:	edc9 8a6e 	vstr	s17, [r9, #440]	@ 0x1b8
 8006c84:	edc9 8a87 	vstr	s17, [r9, #540]	@ 0x21c
 8006c88:	edc9 8a88 	vstr	s17, [r9, #544]	@ 0x220
 8006c8c:	edc9 8a8a 	vstr	s17, [r9, #552]	@ 0x228
 8006c90:	edc9 8a8b 	vstr	s17, [r9, #556]	@ 0x22c
 8006c94:	edc9 8a8c 	vstr	s17, [r9, #560]	@ 0x230
 8006c98:	edc9 8a8d 	vstr	s17, [r9, #564]	@ 0x234
 8006c9c:	edc9 8a8e 	vstr	s17, [r9, #568]	@ 0x238
 8006ca0:	edc9 8a8f 	vstr	s17, [r9, #572]	@ 0x23c
 8006ca4:	edc9 8a6f 	vstr	s17, [r9, #444]	@ 0x1bc
 8006ca8:	edc9 8a90 	vstr	s17, [r9, #576]	@ 0x240
 8006cac:	edc9 8a91 	vstr	s17, [r9, #580]	@ 0x244
 8006cb0:	edc9 8a92 	vstr	s17, [r9, #584]	@ 0x248
 8006cb4:	edc9 8a94 	vstr	s17, [r9, #592]	@ 0x250
 8006cb8:	edc9 8a95 	vstr	s17, [r9, #596]	@ 0x254
 8006cbc:	edc9 8a96 	vstr	s17, [r9, #600]	@ 0x258
 8006cc0:	edc9 8a97 	vstr	s17, [r9, #604]	@ 0x25c
 8006cc4:	edc9 8a98 	vstr	s17, [r9, #608]	@ 0x260
 8006cc8:	edc9 8a70 	vstr	s17, [r9, #448]	@ 0x1c0
 8006ccc:	edc9 8a99 	vstr	s17, [r9, #612]	@ 0x264
 8006cd0:	edc9 8a9a 	vstr	s17, [r9, #616]	@ 0x268
 8006cd4:	edc9 8a9b 	vstr	s17, [r9, #620]	@ 0x26c
 8006cd8:	edc9 8a9c 	vstr	s17, [r9, #624]	@ 0x270
 8006cdc:	edc9 8a9e 	vstr	s17, [r9, #632]	@ 0x278
 8006ce0:	edc9 7aa7 	vstr	s15, [r9, #668]	@ 0x29c
 8006ce4:	edc9 7ab1 	vstr	s15, [r9, #708]	@ 0x2c4
 8006ce8:	edc9 7abb 	vstr	s15, [r9, #748]	@ 0x2ec
 8006cec:	edc9 8a9f 	vstr	s17, [r9, #636]	@ 0x27c
 8006cf0:	edc9 8aa0 	vstr	s17, [r9, #640]	@ 0x280
 8006cf4:	edc9 8aa1 	vstr	s17, [r9, #644]	@ 0x284
 8006cf8:	edc9 8a71 	vstr	s17, [r9, #452]	@ 0x1c4
 8006cfc:	edc9 8aa2 	vstr	s17, [r9, #648]	@ 0x288
 8006d00:	edc9 8aa3 	vstr	s17, [r9, #652]	@ 0x28c
 8006d04:	edc9 8aa4 	vstr	s17, [r9, #656]	@ 0x290
 8006d08:	edc9 8aa5 	vstr	s17, [r9, #660]	@ 0x294
 8006d0c:	edc9 8aa6 	vstr	s17, [r9, #664]	@ 0x298
 8006d10:	edc9 8aa8 	vstr	s17, [r9, #672]	@ 0x2a0
 8006d14:	edc9 8aa9 	vstr	s17, [r9, #676]	@ 0x2a4
 8006d18:	edc9 8aaa 	vstr	s17, [r9, #680]	@ 0x2a8
 8006d1c:	edc9 8a72 	vstr	s17, [r9, #456]	@ 0x1c8
 8006d20:	edc9 8aab 	vstr	s17, [r9, #684]	@ 0x2ac
 8006d24:	edc9 8aac 	vstr	s17, [r9, #688]	@ 0x2b0
 8006d28:	edc9 8aad 	vstr	s17, [r9, #692]	@ 0x2b4
 8006d2c:	edc9 8aae 	vstr	s17, [r9, #696]	@ 0x2b8
 8006d30:	edc9 8aaf 	vstr	s17, [r9, #700]	@ 0x2bc
 8006d34:	edc9 8ab0 	vstr	s17, [r9, #704]	@ 0x2c0
 8006d38:	edc9 8ab2 	vstr	s17, [r9, #712]	@ 0x2c8
 8006d3c:	edc9 8ab3 	vstr	s17, [r9, #716]	@ 0x2cc
 8006d40:	edc9 8a73 	vstr	s17, [r9, #460]	@ 0x1cc
 8006d44:	edc9 8ab4 	vstr	s17, [r9, #720]	@ 0x2d0
 8006d48:	edc9 8ab5 	vstr	s17, [r9, #724]	@ 0x2d4
 8006d4c:	edc9 8ab6 	vstr	s17, [r9, #728]	@ 0x2d8
 8006d50:	edc9 8ab7 	vstr	s17, [r9, #732]	@ 0x2dc
 8006d54:	edc9 8ab8 	vstr	s17, [r9, #736]	@ 0x2e0
 8006d58:	edc9 8ab9 	vstr	s17, [r9, #740]	@ 0x2e4
 8006d5c:	edc9 8aba 	vstr	s17, [r9, #744]	@ 0x2e8
 8006d60:	edc9 8abc 	vstr	s17, [r9, #752]	@ 0x2f0
 8006d64:	9a04      	ldr	r2, [sp, #16]
 8006d66:	f889 11ac 	strb.w	r1, [r9, #428]	@ 0x1ac
 8006d6a:	edc9 8a74 	vstr	s17, [r9, #464]	@ 0x1d0
 8006d6e:	edc9 7ac5 	vstr	s15, [r9, #788]	@ 0x314
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	f50d 624a 	add.w	r2, sp, #3232	@ 0xca0
 8006d78:	9202      	str	r2, [sp, #8]
 8006d7a:	f50d 6233 	add.w	r2, sp, #2864	@ 0xb30
 8006d7e:	9201      	str	r2, [sp, #4]
 8006d80:	f50d 621c 	add.w	r2, sp, #2496	@ 0x9c0
 8006d84:	9200      	str	r2, [sp, #0]
 8006d86:	7820      	ldrb	r0, [r4, #0]
 8006d88:	edc9 8abd 	vstr	s17, [r9, #756]	@ 0x2f4
 8006d8c:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 8006d90:	f50d 62dc 	add.w	r2, sp, #1760	@ 0x6e0
 8006d94:	f20d 61bc 	addw	r1, sp, #1724	@ 0x6bc
 8006d98:	edc9 8abe 	vstr	s17, [r9, #760]	@ 0x2f8
 8006d9c:	edc9 8abf 	vstr	s17, [r9, #764]	@ 0x2fc
 8006da0:	edc9 8ac0 	vstr	s17, [r9, #768]	@ 0x300
 8006da4:	edc9 8ac1 	vstr	s17, [r9, #772]	@ 0x304
 8006da8:	edc9 8ac2 	vstr	s17, [r9, #776]	@ 0x308
 8006dac:	edc9 8ac3 	vstr	s17, [r9, #780]	@ 0x30c
 8006db0:	edc9 8ac4 	vstr	s17, [r9, #784]	@ 0x310
 8006db4:	f7fe f8d0 	bl	8004f58 <DataHist_parameters>
 8006db8:	f609 1344 	addw	r3, r9, #2372	@ 0x944
 8006dbc:	f509 6216 	add.w	r2, r9, #2400	@ 0x960
 8006dc0:	f609 1168 	addw	r1, r9, #2408	@ 0x968
 8006dc4:	f509 6017 	add.w	r0, r9, #2416	@ 0x970
 8006dc8:	f10d 0c20 	add.w	ip, sp, #32
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	9205      	str	r2, [sp, #20]
 8006dd0:	9106      	str	r1, [sp, #24]
 8006dd2:	9007      	str	r0, [sp, #28]
 8006dd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006dd8:	f8c9 393c 	str.w	r3, [r9, #2364]	@ 0x93c
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	f8c9 0930 	str.w	r0, [r9, #2352]	@ 0x930
 8006de2:	f8c9 1934 	str.w	r1, [r9, #2356]	@ 0x934
 8006de6:	f8c9 2938 	str.w	r2, [r9, #2360]	@ 0x938
 8006dea:	9906      	ldr	r1, [sp, #24]
 8006dec:	9a05      	ldr	r2, [sp, #20]
 8006dee:	9807      	ldr	r0, [sp, #28]
 8006df0:	f509 6b14 	add.w	fp, r9, #2368	@ 0x940
 8006df4:	f609 1a5c 	addw	sl, r9, #2396	@ 0x95c
 8006df8:	edcb 8a00 	vstr	s17, [fp]
 8006dfc:	f609 1748 	addw	r7, r9, #2376	@ 0x948
 8006e00:	edca 8a00 	vstr	s17, [sl]
 8006e04:	f609 1664 	addw	r6, r9, #2404	@ 0x964
 8006e08:	edc3 8a00 	vstr	s17, [r3]
 8006e0c:	f609 1554 	addw	r5, r9, #2388	@ 0x954
 8006e10:	f609 1458 	addw	r4, r9, #2392	@ 0x958
 8006e14:	f609 1e6c 	addw	lr, r9, #2412	@ 0x96c
 8006e18:	230a      	movs	r3, #10
 8006e1a:	edc2 8a00 	vstr	s17, [r2]
 8006e1e:	edc7 8a00 	vstr	s17, [r7]
 8006e22:	edc6 8a00 	vstr	s17, [r6]
 8006e26:	f8c9 894c 	str.w	r8, [r9, #2380]	@ 0x94c
 8006e2a:	f8a9 8950 	strh.w	r8, [r9, #2384]	@ 0x950
 8006e2e:	edc5 8a00 	vstr	s17, [r5]
 8006e32:	ed84 8a00 	vstr	s16, [r4]
 8006e36:	edc1 8a00 	vstr	s17, [r1]
 8006e3a:	edc0 8a00 	vstr	s17, [r0]
 8006e3e:	edce 8a00 	vstr	s17, [lr]
 8006e42:	f8c9 3974 	str.w	r3, [r9, #2420]	@ 0x974
 8006e46:	f889 8978 	strb.w	r8, [r9, #2424]	@ 0x978
 8006e4a:	f60d 4dd4 	addw	sp, sp, #3284	@ 0xcd4
 8006e4e:	ecbd 8b02 	vpop	{d8}
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop

08006e58 <iNemoEngine_API_Update>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	ed2d 8b10 	vpush	{d8-d15}
 8006e60:	f2ad 5d94 	subw	sp, sp, #1428	@ 0x594
 8006e64:	eeb0 8a40 	vmov.f32	s16, s0
 8006e68:	9006      	str	r0, [sp, #24]
 8006e6a:	9114      	str	r1, [sp, #80]	@ 0x50
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	9324      	str	r3, [sp, #144]	@ 0x90
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8222 	beq.w	80072ba <iNemoEngine_API_Update+0x462>
 8006e76:	68e0      	ldr	r0, [r4, #12]
 8006e78:	6921      	ldr	r1, [r4, #16]
 8006e7a:	6962      	ldr	r2, [r4, #20]
 8006e7c:	9d06      	ldr	r5, [sp, #24]
 8006e7e:	aba1      	add	r3, sp, #644	@ 0x284
 8006e80:	c307      	stmia	r3!, {r0, r1, r2}
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	6861      	ldr	r1, [r4, #4]
 8006e86:	68a2      	ldr	r2, [r4, #8]
 8006e88:	ab9e      	add	r3, sp, #632	@ 0x278
 8006e8a:	c307      	stmia	r3!, {r0, r1, r2}
 8006e8c:	69a0      	ldr	r0, [r4, #24]
 8006e8e:	69e1      	ldr	r1, [r4, #28]
 8006e90:	6a22      	ldr	r2, [r4, #32]
 8006e92:	f895 4978 	ldrb.w	r4, [r5, #2424]	@ 0x978
 8006e96:	aba4      	add	r3, sp, #656	@ 0x290
 8006e98:	c307      	stmia	r3!, {r0, r1, r2}
 8006e9a:	b12c      	cbz	r4, 8006ea8 <iNemoEngine_API_Update+0x50>
 8006e9c:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	@ 0x950
 8006ea0:	792b      	ldrb	r3, [r5, #4]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	f082 82a5 	bcs.w	80093f2 <iNemoEngine_API_Update+0x259a>
 8006ea8:	9c06      	ldr	r4, [sp, #24]
 8006eaa:	ae31      	add	r6, sp, #196	@ 0xc4
 8006eac:	f104 033a 	add.w	r3, r4, #58	@ 0x3a
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	aaa1      	add	r2, sp, #644	@ 0x284
 8006eb6:	9320      	str	r3, [sp, #128]	@ 0x80
 8006eb8:	ad37      	add	r5, sp, #220	@ 0xdc
 8006eba:	f7fe f905 	bl	80050c8 <rotVect>
 8006ebe:	aaa4      	add	r2, sp, #656	@ 0x290
 8006ec0:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8006ec4:	a834      	add	r0, sp, #208	@ 0xd0
 8006ec6:	f7fe f8ff 	bl	80050c8 <rotVect>
 8006eca:	aa9e      	add	r2, sp, #632	@ 0x278
 8006ecc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7fe f8f9 	bl	80050c8 <rotVect>
 8006ed6:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8006eda:	b923      	cbnz	r3, 8006ee6 <iNemoEngine_API_Update+0x8e>
 8006edc:	4b9d      	ldr	r3, [pc, #628]	@ (8007154 <iNemoEngine_API_Update+0x2fc>)
 8006ede:	606b      	str	r3, [r5, #4]
 8006ee0:	60ab      	str	r3, [r5, #8]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	9b06      	ldr	r3, [sp, #24]
 8006ee8:	f8d3 794c 	ldr.w	r7, [r3, #2380]	@ 0x94c
 8006eec:	2f09      	cmp	r7, #9
 8006eee:	d851      	bhi.n	8006f94 <iNemoEngine_API_Update+0x13c>
 8006ef0:	edd6 aa01 	vldr	s21, [r6, #4]
 8006ef4:	ed96 ba00 	vldr	s22, [r6]
 8006ef8:	ed96 aa02 	vldr	s20, [r6, #8]
 8006efc:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8006f00:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8006f04:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8006f08:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8006f0c:	ee17 0a90 	vmov	r0, s15
 8006f10:	f7f9 fb1a 	bl	8000548 <__aeabi_f2d>
 8006f14:	ec41 0b10 	vmov	d0, r0, r1
 8006f18:	f009 f91e 	bl	8010158 <sqrt>
 8006f1c:	ec51 0b10 	vmov	r0, r1, d0
 8006f20:	f7f9 fe62 	bl	8000be8 <__aeabi_d2f>
 8006f24:	ee07 0a90 	vmov	s15, r0
 8006f28:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 8006f2c:	ed95 9a01 	vldr	s18, [r5, #4]
 8006f30:	edd5 9a00 	vldr	s19, [r5]
 8006f34:	edd5 8a02 	vldr	s17, [r5, #8]
 8006f38:	ee69 7a09 	vmul.f32	s15, s18, s18
 8006f3c:	ee2b ba07 	vmul.f32	s22, s22, s14
 8006f40:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8006f44:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006f48:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8006f4c:	ee2a aa07 	vmul.f32	s20, s20, s14
 8006f50:	ee17 0a90 	vmov	r0, s15
 8006f54:	ed86 ba00 	vstr	s22, [r6]
 8006f58:	edc6 aa01 	vstr	s21, [r6, #4]
 8006f5c:	ed86 aa02 	vstr	s20, [r6, #8]
 8006f60:	f7f9 faf2 	bl	8000548 <__aeabi_f2d>
 8006f64:	ec41 0b10 	vmov	d0, r0, r1
 8006f68:	f009 f8f6 	bl	8010158 <sqrt>
 8006f6c:	ec51 0b10 	vmov	r0, r1, d0
 8006f70:	f7f9 fe3a 	bl	8000be8 <__aeabi_d2f>
 8006f74:	ee07 0a90 	vmov	s15, r0
 8006f78:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8006f7c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8006f80:	ee29 9a27 	vmul.f32	s18, s18, s15
 8006f84:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006f88:	edc5 9a00 	vstr	s19, [r5]
 8006f8c:	ed85 9a01 	vstr	s18, [r5, #4]
 8006f90:	edc5 8a02 	vstr	s17, [r5, #8]
 8006f94:	9906      	ldr	r1, [sp, #24]
 8006f96:	790b      	ldrb	r3, [r1, #4]
 8006f98:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	@ 0x950
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	f080 80f5 	bcs.w	800718c <iNemoEngine_API_Update+0x334>
 8006fa2:	abf8      	add	r3, sp, #992	@ 0x3e0
 8006fa4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006fa6:	f501 6313 	add.w	r3, r1, #2352	@ 0x930
 8006faa:	931c      	str	r3, [sp, #112]	@ 0x70
 8006fac:	f601 1334 	addw	r3, r1, #2356	@ 0x934
 8006fb0:	931d      	str	r3, [sp, #116]	@ 0x74
 8006fb2:	f601 1338 	addw	r3, r1, #2360	@ 0x938
 8006fb6:	931e      	str	r3, [sp, #120]	@ 0x78
 8006fb8:	eddd 9af5 	vldr	s19, [sp, #980]	@ 0x3d4
 8006fbc:	f601 133c 	addw	r3, r1, #2364	@ 0x93c
 8006fc0:	accc      	add	r4, sp, #816	@ 0x330
 8006fc2:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	3701      	adds	r7, #1
 8006fc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006fca:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006fcc:	f8c5 794c 	str.w	r7, [r5, #2380]	@ 0x94c
 8006fd0:	aaa1      	add	r2, sp, #644	@ 0x284
 8006fd2:	f7fe f879 	bl	80050c8 <rotVect>
 8006fd6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006fd8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60d3      	str	r3, [r2, #12]
 8006fde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6113      	str	r3, [r2, #16]
 8006fe4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6153      	str	r3, [r2, #20]
 8006fea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6193      	str	r3, [r2, #24]
 8006ff0:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4615      	mov	r5, r2
 8007000:	300c      	adds	r0, #12
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	f102 031c 	add.w	r3, r2, #28
 8007008:	f7ff fb6c 	bl	80066e4 <output_update>
 800700c:	ed95 8a00 	vldr	s16, [r5]
 8007010:	ed95 aa01 	vldr	s20, [r5, #4]
 8007014:	eeb0 0a48 	vmov.f32	s0, s16
 8007018:	f009 f944 	bl	80102a4 <sinf>
 800701c:	eeb0 9a40 	vmov.f32	s18, s0
 8007020:	eeb0 0a48 	vmov.f32	s0, s16
 8007024:	f009 f8f2 	bl	801020c <cosf>
 8007028:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800702c:	edd4 6a3d 	vldr	s13, [r4, #244]	@ 0xf4
 8007030:	ee60 8a00 	vmul.f32	s17, s0, s0
 8007034:	eeb0 7aca 	vabs.f32	s14, s20
 8007038:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800703c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8007158 <iNemoEngine_API_Update+0x300>
 8007040:	ee29 9a09 	vmul.f32	s18, s18, s18
 8007044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704c:	eee9 8a26 	vfma.f32	s17, s18, s13
 8007050:	d579      	bpl.n	8007146 <iNemoEngine_API_Update+0x2ee>
 8007052:	eeb0 0a4a 	vmov.f32	s0, s20
 8007056:	f009 f96b 	bl	8010330 <tanf>
 800705a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800705e:	eeb0 7a69 	vmov.f32	s14, s19
 8007062:	eea0 7a28 	vfma.f32	s14, s0, s17
 8007066:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007068:	9b06      	ldr	r3, [sp, #24]
 800706a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800715c <iNemoEngine_API_Update+0x304>
 800706e:	4c3c      	ldr	r4, [pc, #240]	@ (8007160 <iNemoEngine_API_Update+0x308>)
 8007070:	eef1 7ac7 	vsqrt.f32	s15, s14
 8007074:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007180 <iNemoEngine_API_Update+0x328>
 8007078:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800707c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007084:	bf88      	it	hi
 8007086:	eef0 7a66 	vmovhi.f32	s15, s13
 800708a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007092:	bfb8      	it	lt
 8007094:	eef0 7a47 	vmovlt.f32	s15, s14
 8007098:	edc5 7a0e 	vstr	s15, [r5, #56]	@ 0x38
 800709c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070a0:	bbd3      	cbnz	r3, 8007118 <iNemoEngine_API_Update+0x2c0>
 80070a2:	ed95 1a09 	vldr	s2, [r5, #36]	@ 0x24
 80070a6:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 80070aa:	edd5 0a08 	vldr	s1, [r5, #32]
 80070ae:	ed95 0a07 	vldr	s0, [r5, #28]
 80070b2:	f7fe f86d 	bl	8005190 <findDirection>
 80070b6:	ed95 7a03 	vldr	s14, [r5, #12]
 80070ba:	edd5 6a04 	vldr	s13, [r5, #16]
 80070be:	edd5 8a05 	vldr	s17, [r5, #20]
 80070c2:	edd5 7a06 	vldr	s15, [r5, #24]
 80070c6:	f8c4 03c0 	str.w	r0, [r4, #960]	@ 0x3c0
 80070ca:	2805      	cmp	r0, #5
 80070cc:	f204 822c 	bhi.w	800b528 <iNemoEngine_API_Update+0x46d0>
 80070d0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80070d4:	11d0000a 	.word	0x11d0000a
 80070d8:	11990006 	.word	0x11990006
 80070dc:	000a0006 	.word	0x000a0006
 80070e0:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8007164 <iNemoEngine_API_Update+0x30c>
 80070e4:	ee38 8a27 	vadd.f32	s16, s16, s15
 80070e8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8007168 <iNemoEngine_API_Update+0x310>
 80070ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80070f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f4:	bfa8      	it	ge
 80070f6:	ee38 8a67 	vsubge.f32	s16, s16, s15
 80070fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80070fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007102:	f100 80d5 	bmi.w	80072b0 <iNemoEngine_API_Update+0x458>
 8007106:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007108:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
 800710c:	f20d 5d94 	addw	sp, sp, #1428	@ 0x594
 8007110:	ecbd 8b10 	vpop	{d8-d15}
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	ed95 1a09 	vldr	s2, [r5, #36]	@ 0x24
 800711c:	edd5 8a05 	vldr	s17, [r5, #20]
 8007120:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 8007124:	edd5 0a07 	vldr	s1, [r5, #28]
 8007128:	ed95 0a08 	vldr	s0, [r5, #32]
 800712c:	eeb1 1a41 	vneg.f32	s2, s2
 8007130:	f7fe f82e 	bl	8005190 <findDirection>
 8007134:	eef1 8a68 	vneg.f32	s17, s17
 8007138:	ed95 7a04 	vldr	s14, [r5, #16]
 800713c:	edd5 6a03 	vldr	s13, [r5, #12]
 8007140:	edd5 7a06 	vldr	s15, [r5, #24]
 8007144:	e7bf      	b.n	80070c6 <iNemoEngine_API_Update+0x26e>
 8007146:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800716c <iNemoEngine_API_Update+0x314>
 800714a:	eeb0 7a69 	vmov.f32	s14, s19
 800714e:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8007152:	e788      	b.n	8007066 <iNemoEngine_API_Update+0x20e>
 8007154:	3f333333 	.word	0x3f333333
 8007158:	3fbc430e 	.word	0x3fbc430e
 800715c:	40490fdb 	.word	0x40490fdb
 8007160:	20000204 	.word	0x20000204
 8007164:	43340000 	.word	0x43340000
 8007168:	43b40000 	.word	0x43b40000
 800716c:	42c6ab07 	.word	0x42c6ab07
 8007170:	3c03126f 	.word	0x3c03126f
 8007174:	3b656042 	.word	0x3b656042
 8007178:	3e4ccccd 	.word	0x3e4ccccd
 800717c:	3fb50481 	.word	0x3fb50481
 8007180:	3c8efa35 	.word	0x3c8efa35
 8007184:	3ed93dd9 	.word	0x3ed93dd9
 8007188:	42c80000 	.word	0x42c80000
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007194:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 8007170 <iNemoEngine_API_Update+0x318>
 8007198:	ed5f 6a0a 	vldr	s13, [pc, #-40]	@ 8007174 <iNemoEngine_API_Update+0x31c>
 800719c:	ed5f ba08 	vldr	s23, [pc, #-32]	@ 8007180 <iNemoEngine_API_Update+0x328>
 80071a0:	ed1f 6a0a 	vldr	s12, [pc, #-40]	@ 800717c <iNemoEngine_API_Update+0x324>
 80071a4:	ed5f 4a0c 	vldr	s9, [pc, #-48]	@ 8007178 <iNemoEngine_API_Update+0x320>
 80071a8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80071ac:	4608      	mov	r0, r1
 80071ae:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80071b2:	f601 125c 	addw	r2, r1, #2396	@ 0x95c
 80071b6:	2300      	movs	r3, #0
 80071b8:	2100      	movs	r1, #0
 80071ba:	f50d 7cb2 	add.w	ip, sp, #356	@ 0x164
 80071be:	ac56      	add	r4, sp, #344	@ 0x158
 80071c0:	edcd 7a07 	vstr	s15, [sp, #28]
 80071c4:	eef1 7ae5 	vsqrt.f32	s15, s11
 80071c8:	ed1f 7a12 	vldr	s14, [pc, #-72]	@ 8007184 <iNemoEngine_API_Update+0x32c>
 80071cc:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 80071d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80071d4:	ed92 7a00 	vldr	s14, [r2]
 80071d8:	f8a0 1950 	strh.w	r1, [r0, #2384]	@ 0x950
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	f500 6216 	add.w	r2, r0, #2400	@ 0x960
 80071e2:	ee27 ea2b 	vmul.f32	s28, s14, s23
 80071e6:	ed8d 7a1a 	vstr	s14, [sp, #104]	@ 0x68
 80071ea:	ed92 7a00 	vldr	s14, [r2]
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	f600 1264 	addw	r2, r0, #2404	@ 0x964
 80071f4:	ee67 ea2b 	vmul.f32	s29, s14, s23
 80071f8:	ed8d 7a1c 	vstr	s14, [sp, #112]	@ 0x70
 80071fc:	ed92 7a00 	vldr	s14, [r2]
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	7947      	ldrb	r7, [r0, #5]
 8007204:	ed8d 7a18 	vstr	s14, [sp, #96]	@ 0x60
 8007208:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800720c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8007210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007218:	9a06      	ldr	r2, [sp, #24]
 800721a:	f8d2 01c8 	ldr.w	r0, [r2, #456]	@ 0x1c8
 800721e:	f8d2 11cc 	ldr.w	r1, [r2, #460]	@ 0x1cc
 8007222:	f8d2 21d0 	ldr.w	r2, [r2, #464]	@ 0x1d0
 8007226:	abd9      	add	r3, sp, #868	@ 0x364
 8007228:	2f01      	cmp	r7, #1
 800722a:	c307      	stmia	r3!, {r0, r1, r2}
 800722c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8007230:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8007234:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8007238:	f002 844a 	beq.w	8009ad0 <iNemoEngine_API_Update+0x2c78>
 800723c:	2f02      	cmp	r7, #2
 800723e:	f002 843c 	beq.w	8009aba <iNemoEngine_API_Update+0x2c62>
 8007242:	2f00      	cmp	r7, #0
 8007244:	f002 814d 	beq.w	80094e2 <iNemoEngine_API_Update+0x268a>
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	ed5f 5a31 	vldr	s11, [pc, #-196]	@ 8007188 <iNemoEngine_API_Update+0x330>
 800724e:	ed93 ba05 	vldr	s22, [r3, #20]
 8007252:	491b      	ldr	r1, [pc, #108]	@ (80072c0 <iNemoEngine_API_Update+0x468>)
 8007254:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007258:	ee2b ba25 	vmul.f32	s22, s22, s11
 800725c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007260:	4618      	mov	r0, r3
 8007262:	8842      	ldrh	r2, [r0, #2]
 8007264:	1e53      	subs	r3, r2, #1
 8007266:	2b12      	cmp	r3, #18
 8007268:	d834      	bhi.n	80072d4 <iNemoEngine_API_Update+0x47c>
 800726a:	3201      	adds	r2, #1
 800726c:	b213      	sxth	r3, r2
 800726e:	b292      	uxth	r2, r2
 8007270:	2a03      	cmp	r2, #3
 8007272:	8043      	strh	r3, [r0, #2]
 8007274:	f242 8401 	bls.w	8009a7a <iNemoEngine_API_Update+0x2c22>
 8007278:	ee07 3a10 	vmov	s14, r3
 800727c:	eddf 5a11 	vldr	s11, [pc, #68]	@ 80072c4 <iNemoEngine_API_Update+0x46c>
 8007280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007284:	4603      	mov	r3, r0
 8007286:	ee27 7a25 	vmul.f32	s14, s14, s11
 800728a:	ee84 4a07 	vdiv.f32	s8, s8, s14
 800728e:	ed93 5a0d 	vldr	s10, [r3, #52]	@ 0x34
 8007292:	ed8d 4a22 	vstr	s8, [sp, #136]	@ 0x88
 8007296:	ee66 5a87 	vmul.f32	s11, s13, s14
 800729a:	ee66 6a05 	vmul.f32	s13, s12, s10
 800729e:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80072d0 <iNemoEngine_API_Update+0x478>
 80072a2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80072a6:	ee24 6a86 	vmul.f32	s12, s9, s12
 80072aa:	eeb0 7a65 	vmov.f32	s14, s11
 80072ae:	e02d      	b.n	800730c <iNemoEngine_API_Update+0x4b4>
 80072b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80072c8 <iNemoEngine_API_Update+0x470>
 80072b4:	ee38 8a27 	vadd.f32	s16, s16, s15
 80072b8:	e725      	b.n	8007106 <iNemoEngine_API_Update+0x2ae>
 80072ba:	ab46      	add	r3, sp, #280	@ 0x118
 80072bc:	9324      	str	r3, [sp, #144]	@ 0x90
 80072be:	e5da      	b.n	8006e76 <iNemoEngine_API_Update+0x1e>
 80072c0:	3a83126f 	.word	0x3a83126f
 80072c4:	3d4ccccd 	.word	0x3d4ccccd
 80072c8:	43b40000 	.word	0x43b40000
 80072cc:	358637bd 	.word	0x358637bd
 80072d0:	3f333333 	.word	0x3f333333
 80072d4:	ed1f 5a03 	vldr	s10, [pc, #-12]	@ 80072cc <iNemoEngine_API_Update+0x474>
 80072d8:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
 80072dc:	edd0 5a0b 	vldr	s11, [r0, #44]	@ 0x2c
 80072e0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80072e4:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 80072e8:	ee84 7a07 	vdiv.f32	s14, s8, s14
 80072ec:	2300      	movs	r3, #0
 80072ee:	8043      	strh	r3, [r0, #2]
 80072f0:	ee66 5aa5 	vmul.f32	s11, s13, s11
 80072f4:	ed8d 7a22 	vstr	s14, [sp, #136]	@ 0x88
 80072f8:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 80072fc:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007300:	ee66 6a05 	vmul.f32	s13, s12, s10
 8007304:	ed1f 6a0e 	vldr	s12, [pc, #-56]	@ 80072d0 <iNemoEngine_API_Update+0x478>
 8007308:	ee24 6a86 	vmul.f32	s12, s9, s12
 800730c:	eef7 4a08 	vmov.f32	s9, #120	@ 0x3fc00000  1.5
 8007310:	ee25 5a24 	vmul.f32	s10, s10, s9
 8007314:	edcd 7a89 	vstr	s15, [sp, #548]	@ 0x224
 8007318:	edcd 7a8a 	vstr	s15, [sp, #552]	@ 0x228
 800731c:	edcd 7a8b 	vstr	s15, [sp, #556]	@ 0x22c
 8007320:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 8007324:	4bdd      	ldr	r3, [pc, #884]	@ (800769c <iNemoEngine_API_Update+0x844>)
 8007326:	9162      	str	r1, [sp, #392]	@ 0x188
 8007328:	a8f8      	add	r0, sp, #992	@ 0x3e0
 800732a:	9163      	str	r1, [sp, #396]	@ 0x18c
 800732c:	9164      	str	r1, [sp, #400]	@ 0x190
 800732e:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8007332:	2100      	movs	r1, #0
 8007334:	4605      	mov	r5, r0
 8007336:	9367      	str	r3, [sp, #412]	@ 0x19c
 8007338:	9019      	str	r0, [sp, #100]	@ 0x64
 800733a:	edcd 5a83 	vstr	s11, [sp, #524]	@ 0x20c
 800733e:	edcd 5a84 	vstr	s11, [sp, #528]	@ 0x210
 8007342:	edcd 5a85 	vstr	s11, [sp, #532]	@ 0x214
 8007346:	ed8d 7a86 	vstr	s14, [sp, #536]	@ 0x218
 800734a:	ed8d 7a87 	vstr	s14, [sp, #540]	@ 0x21c
 800734e:	ed8d 7a88 	vstr	s14, [sp, #544]	@ 0x220
 8007352:	edcd 6a8c 	vstr	s13, [sp, #560]	@ 0x230
 8007356:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 800735a:	ed8d 5a8e 	vstr	s10, [sp, #568]	@ 0x238
 800735e:	edcd 7a5f 	vstr	s15, [sp, #380]	@ 0x17c
 8007362:	edcd 7a60 	vstr	s15, [sp, #384]	@ 0x180
 8007366:	edcd 7a61 	vstr	s15, [sp, #388]	@ 0x184
 800736a:	f005 fbb1 	bl	800cad0 <memset>
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	7b5a      	ldrb	r2, [r3, #13]
 8007372:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007376:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 800737a:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
 800737e:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 8007382:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 8007386:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
 800738a:	f8c5 31ac 	str.w	r3, [r5, #428]	@ 0x1ac
 800738e:	2a00      	cmp	r2, #0
 8007390:	f001 8124 	beq.w	80085dc <iNemoEngine_API_Update+0x1784>
 8007394:	ed94 8a01 	vldr	s16, [r4, #4]
 8007398:	edd4 8a00 	vldr	s17, [r4]
 800739c:	ed94 ca02 	vldr	s24, [r4, #8]
 80073a0:	ee28 9a08 	vmul.f32	s18, s16, s16
 80073a4:	eef8 7a00 	vmov.f32	s15, #128	@ 0xc0000000 -2.0
 80073a8:	eea8 9aa8 	vfma.f32	s18, s17, s17
 80073ac:	ee68 5a27 	vmul.f32	s11, s16, s15
 80073b0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 80073b4:	ee6c 6a27 	vmul.f32	s13, s24, s15
 80073b8:	eef1 cac9 	vsqrt.f32	s25, s18
 80073bc:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 80073c0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80073c4:	ee38 6aa8 	vadd.f32	s12, s17, s17
 80073c8:	ee38 7a08 	vadd.f32	s14, s16, s16
 80073cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ce:	ed94 aa04 	vldr	s20, [r4, #16]
 80073d2:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 80073d6:	eef1 7a4a 	vneg.f32	s15, s20
 80073da:	edd4 9a05 	vldr	s19, [r4, #20]
 80073de:	edd4 aa03 	vldr	s21, [r4, #12]
 80073e2:	ed83 5a01 	vstr	s10, [r3, #4]
 80073e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80073ea:	edc3 5a02 	vstr	s11, [r3, #8]
 80073ee:	edc3 7a05 	vstr	s15, [r3, #20]
 80073f2:	eef1 7a69 	vneg.f32	s15, s19
 80073f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80073fa:	edc3 6a0c 	vstr	s13, [r3, #48]	@ 0x30
 80073fe:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 8007402:	eef1 7a6a 	vneg.f32	s15, s21
 8007406:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800740a:	ed83 6a0e 	vstr	s12, [r3, #56]	@ 0x38
 800740e:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 8007412:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8007416:	ed83 7a18 	vstr	s14, [r3, #96]	@ 0x60
 800741a:	edc3 7a04 	vstr	s15, [r3, #16]
 800741e:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 8007422:	2230      	movs	r2, #48	@ 0x30
 8007424:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 8007428:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 800742c:	2100      	movs	r1, #0
 800742e:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
 8007432:	a88f      	add	r0, sp, #572	@ 0x23c
 8007434:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8007438:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
 800743c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800743e:	f005 fb47 	bl	800cad0 <memset>
 8007442:	9a06      	ldr	r2, [sp, #24]
 8007444:	edd2 7a07 	vldr	s15, [r2, #28]
 8007448:	ed92 da06 	vldr	s26, [r2, #24]
 800744c:	f892 31ac 	ldrb.w	r3, [r2, #428]	@ 0x1ac
 8007450:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8007454:	ee2b da0d 	vmul.f32	s26, s22, s26
 8007458:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 800745c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007460:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8007464:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
 8007468:	2b00      	cmp	r3, #0
 800746a:	f043 8025 	bne.w	800a4b8 <iNemoEngine_API_Update+0x3660>
 800746e:	4613      	mov	r3, r2
 8007470:	f502 6214 	add.w	r2, r2, #2368	@ 0x940
 8007474:	9225      	str	r2, [sp, #148]	@ 0x94
 8007476:	f603 1244 	addw	r2, r3, #2372	@ 0x944
 800747a:	f603 1348 	addw	r3, r3, #2376	@ 0x948
 800747e:	9226      	str	r2, [sp, #152]	@ 0x98
 8007480:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007482:	9a06      	ldr	r2, [sp, #24]
 8007484:	f892 3318 	ldrb.w	r3, [r2, #792]	@ 0x318
 8007488:	2b00      	cmp	r3, #0
 800748a:	f042 84db 	bne.w	8009e44 <iNemoEngine_API_Update+0x2fec>
 800748e:	4613      	mov	r3, r2
 8007490:	f502 6597 	add.w	r5, r2, #1208	@ 0x4b8
 8007494:	f202 47b4 	addw	r7, r2, #1204	@ 0x4b4
 8007498:	f502 66c5 	add.w	r6, r2, #1576	@ 0x628
 800749c:	f202 6824 	addw	r8, r2, #1572	@ 0x624
 80074a0:	f203 7394 	addw	r3, r3, #1940	@ 0x794
 80074a4:	f502 62f3 	add.w	r2, r2, #1944	@ 0x798
 80074a8:	9215      	str	r2, [sp, #84]	@ 0x54
 80074aa:	931b      	str	r3, [sp, #108]	@ 0x6c
 80074ac:	9b06      	ldr	r3, [sp, #24]
 80074ae:	f503 6213 	add.w	r2, r3, #2352	@ 0x930
 80074b2:	ed92 6a00 	vldr	s12, [r2]
 80074b6:	921c      	str	r2, [sp, #112]	@ 0x70
 80074b8:	f603 1134 	addw	r1, r3, #2356	@ 0x934
 80074bc:	f603 1038 	addw	r0, r3, #2360	@ 0x938
 80074c0:	f603 133c 	addw	r3, r3, #2364	@ 0x93c
 80074c4:	edd3 7a00 	vldr	s15, [r3]
 80074c8:	edd1 6a00 	vldr	s13, [r1]
 80074cc:	ed90 7a00 	vldr	s14, [r0]
 80074d0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80074d2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80074d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074da:	911d      	str	r1, [sp, #116]	@ 0x74
 80074dc:	901e      	str	r0, [sp, #120]	@ 0x78
 80074de:	ed8d 6a4e 	vstr	s12, [sp, #312]	@ 0x138
 80074e2:	edcd 6a4f 	vstr	s13, [sp, #316]	@ 0x13c
 80074e6:	ed8d 7a50 	vstr	s14, [sp, #320]	@ 0x140
 80074ea:	edcd 7a51 	vstr	s15, [sp, #324]	@ 0x144
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	d13a      	bne.n	800756a <iNemoEngine_API_Update+0x712>
 80074f4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80074f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fc:	d135      	bne.n	800756a <iNemoEngine_API_Update+0x712>
 80074fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007506:	d130      	bne.n	800756a <iNemoEngine_API_Update+0x712>
 8007508:	eef5 7a40 	vcmp.f32	s15, #0.0
 800750c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007510:	d12b      	bne.n	800756a <iNemoEngine_API_Update+0x712>
 8007512:	9a06      	ldr	r2, [sp, #24]
 8007514:	934e      	str	r3, [sp, #312]	@ 0x138
 8007516:	934f      	str	r3, [sp, #316]	@ 0x13c
 8007518:	9350      	str	r3, [sp, #320]	@ 0x140
 800751a:	4b61      	ldr	r3, [pc, #388]	@ (80076a0 <iNemoEngine_API_Update+0x848>)
 800751c:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 8007520:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007524:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
 8007528:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
 800752c:	9351      	str	r3, [sp, #324]	@ 0x144
 800752e:	2100      	movs	r1, #0
 8007530:	4613      	mov	r3, r2
 8007532:	f882 11ac 	strb.w	r1, [r2, #428]	@ 0x1ac
 8007536:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 800753a:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800753e:	f005 fac7 	bl	800cad0 <memset>
 8007542:	9a06      	ldr	r2, [sp, #24]
 8007544:	4b57      	ldr	r3, [pc, #348]	@ (80076a4 <iNemoEngine_API_Update+0x84c>)
 8007546:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
 800754a:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
 800754e:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
 8007552:	f8c2 324c 	str.w	r3, [r2, #588]	@ 0x24c
 8007556:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
 800755a:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
 800755e:	f8c2 32c4 	str.w	r3, [r2, #708]	@ 0x2c4
 8007562:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
 8007566:	f8c2 3314 	str.w	r3, [r2, #788]	@ 0x314
 800756a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80076a8 <iNemoEngine_API_Update+0x850>
 800756e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8007572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007576:	f100 87e0 	bmi.w	800853a <iNemoEngine_API_Update+0x16e2>
 800757a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800757e:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 8007582:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 8007586:	eeb0 7ae6 	vabs.f32	s14, s13
 800758a:	eef0 6a47 	vmov.f32	s13, s14
 800758e:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8007592:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007596:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800759a:	ed8d 7a21 	vstr	s14, [sp, #132]	@ 0x84
 800759e:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 80075a2:	edd4 6a00 	vldr	s13, [r4]
 80075a6:	ed94 6a01 	vldr	s12, [r4, #4]
 80075aa:	edcd 6a2c 	vstr	s13, [sp, #176]	@ 0xb0
 80075ae:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 80075b2:	4628      	mov	r0, r5
 80075b4:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80075b8:	eea9 7aa9 	vfma.f32	s14, s19, s19
 80075bc:	ee67 6a86 	vmul.f32	s13, s15, s12
 80075c0:	ed8d 6a2d 	vstr	s12, [sp, #180]	@ 0xb4
 80075c4:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 80076a8 <iNemoEngine_API_Update+0x850>
 80075c8:	edcd 6a3e 	vstr	s13, [sp, #248]	@ 0xf8
 80075cc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80075d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d4:	bf54      	ite	pl
 80075d6:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 80075da:	ed9f 9a34 	vldrmi	s18, [pc, #208]	@ 80076ac <iNemoEngine_API_Update+0x854>
 80075de:	ed94 5a02 	vldr	s10, [r4, #8]
 80075e2:	edd7 3a00 	vldr	s7, [r7]
 80075e6:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 80075ea:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 80075ee:	ee83 7a09 	vdiv.f32	s14, s6, s18
 80075f2:	ee65 7a27 	vmul.f32	s15, s10, s15
 80075f6:	ee2a 6a07 	vmul.f32	s12, s20, s14
 80075fa:	eeb0 0a63 	vmov.f32	s0, s7
 80075fe:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007602:	ed8d 6a41 	vstr	s12, [sp, #260]	@ 0x104
 8007606:	ee2a 6a87 	vmul.f32	s12, s21, s14
 800760a:	ee29 7a87 	vmul.f32	s14, s19, s14
 800760e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007612:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 8007616:	eee7 6a87 	vfma.f32	s13, s15, s14
 800761a:	ed8d 7a42 	vstr	s14, [sp, #264]	@ 0x108
 800761e:	edcd 5a3d 	vstr	s11, [sp, #244]	@ 0xf4
 8007622:	ed8d 6a40 	vstr	s12, [sp, #256]	@ 0x100
 8007626:	edcd 6a1a 	vstr	s13, [sp, #104]	@ 0x68
 800762a:	f7fd ffa5 	bl	8005578 <dataDerivative5>
 800762e:	edd8 fa00 	vldr	s31, [r8]
 8007632:	ed8d 0a18 	vstr	s0, [sp, #96]	@ 0x60
 8007636:	4630      	mov	r0, r6
 8007638:	eeb0 0a6f 	vmov.f32	s0, s31
 800763c:	f7fd ff9c 	bl	8005578 <dataDerivative5>
 8007640:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007642:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8007644:	ed93 fa00 	vldr	s30, [r3]
 8007648:	eeb0 ba40 	vmov.f32	s22, s0
 800764c:	eeb0 0a4f 	vmov.f32	s0, s30
 8007650:	f7fd ff92 	bl	8005578 <dataDerivative5>
 8007654:	eec3 7a23 	vdiv.f32	s15, s6, s7
 8007658:	eef0 da40 	vmov.f32	s27, s0
 800765c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8007660:	ee27 8a88 	vmul.f32	s16, s15, s16
 8007664:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8007668:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 800766c:	eeb0 7ae8 	vabs.f32	s14, s17
 8007670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007678:	d52c      	bpl.n	80076d4 <iNemoEngine_API_Update+0x87c>
 800767a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800767e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007686:	f281 8756 	bge.w	8009536 <iNemoEngine_API_Update+0x26de>
 800768a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800768e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8007692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007696:	f303 80bc 	bgt.w	800a812 <iNemoEngine_API_Update+0x39ba>
 800769a:	e00b      	b.n	80076b4 <iNemoEngine_API_Update+0x85c>
 800769c:	3a9d4952 	.word	0x3a9d4952
 80076a0:	bf666666 	.word	0xbf666666
 80076a4:	40a00000 	.word	0x40a00000
 80076a8:	3c23d70a 	.word	0x3c23d70a
 80076ac:	3dcccccd 	.word	0x3dcccccd
 80076b0:	4b000000 	.word	0x4b000000
 80076b4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80076b8:	ee17 0a90 	vmov	r0, s15
 80076bc:	f7f8 ff44 	bl	8000548 <__aeabi_f2d>
 80076c0:	ec41 0b10 	vmov	d0, r0, r1
 80076c4:	f008 ff3c 	bl	8010540 <ceil>
 80076c8:	ec51 0b10 	vmov	r0, r1, d0
 80076cc:	f7f9 fa8c 	bl	8000be8 <__aeabi_d2f>
 80076d0:	ee08 0a90 	vmov	s17, r0
 80076d4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 80076d8:	edcd 8a43 	vstr	s17, [sp, #268]	@ 0x10c
 80076dc:	eeb0 7ac8 	vabs.f32	s14, s16
 80076e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	d51f      	bpl.n	800772a <iNemoEngine_API_Update+0x8d2>
 80076ea:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80076ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f6:	f281 870c 	bge.w	8009512 <iNemoEngine_API_Update+0x26ba>
 80076fa:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80076fe:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8007702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007706:	f303 8080 	bgt.w	800a80a <iNemoEngine_API_Update+0x39b2>
 800770a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800770e:	ee17 0a90 	vmov	r0, s15
 8007712:	f7f8 ff19 	bl	8000548 <__aeabi_f2d>
 8007716:	ec41 0b10 	vmov	d0, r0, r1
 800771a:	f008 ff11 	bl	8010540 <ceil>
 800771e:	ec51 0b10 	vmov	r0, r1, d0
 8007722:	f7f9 fa61 	bl	8000be8 <__aeabi_d2f>
 8007726:	ee08 0a10 	vmov	s16, r0
 800772a:	ed5f 7a1f 	vldr	s15, [pc, #-124]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 800772e:	ed8d 8a44 	vstr	s16, [sp, #272]	@ 0x110
 8007732:	eeb0 7acc 	vabs.f32	s14, s24
 8007736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773e:	d51f      	bpl.n	8007780 <iNemoEngine_API_Update+0x928>
 8007740:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007744:	eeb4 cae7 	vcmpe.f32	s24, s15
 8007748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774c:	f281 86cf 	bge.w	80094ee <iNemoEngine_API_Update+0x2696>
 8007750:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8007754:	eeb4 cac7 	vcmpe.f32	s24, s14
 8007758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775c:	f303 8065 	bgt.w	800a82a <iNemoEngine_API_Update+0x39d2>
 8007760:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8007764:	ee17 0a90 	vmov	r0, s15
 8007768:	f7f8 feee 	bl	8000548 <__aeabi_f2d>
 800776c:	ec41 0b10 	vmov	d0, r0, r1
 8007770:	f008 fee6 	bl	8010540 <ceil>
 8007774:	ec51 0b10 	vmov	r0, r1, d0
 8007778:	f7f9 fa36 	bl	8000be8 <__aeabi_d2f>
 800777c:	ee0c 0a10 	vmov	s24, r0
 8007780:	9b06      	ldr	r3, [sp, #24]
 8007782:	ed8d ca45 	vstr	s24, [sp, #276]	@ 0x114
 8007786:	f893 04b1 	ldrb.w	r0, [r3, #1201]	@ 0x4b1
 800778a:	1e43      	subs	r3, r0, #1
 800778c:	b25b      	sxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	dd18      	ble.n	80077c4 <iNemoEngine_API_Update+0x96c>
 8007792:	9c06      	ldr	r4, [sp, #24]
 8007794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007798:	1e81      	subs	r1, r0, #2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	b2c9      	uxtb	r1, r1
 800779e:	f504 6294 	add.w	r2, r4, #1184	@ 0x4a0
 80077a2:	441a      	add	r2, r3
 80077a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80077a8:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 80077ac:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80077b0:	4423      	add	r3, r4
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	611a      	str	r2, [r3, #16]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	615a      	str	r2, [r3, #20]
 80077be:	3b0c      	subs	r3, #12
 80077c0:	428b      	cmp	r3, r1
 80077c2:	d1f6      	bne.n	80077b2 <iNemoEngine_API_Update+0x95a>
 80077c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80077c8:	edc5 8a00 	vstr	s17, [r5]
 80077cc:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 80077d0:	9a06      	ldr	r2, [sp, #24]
 80077d2:	f202 43bc 	addw	r3, r2, #1212	@ 0x4bc
 80077d6:	ed83 8a00 	vstr	s16, [r3]
 80077da:	f502 6398 	add.w	r3, r2, #1216	@ 0x4c0
 80077de:	ed83 ca00 	vstr	s24, [r3]
 80077e2:	f892 34b0 	ldrb.w	r3, [r2, #1200]	@ 0x4b0
 80077e6:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 80077ea:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 80077ee:	3301      	adds	r3, #1
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	eeb0 7ac8 	vabs.f32	s14, s16
 80077f6:	4298      	cmp	r0, r3
 80077f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077fc:	bf28      	it	cs
 80077fe:	4618      	movcs	r0, r3
 8007800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007804:	ee2a ca28 	vmul.f32	s24, s20, s17
 8007808:	f882 04b0 	strb.w	r0, [r2, #1200]	@ 0x4b0
 800780c:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8007810:	d51f      	bpl.n	8007852 <iNemoEngine_API_Update+0x9fa>
 8007812:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007816:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	f281 87cb 	bge.w	80097b8 <iNemoEngine_API_Update+0x2960>
 8007822:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8007826:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782e:	f303 8000 	bgt.w	800a832 <iNemoEngine_API_Update+0x39da>
 8007832:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007836:	ee17 0a90 	vmov	r0, s15
 800783a:	f7f8 fe85 	bl	8000548 <__aeabi_f2d>
 800783e:	ec41 0b10 	vmov	d0, r0, r1
 8007842:	f008 fe7d 	bl	8010540 <ceil>
 8007846:	ec51 0b10 	vmov	r0, r1, d0
 800784a:	f7f9 f9cd 	bl	8000be8 <__aeabi_d2f>
 800784e:	ee08 0a10 	vmov	s16, r0
 8007852:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 8007856:	ed8d 8a43 	vstr	s16, [sp, #268]	@ 0x10c
 800785a:	eeb0 7acc 	vabs.f32	s14, s24
 800785e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007866:	d51f      	bpl.n	80078a8 <iNemoEngine_API_Update+0xa50>
 8007868:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800786c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8007870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007874:	f281 878e 	bge.w	8009794 <iNemoEngine_API_Update+0x293c>
 8007878:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800787c:	eeb4 cac7 	vcmpe.f32	s24, s14
 8007880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007884:	f302 87cd 	bgt.w	800a822 <iNemoEngine_API_Update+0x39ca>
 8007888:	ee7c 7a67 	vsub.f32	s15, s24, s15
 800788c:	ee17 0a90 	vmov	r0, s15
 8007890:	f7f8 fe5a 	bl	8000548 <__aeabi_f2d>
 8007894:	ec41 0b10 	vmov	d0, r0, r1
 8007898:	f008 fe52 	bl	8010540 <ceil>
 800789c:	ec51 0b10 	vmov	r0, r1, d0
 80078a0:	f7f9 f9a2 	bl	8000be8 <__aeabi_d2f>
 80078a4:	ee0c 0a10 	vmov	s24, r0
 80078a8:	ed5f 7a7f 	vldr	s15, [pc, #-508]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 80078ac:	ed8d ca44 	vstr	s24, [sp, #272]	@ 0x110
 80078b0:	eeb0 7ae8 	vabs.f32	s14, s17
 80078b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078bc:	d51f      	bpl.n	80078fe <iNemoEngine_API_Update+0xaa6>
 80078be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80078c2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80078c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ca:	f281 8751 	bge.w	8009770 <iNemoEngine_API_Update+0x2918>
 80078ce:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80078d2:	eef4 8ac7 	vcmpe.f32	s17, s14
 80078d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078da:	f302 878e 	bgt.w	800a7fa <iNemoEngine_API_Update+0x39a2>
 80078de:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80078e2:	ee17 0a90 	vmov	r0, s15
 80078e6:	f7f8 fe2f 	bl	8000548 <__aeabi_f2d>
 80078ea:	ec41 0b10 	vmov	d0, r0, r1
 80078ee:	f008 fe27 	bl	8010540 <ceil>
 80078f2:	ec51 0b10 	vmov	r0, r1, d0
 80078f6:	f7f9 f977 	bl	8000be8 <__aeabi_d2f>
 80078fa:	ee08 0a90 	vmov	s17, r0
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	edcd 8a45 	vstr	s17, [sp, #276]	@ 0x114
 8007904:	f893 0621 	ldrb.w	r0, [r3, #1569]	@ 0x621
 8007908:	1e43      	subs	r3, r0, #1
 800790a:	b25b      	sxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd18      	ble.n	8007942 <iNemoEngine_API_Update+0xaea>
 8007910:	9c06      	ldr	r4, [sp, #24]
 8007912:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007916:	1e81      	subs	r1, r0, #2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	b2c9      	uxtb	r1, r1
 800791c:	f504 62c2 	add.w	r2, r4, #1552	@ 0x610
 8007920:	441a      	add	r2, r3
 8007922:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007926:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 800792a:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 800792e:	4423      	add	r3, r4
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	60da      	str	r2, [r3, #12]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	611a      	str	r2, [r3, #16]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	615a      	str	r2, [r3, #20]
 800793c:	3b0c      	subs	r3, #12
 800793e:	4299      	cmp	r1, r3
 8007940:	d1f6      	bne.n	8007930 <iNemoEngine_API_Update+0xad8>
 8007942:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007946:	ed86 8a00 	vstr	s16, [r6]
 800794a:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 800794e:	9a06      	ldr	r2, [sp, #24]
 8007950:	f202 632c 	addw	r3, r2, #1580	@ 0x62c
 8007954:	ed83 ca00 	vstr	s24, [r3]
 8007958:	f502 63c6 	add.w	r3, r2, #1584	@ 0x630
 800795c:	edc3 8a00 	vstr	s17, [r3]
 8007960:	f892 3620 	ldrb.w	r3, [r2, #1568]	@ 0x620
 8007964:	ed5f 7aae 	vldr	s15, [pc, #-696]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 8007968:	ee68 8a0e 	vmul.f32	s17, s16, s28
 800796c:	3301      	adds	r3, #1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	eeb0 7ae8 	vabs.f32	s14, s17
 8007974:	4298      	cmp	r0, r3
 8007976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800797a:	bf28      	it	cs
 800797c:	4618      	movcs	r0, r3
 800797e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007982:	ee28 ca2e 	vmul.f32	s24, s16, s29
 8007986:	f882 0620 	strb.w	r0, [r2, #1568]	@ 0x620
 800798a:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800798e:	d51f      	bpl.n	80079d0 <iNemoEngine_API_Update+0xb78>
 8007990:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007994:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799c:	f281 86d6 	bge.w	800974c <iNemoEngine_API_Update+0x28f4>
 80079a0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80079a4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80079a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ac:	f302 8745 	bgt.w	800a83a <iNemoEngine_API_Update+0x39e2>
 80079b0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80079b4:	ee17 0a90 	vmov	r0, s15
 80079b8:	f7f8 fdc6 	bl	8000548 <__aeabi_f2d>
 80079bc:	ec41 0b10 	vmov	d0, r0, r1
 80079c0:	f008 fdbe 	bl	8010540 <ceil>
 80079c4:	ec51 0b10 	vmov	r0, r1, d0
 80079c8:	f7f9 f90e 	bl	8000be8 <__aeabi_d2f>
 80079cc:	ee08 0a90 	vmov	s17, r0
 80079d0:	ed5f 7ac9 	vldr	s15, [pc, #-804]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 80079d4:	edcd 8a43 	vstr	s17, [sp, #268]	@ 0x10c
 80079d8:	eeb0 7acc 	vabs.f32	s14, s24
 80079dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e4:	d51f      	bpl.n	8007a26 <iNemoEngine_API_Update+0xbce>
 80079e6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80079ea:	eeb4 cae7 	vcmpe.f32	s24, s15
 80079ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f2:	f281 871d 	bge.w	8009830 <iNemoEngine_API_Update+0x29d8>
 80079f6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80079fa:	eeb4 cac7 	vcmpe.f32	s24, s14
 80079fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a02:	f302 86fe 	bgt.w	800a802 <iNemoEngine_API_Update+0x39aa>
 8007a06:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8007a0a:	ee17 0a90 	vmov	r0, s15
 8007a0e:	f7f8 fd9b 	bl	8000548 <__aeabi_f2d>
 8007a12:	ec41 0b10 	vmov	d0, r0, r1
 8007a16:	f008 fd93 	bl	8010540 <ceil>
 8007a1a:	ec51 0b10 	vmov	r0, r1, d0
 8007a1e:	f7f9 f8e3 	bl	8000be8 <__aeabi_d2f>
 8007a22:	ee0c 0a10 	vmov	s24, r0
 8007a26:	ed5f 7ade 	vldr	s15, [pc, #-888]	@ 80076b0 <iNemoEngine_API_Update+0x858>
 8007a2a:	ed8d ca44 	vstr	s24, [sp, #272]	@ 0x110
 8007a2e:	eeb0 7ac8 	vabs.f32	s14, s16
 8007a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3a:	d51f      	bpl.n	8007a7c <iNemoEngine_API_Update+0xc24>
 8007a3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007a40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a48:	f281 86c8 	bge.w	80097dc <iNemoEngine_API_Update+0x2984>
 8007a4c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8007a50:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	f302 86df 	bgt.w	800a81a <iNemoEngine_API_Update+0x39c2>
 8007a5c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007a60:	ee17 0a90 	vmov	r0, s15
 8007a64:	f7f8 fd70 	bl	8000548 <__aeabi_f2d>
 8007a68:	ec41 0b10 	vmov	d0, r0, r1
 8007a6c:	f008 fd68 	bl	8010540 <ceil>
 8007a70:	ec51 0b10 	vmov	r0, r1, d0
 8007a74:	f7f9 f8b8 	bl	8000be8 <__aeabi_d2f>
 8007a78:	ee08 0a10 	vmov	s16, r0
 8007a7c:	9b06      	ldr	r3, [sp, #24]
 8007a7e:	ed8d 8a45 	vstr	s16, [sp, #276]	@ 0x114
 8007a82:	f893 0791 	ldrb.w	r0, [r3, #1937]	@ 0x791
 8007a86:	1e43      	subs	r3, r0, #1
 8007a88:	b25b      	sxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd18      	ble.n	8007ac0 <iNemoEngine_API_Update+0xc68>
 8007a8e:	9c06      	ldr	r4, [sp, #24]
 8007a90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007a94:	1e81      	subs	r1, r0, #2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	b2c9      	uxtb	r1, r1
 8007a9a:	f504 62f0 	add.w	r2, r4, #1920	@ 0x780
 8007a9e:	441a      	add	r2, r3
 8007aa0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007aa4:	f203 738c 	addw	r3, r3, #1932	@ 0x78c
 8007aa8:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 8007aac:	4423      	add	r3, r4
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	60da      	str	r2, [r3, #12]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	611a      	str	r2, [r3, #16]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	615a      	str	r2, [r3, #20]
 8007aba:	3b0c      	subs	r3, #12
 8007abc:	428b      	cmp	r3, r1
 8007abe:	d1f6      	bne.n	8007aae <iNemoEngine_API_Update+0xc56>
 8007ac0:	9c06      	ldr	r4, [sp, #24]
 8007ac2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ac4:	f204 729c 	addw	r2, r4, #1948	@ 0x79c
 8007ac8:	edc3 8a00 	vstr	s17, [r3]
 8007acc:	922e      	str	r2, [sp, #184]	@ 0xb8
 8007ace:	ed82 ca00 	vstr	s24, [r2]
 8007ad2:	f504 62f4 	add.w	r2, r4, #1952	@ 0x7a0
 8007ad6:	ed82 8a00 	vstr	s16, [r2]
 8007ada:	f894 3790 	ldrb.w	r3, [r4, #1936]	@ 0x790
 8007ade:	922f      	str	r2, [sp, #188]	@ 0xbc
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	4298      	cmp	r0, r3
 8007ae6:	bf28      	it	cs
 8007ae8:	4618      	movcs	r0, r3
 8007aea:	f884 0790 	strb.w	r0, [r4, #1936]	@ 0x790
 8007aee:	aa68      	add	r2, sp, #416	@ 0x1a0
 8007af0:	a93d      	add	r1, sp, #244	@ 0xf4
 8007af2:	a840      	add	r0, sp, #256	@ 0x100
 8007af4:	f7fd fe26 	bl	8005744 <getRotationMatrix>
 8007af8:	4623      	mov	r3, r4
 8007afa:	f504 7247 	add.w	r2, r4, #796	@ 0x31c
 8007afe:	9229      	str	r2, [sp, #164]	@ 0xa4
 8007b00:	4614      	mov	r4, r2
 8007b02:	aeae      	add	r6, sp, #696	@ 0x2b8
 8007b04:	f503 774f 	add.w	r7, r3, #828	@ 0x33c
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	6861      	ldr	r1, [r4, #4]
 8007b0c:	68a2      	ldr	r2, [r4, #8]
 8007b0e:	68e3      	ldr	r3, [r4, #12]
 8007b10:	4635      	mov	r5, r6
 8007b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b14:	3410      	adds	r4, #16
 8007b16:	42bc      	cmp	r4, r7
 8007b18:	462e      	mov	r6, r5
 8007b1a:	d1f5      	bne.n	8007b08 <iNemoEngine_API_Update+0xcb0>
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	6028      	str	r0, [r5, #0]
 8007b20:	9b06      	ldr	r3, [sp, #24]
 8007b22:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8007b26:	ed93 7ac8 	vldr	s14, [r3, #800]	@ 0x320
 8007b2a:	eef0 7ae7 	vabs.f32	s15, s15
 8007b2e:	eeb0 7ac7 	vabs.f32	s14, s14
 8007b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3a:	f140 8543 	bpl.w	80085c4 <iNemoEngine_API_Update+0x176c>
 8007b3e:	2604      	movs	r6, #4
 8007b40:	2400      	movs	r4, #0
 8007b42:	eef0 7a47 	vmov.f32	s15, s14
 8007b46:	f04f 0c07 	mov.w	ip, #7
 8007b4a:	f04f 0e06 	mov.w	lr, #6
 8007b4e:	2103      	movs	r1, #3
 8007b50:	4630      	mov	r0, r6
 8007b52:	4623      	mov	r3, r4
 8007b54:	2701      	movs	r7, #1
 8007b56:	9a06      	ldr	r2, [sp, #24]
 8007b58:	ed92 7ac9 	vldr	s14, [r2, #804]	@ 0x324
 8007b5c:	eeb0 7ac7 	vabs.f32	s14, s14
 8007b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b68:	f340 8525 	ble.w	80085b6 <iNemoEngine_API_Update+0x175e>
 8007b6c:	f04f 0c08 	mov.w	ip, #8
 8007b70:	2104      	movs	r1, #4
 8007b72:	f04f 0906 	mov.w	r9, #6
 8007b76:	f04f 0e07 	mov.w	lr, #7
 8007b7a:	f04f 0803 	mov.w	r8, #3
 8007b7e:	2605      	movs	r6, #5
 8007b80:	4660      	mov	r0, ip
 8007b82:	460c      	mov	r4, r1
 8007b84:	2200      	movs	r2, #0
 8007b86:	2301      	movs	r3, #1
 8007b88:	2702      	movs	r7, #2
 8007b8a:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8007b8c:	442c      	add	r4, r5
 8007b8e:	4428      	add	r0, r5
 8007b90:	ed90 7a00 	vldr	s14, [r0]
 8007b94:	edd4 6a00 	vldr	s13, [r4]
 8007b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9c:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8007b9e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007ba2:	acae      	add	r4, sp, #696	@ 0x2b8
 8007ba4:	adae      	add	r5, sp, #696	@ 0x2b8
 8007ba6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007baa:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8007bae:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8007bb2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8007bb6:	edc0 7a00 	vstr	s15, [r0]
 8007bba:	edd5 7a00 	vldr	s15, [r5]
 8007bbe:	ed94 7a00 	vldr	s14, [r4]
 8007bc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007bc6:	edc4 6a00 	vstr	s13, [r4]
 8007bca:	ed90 6a00 	vldr	s12, [r0]
 8007bce:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8007bd0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8007bd4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8007bd8:	ed90 7a00 	vldr	s14, [r0]
 8007bdc:	edd5 7a00 	vldr	s15, [r5]
 8007be0:	eee6 7a47 	vfms.f32	s15, s12, s14
 8007be4:	00b4      	lsls	r4, r6, #2
 8007be6:	9403      	str	r4, [sp, #12]
 8007be8:	ea4f 048c 	mov.w	r4, ip, lsl #2
 8007bec:	edc5 7a00 	vstr	s15, [r5]
 8007bf0:	ed90 7a00 	vldr	s14, [r0]
 8007bf4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8007bf6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 8007bfa:	edd0 7a00 	vldr	s15, [r0]
 8007bfe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8007c02:	4626      	mov	r6, r4
 8007c04:	acae      	add	r4, sp, #696	@ 0x2b8
 8007c06:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 8007c0a:	edc0 7a00 	vstr	s15, [r0]
 8007c0e:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8007c10:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8007c14:	edd0 5a00 	vldr	s11, [r0]
 8007c18:	ed94 7a00 	vldr	s14, [r4]
 8007c1c:	eea6 7a65 	vfms.f32	s14, s12, s11
 8007c20:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007c24:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8007c28:	eef0 7ae7 	vabs.f32	s15, s15
 8007c2c:	ed84 7a00 	vstr	s14, [r4]
 8007c30:	ed90 6a00 	vldr	s12, [r0]
 8007c34:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8007c36:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8007c3a:	ed90 7a00 	vldr	s14, [r0]
 8007c3e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8007c42:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007c46:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8007c4a:	ed80 7a00 	vstr	s14, [r0]
 8007c4e:	ed95 7a00 	vldr	s14, [r5]
 8007c52:	eeb0 7ac7 	vabs.f32	s14, s14
 8007c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	ea4f 0581 	mov.w	r5, r1, lsl #2
 8007c62:	dd0b      	ble.n	8007c7c <iNemoEngine_API_Update+0xe24>
 8007c64:	4618      	mov	r0, r3
 8007c66:	4645      	mov	r5, r8
 8007c68:	4613      	mov	r3, r2
 8007c6a:	464c      	mov	r4, r9
 8007c6c:	46d4      	mov	ip, sl
 8007c6e:	4602      	mov	r2, r0
 8007c70:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8007c74:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8007c78:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8007c7c:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8007c7e:	eb01 0008 	add.w	r0, r1, r8
 8007c82:	440d      	add	r5, r1
 8007c84:	ed90 7a00 	vldr	s14, [r0]
 8007c88:	edd5 7a00 	vldr	s15, [r5]
 8007c8c:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8007c90:	440c      	add	r4, r1
 8007c92:	eb01 0809 	add.w	r8, r1, r9
 8007c96:	440e      	add	r6, r1
 8007c98:	46b6      	mov	lr, r6
 8007c9a:	460e      	mov	r6, r1
 8007c9c:	9903      	ldr	r1, [sp, #12]
 8007c9e:	4431      	add	r1, r6
 8007ca0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8007ca4:	ed80 4a00 	vstr	s8, [r0]
 8007ca8:	ed94 7a00 	vldr	s14, [r4]
 8007cac:	edd8 7a00 	vldr	s15, [r8]
 8007cb0:	eee4 7a47 	vfms.f32	s15, s8, s14
 8007cb4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8007cb6:	edc8 7a00 	vstr	s15, [r8]
 8007cba:	edd1 2a00 	vldr	s5, [r1]
 8007cbe:	ed95 7a00 	vldr	s14, [r5]
 8007cc2:	ed94 1a00 	vldr	s2, [r4]
 8007cc6:	edde 1a00 	vldr	s3, [lr]
 8007cca:	f50b 61b2 	add.w	r1, fp, #1424	@ 0x590
 8007cce:	4469      	add	r1, sp
 8007cd0:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 8007cd4:	ee83 2a87 	vdiv.f32	s4, s7, s14
 8007cd8:	ed91 7a00 	vldr	s14, [r1]
 8007cdc:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8007cde:	448b      	add	fp, r1
 8007ce0:	f50c 61b2 	add.w	r1, ip, #1424	@ 0x590
 8007ce4:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 8007ce8:	4469      	add	r1, sp
 8007cea:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 8007cee:	4484      	add	ip, r0
 8007cf0:	4450      	add	r0, sl
 8007cf2:	edd1 6a00 	vldr	s13, [r1]
 8007cf6:	eddb 7a00 	vldr	s15, [fp]
 8007cfa:	ed90 0a00 	vldr	s0, [r0]
 8007cfe:	f50a 61b2 	add.w	r1, sl, #1424	@ 0x590
 8007d02:	4469      	add	r1, sp
 8007d04:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 8007d08:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 8007d0c:	edd1 4a00 	vldr	s9, [r1]
 8007d10:	eddc 7a00 	vldr	s15, [ip]
 8007d14:	eee0 4a47 	vfms.f32	s9, s0, s14
 8007d18:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 8007d1c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8007d20:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8007d24:	4601      	mov	r1, r0
 8007d26:	f5a1 7176 	sub.w	r1, r1, #984	@ 0x3d8
 8007d2a:	f5a0 7079 	sub.w	r0, r0, #996	@ 0x3e4
 8007d2e:	eee4 4a66 	vfms.f32	s9, s8, s13
 8007d32:	ed90 5a00 	vldr	s10, [r0]
 8007d36:	ee60 4aa4 	vmul.f32	s9, s1, s9
 8007d3a:	f50d 60b2 	add.w	r0, sp, #1424	@ 0x590
 8007d3e:	eee1 6a64 	vfms.f32	s13, s2, s9
 8007d42:	eea1 7ae4 	vfms.f32	s14, s3, s9
 8007d46:	ee62 8a26 	vmul.f32	s17, s4, s13
 8007d4a:	edd1 6a00 	vldr	s13, [r1]
 8007d4e:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 8007d52:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007d56:	460b      	mov	r3, r1
 8007d58:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8007d5c:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 8007d60:	edd1 5a00 	vldr	s11, [r1]
 8007d64:	ed93 8a00 	vldr	s16, [r3]
 8007d68:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8007d6c:	f5a1 7279 	sub.w	r2, r1, #996	@ 0x3e4
 8007d70:	f5a1 7376 	sub.w	r3, r1, #984	@ 0x3d8
 8007d74:	eee7 5ac5 	vfms.f32	s11, s15, s10
 8007d78:	eea6 8ae7 	vfms.f32	s16, s13, s15
 8007d7c:	ed92 6a00 	vldr	s12, [r2]
 8007d80:	edd3 7a00 	vldr	s15, [r3]
 8007d84:	eea0 6a45 	vfms.f32	s12, s0, s10
 8007d88:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007d8c:	eea4 6a65 	vfms.f32	s12, s8, s11
 8007d90:	eee4 7a48 	vfms.f32	s15, s8, s16
 8007d94:	ee20 6a86 	vmul.f32	s12, s1, s12
 8007d98:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8007d9c:	eee1 5a46 	vfms.f32	s11, s2, s12
 8007da0:	eea7 8ac1 	vfms.f32	s16, s15, s2
 8007da4:	eea1 5ac6 	vfms.f32	s10, s3, s12
 8007da8:	eee7 6ae1 	vfms.f32	s13, s15, s3
 8007dac:	ee62 5a25 	vmul.f32	s11, s4, s11
 8007db0:	ee28 2a02 	vmul.f32	s4, s16, s4
 8007db4:	eea2 7ae8 	vfms.f32	s14, s5, s17
 8007db8:	eee2 6a62 	vfms.f32	s13, s4, s5
 8007dbc:	eea2 5ae5 	vfms.f32	s10, s5, s11
 8007dc0:	ee23 7a07 	vmul.f32	s14, s6, s14
 8007dc4:	ee23 5a05 	vmul.f32	s10, s6, s10
 8007dc8:	ee26 3a83 	vmul.f32	s6, s13, s6
 8007dcc:	ee77 6aa5 	vadd.f32	s13, s15, s11
 8007dd0:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 8007dd4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007dd8:	ee36 6a42 	vsub.f32	s12, s12, s4
 8007ddc:	eef4 6ac4 	vcmpe.f32	s13, s8
 8007de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de4:	bfc8      	it	gt
 8007de6:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 8007dea:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8007dee:	bfcc      	ite	gt
 8007df0:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 8007df4:	ed9f 4ad7 	vldrle	s8, [pc, #860]	@ 8008154 <iNemoEngine_API_Update+0x12fc>
 8007df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfc:	f100 8411 	bmi.w	8008622 <iNemoEngine_API_Update+0x17ca>
 8007e00:	bfd8      	it	le
 8007e02:	ee24 4a06 	vmulle.f32	s8, s8, s12
 8007e06:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007e0a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007e0e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007e12:	ee24 6a06 	vmul.f32	s12, s8, s12
 8007e16:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 8007e1a:	eef4 6ac4 	vcmpe.f32	s13, s8
 8007e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e22:	bf88      	it	hi
 8007e24:	eeb7 4a00 	vmovhi.f32	s8, #112	@ 0x3f800000  1.0
 8007e28:	ee33 3a64 	vsub.f32	s6, s6, s9
 8007e2c:	bf88      	it	hi
 8007e2e:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 8007e32:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8007e36:	bf8c      	ite	hi
 8007e38:	eef1 6ac4 	vsqrthi.f32	s13, s8
 8007e3c:	eddf 6ac5 	vldrls	s13, [pc, #788]	@ 8008154 <iNemoEngine_API_Update+0x12fc>
 8007e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e44:	f100 83ea 	bmi.w	800861c <iNemoEngine_API_Update+0x17c4>
 8007e48:	bfd8      	it	le
 8007e4a:	ee66 6a83 	vmulle.f32	s13, s13, s6
 8007e4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007e52:	ee38 5ac5 	vsub.f32	s10, s17, s10
 8007e56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e5e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007e62:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6e:	bf84      	itt	hi
 8007e70:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 8007e74:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 8007e78:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8007e7c:	bf8c      	ite	hi
 8007e7e:	eef1 7ac7 	vsqrthi.f32	s15, s14
 8007e82:	eddf 7ab4 	vldrls	s15, [pc, #720]	@ 8008154 <iNemoEngine_API_Update+0x12fc>
 8007e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8a:	f100 83ce 	bmi.w	800862a <iNemoEngine_API_Update+0x17d2>
 8007e8e:	bfd8      	it	le
 8007e90:	ee67 7a85 	vmulle.f32	s15, s15, s10
 8007e94:	9b06      	ldr	r3, [sp, #24]
 8007e96:	f893 2341 	ldrb.w	r2, [r3, #833]	@ 0x341
 8007e9a:	1e53      	subs	r3, r2, #1
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ea8:	dd1d      	ble.n	8007ee6 <iNemoEngine_API_Update+0x108e>
 8007eaa:	9806      	ldr	r0, [sp, #24]
 8007eac:	3a02      	subs	r2, #2
 8007eae:	b2d1      	uxtb	r1, r2
 8007eb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007eb4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007eb8:	f1a0 010c 	sub.w	r1, r0, #12
 8007ebc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007ec0:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8007ec4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ec8:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8007ecc:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
 8007ed0:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8007ed4:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 8007ed8:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 8007edc:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
 8007ee0:	3b0c      	subs	r3, #12
 8007ee2:	428b      	cmp	r3, r1
 8007ee4:	d1f0      	bne.n	8007ec8 <iNemoEngine_API_Update+0x1070>
 8007ee6:	ed9d 7a07 	vldr	s14, [sp, #28]
 8007eea:	9b06      	ldr	r3, [sp, #24]
 8007eec:	9310      	str	r3, [sp, #64]	@ 0x40
 8007eee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007ef2:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8007ef6:	aa3d      	add	r2, sp, #244	@ 0xf4
 8007ef8:	922b      	str	r2, [sp, #172]	@ 0xac
 8007efa:	9212      	str	r2, [sp, #72]	@ 0x48
 8007efc:	f50d 7be2 	add.w	fp, sp, #452	@ 0x1c4
 8007f00:	f50d 7af4 	add.w	sl, sp, #488	@ 0x1e8
 8007f04:	ee36 6a06 	vadd.f32	s12, s12, s12
 8007f08:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8007f0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007f10:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007f14:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f1c:	ed83 6ad2 	vstr	s12, [r3, #840]	@ 0x348
 8007f20:	edc3 6ad3 	vstr	s13, [r3, #844]	@ 0x34c
 8007f24:	edc3 7ad4 	vstr	s15, [r3, #848]	@ 0x350
 8007f28:	2300      	movs	r3, #0
 8007f2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f2c:	f20d 13c3 	addw	r3, sp, #451	@ 0x1c3
 8007f30:	f1c3 0301 	rsb	r3, r3, #1
 8007f34:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007f36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007f3a:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f40:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8007f42:	f20d 13c3 	addw	r3, sp, #451	@ 0x1c3
 8007f46:	18e0      	adds	r0, r4, r3
 8007f48:	f803 0f01 	strb.w	r0, [r3, #1]!
 8007f4c:	f8d2 0348 	ldr.w	r0, [r2, #840]	@ 0x348
 8007f50:	f841 0b04 	str.w	r0, [r1], #4
 8007f54:	f20d 10e1 	addw	r0, sp, #481	@ 0x1e1
 8007f58:	4283      	cmp	r3, r0
 8007f5a:	f102 020c 	add.w	r2, r2, #12
 8007f5e:	d1f2      	bne.n	8007f46 <iNemoEngine_API_Update+0x10ee>
 8007f60:	ed9d 7aae 	vldr	s14, [sp, #696]	@ 0x2b8
 8007f64:	eddd 7aaf 	vldr	s15, [sp, #700]	@ 0x2bc
 8007f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f6c:	ed9d 7ab0 	vldr	s14, [sp, #704]	@ 0x2c0
 8007f70:	eddd 7ab1 	vldr	s15, [sp, #708]	@ 0x2c4
 8007f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f78:	bf88      	it	hi
 8007f7a:	f44f 7381 	movhi.w	r3, #258	@ 0x102
 8007f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f82:	ed9d 7ab2 	vldr	s14, [sp, #712]	@ 0x2c8
 8007f86:	eddd 7ab3 	vldr	s15, [sp, #716]	@ 0x2cc
 8007f8a:	bf88      	it	hi
 8007f8c:	f8ab 3000 	strhhi.w	r3, [fp]
 8007f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f94:	bf88      	it	hi
 8007f96:	f44f 7341 	movhi.w	r3, #772	@ 0x304
 8007f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f9e:	ed9d 7ab4 	vldr	s14, [sp, #720]	@ 0x2d0
 8007fa2:	eddd 7ab5 	vldr	s15, [sp, #724]	@ 0x2d4
 8007fa6:	bf88      	it	hi
 8007fa8:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 8007fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb0:	bf88      	it	hi
 8007fb2:	f240 5306 	movwhi	r3, #1286	@ 0x506
 8007fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fba:	ed9d 7ab6 	vldr	s14, [sp, #728]	@ 0x2d8
 8007fbe:	eddd 7ab7 	vldr	s15, [sp, #732]	@ 0x2dc
 8007fc2:	bf88      	it	hi
 8007fc4:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 8007fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fcc:	bf88      	it	hi
 8007fce:	f44f 63e1 	movhi.w	r3, #1800	@ 0x708
 8007fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fd6:	ed9d 7ab8 	vldr	s14, [sp, #736]	@ 0x2e0
 8007fda:	eddd 7ab9 	vldr	s15, [sp, #740]	@ 0x2e4
 8007fde:	bf88      	it	hi
 8007fe0:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8007fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe8:	bf88      	it	hi
 8007fea:	f640 130a 	movwhi	r3, #2314	@ 0x90a
 8007fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ff2:	ed9d 7aba 	vldr	s14, [sp, #744]	@ 0x2e8
 8007ff6:	eddd 7abb 	vldr	s15, [sp, #748]	@ 0x2ec
 8007ffa:	bf88      	it	hi
 8007ffc:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8008000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008004:	bf88      	it	hi
 8008006:	f640 330c 	movwhi	r3, #2828	@ 0xb0c
 800800a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800800e:	ed9d 7abc 	vldr	s14, [sp, #752]	@ 0x2f0
 8008012:	eddd 7abd 	vldr	s15, [sp, #756]	@ 0x2f4
 8008016:	bf88      	it	hi
 8008018:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 800801c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008020:	bf88      	it	hi
 8008022:	f640 530e 	movwhi	r3, #3342	@ 0xd0e
 8008026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800802a:	ed9d 7abe 	vldr	s14, [sp, #760]	@ 0x2f8
 800802e:	eddd 7abf 	vldr	s15, [sp, #764]	@ 0x2fc
 8008032:	bf88      	it	hi
 8008034:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8008038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803c:	bf88      	it	hi
 800803e:	f44f 6371 	movhi.w	r3, #3856	@ 0xf10
 8008042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008046:	ed9d 7ac0 	vldr	s14, [sp, #768]	@ 0x300
 800804a:	eddd 7ac1 	vldr	s15, [sp, #772]	@ 0x304
 800804e:	bf88      	it	hi
 8008050:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8008054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008058:	bf88      	it	hi
 800805a:	f241 1312 	movwhi	r3, #4370	@ 0x1112
 800805e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008062:	ed9d 7ac2 	vldr	s14, [sp, #776]	@ 0x308
 8008066:	eddd 7ac3 	vldr	s15, [sp, #780]	@ 0x30c
 800806a:	bf88      	it	hi
 800806c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8008070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008074:	bf88      	it	hi
 8008076:	f241 3314 	movwhi	r3, #4884	@ 0x1314
 800807a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800807e:	bf88      	it	hi
 8008080:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8008084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008088:	bf84      	itt	hi
 800808a:	f241 5316 	movwhi	r3, #5398	@ 0x1516
 800808e:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8008092:	ed9d 7ac4 	vldr	s14, [sp, #784]	@ 0x310
 8008096:	eddd 7ac5 	vldr	s15, [sp, #788]	@ 0x314
 800809a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800809e:	ed9d 7ac6 	vldr	s14, [sp, #792]	@ 0x318
 80080a2:	eddd 7ac7 	vldr	s15, [sp, #796]	@ 0x31c
 80080a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080aa:	bf88      	it	hi
 80080ac:	f241 7318 	movwhi	r3, #5912	@ 0x1718
 80080b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080b4:	ed9d 7ac8 	vldr	s14, [sp, #800]	@ 0x320
 80080b8:	eddd 7ac9 	vldr	s15, [sp, #804]	@ 0x324
 80080bc:	bf88      	it	hi
 80080be:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 80080c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c6:	bf88      	it	hi
 80080c8:	f641 131a 	movwhi	r3, #6426	@ 0x191a
 80080cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080d0:	ed9d 7aca 	vldr	s14, [sp, #808]	@ 0x328
 80080d4:	eddd 7acb 	vldr	s15, [sp, #812]	@ 0x32c
 80080d8:	bf88      	it	hi
 80080da:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 80080de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e2:	bf88      	it	hi
 80080e4:	f641 331c 	movwhi	r3, #6940	@ 0x1b1c
 80080e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080ec:	bf88      	it	hi
 80080ee:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 80080f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f6:	bf84      	itt	hi
 80080f8:	f641 531e 	movwhi	r3, #7454	@ 0x1d1e
 80080fc:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8008100:	221e      	movs	r2, #30
 8008102:	2101      	movs	r1, #1
 8008104:	4650      	mov	r0, sl
 8008106:	f004 fce3 	bl	800cad0 <memset>
 800810a:	2304      	movs	r3, #4
 800810c:	930c      	str	r3, [sp, #48]	@ 0x30
 800810e:	2302      	movs	r3, #2
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	9a07      	ldr	r2, [sp, #28]
 8008114:	920a      	str	r2, [sp, #40]	@ 0x28
 8008116:	4613      	mov	r3, r2
 8008118:	0052      	lsls	r2, r2, #1
 800811a:	9207      	str	r2, [sp, #28]
 800811c:	f103 0901 	add.w	r9, r3, #1
 8008120:	f04f 0801 	mov.w	r8, #1
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	f8cd 800c 	str.w	r8, [sp, #12]
 800812a:	4443      	add	r3, r8
 800812c:	2b1f      	cmp	r3, #31
 800812e:	bfa8      	it	ge
 8008130:	231f      	movge	r3, #31
 8008132:	4642      	mov	r2, r8
 8008134:	1a9f      	subs	r7, r3, r2
 8008136:	2f00      	cmp	r7, #0
 8008138:	4698      	mov	r8, r3
 800813a:	f109 35ff 	add.w	r5, r9, #4294967295
 800813e:	dd54      	ble.n	80081ea <iNemoEngine_API_Update+0x1392>
 8008140:	f108 33ff 	add.w	r3, r8, #4294967295
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	f1a8 0302 	sub.w	r3, r8, #2
 800814a:	4616      	mov	r6, r2
 800814c:	2400      	movs	r4, #0
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	e00f      	b.n	8008172 <iNemoEngine_API_Update+0x131a>
 8008152:	bf00      	nop
 8008154:	00000000 	.word	0x00000000
 8008158:	3f333333 	.word	0x3f333333
 800815c:	3f4ccccd 	.word	0x3f4ccccd
 8008160:	45f0      	cmp	r8, lr
 8008162:	f80a 2004 	strb.w	r2, [sl, r4]
 8008166:	f000 81f6 	beq.w	8008556 <iNemoEngine_API_Update+0x16fe>
 800816a:	4665      	mov	r5, ip
 800816c:	3401      	adds	r4, #1
 800816e:	42a7      	cmp	r7, r4
 8008170:	dd34      	ble.n	80081dc <iNemoEngine_API_Update+0x1384>
 8008172:	1e71      	subs	r1, r6, #1
 8008174:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8008176:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 800817a:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 800817e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008182:	ed10 7a01 	vldr	s14, [r0, #-4]
 8008186:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8008188:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800818c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8008190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008198:	f105 0e02 	add.w	lr, r5, #2
 800819c:	f105 0c01 	add.w	ip, r5, #1
 80081a0:	d8de      	bhi.n	8008160 <iNemoEngine_API_Update+0x1308>
 80081a2:	3601      	adds	r6, #1
 80081a4:	454e      	cmp	r6, r9
 80081a6:	f80a 3004 	strb.w	r3, [sl, r4]
 80081aa:	d1df      	bne.n	800816c <iNemoEngine_API_Update+0x1314>
 80081ac:	1c6b      	adds	r3, r5, #1
 80081ae:	9a04      	ldr	r2, [sp, #16]
 80081b0:	9308      	str	r3, [sp, #32]
 80081b2:	1c60      	adds	r0, r4, #1
 80081b4:	4598      	cmp	r8, r3
 80081b6:	eba2 0205 	sub.w	r2, r2, r5
 80081ba:	4450      	add	r0, sl
 80081bc:	ddd6      	ble.n	800816c <iNemoEngine_API_Update+0x1314>
 80081be:	eb0b 0105 	add.w	r1, fp, r5
 80081c2:	f004 fd04 	bl	800cbce <memcpy>
 80081c6:	9a04      	ldr	r2, [sp, #16]
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	4414      	add	r4, r2
 80081cc:	1b64      	subs	r4, r4, r5
 80081ce:	1b5a      	subs	r2, r3, r5
 80081d0:	3401      	adds	r4, #1
 80081d2:	9b08      	ldr	r3, [sp, #32]
 80081d4:	42a7      	cmp	r7, r4
 80081d6:	eb02 0503 	add.w	r5, r2, r3
 80081da:	dcca      	bgt.n	8008172 <iNemoEngine_API_Update+0x131a>
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	1e58      	subs	r0, r3, #1
 80081e0:	463a      	mov	r2, r7
 80081e2:	4458      	add	r0, fp
 80081e4:	4651      	mov	r1, sl
 80081e6:	f004 fcf2 	bl	800cbce <memcpy>
 80081ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ec:	eb08 0903 	add.w	r9, r8, r3
 80081f0:	f1b9 0f1e 	cmp.w	r9, #30
 80081f4:	dd96      	ble.n	8008124 <iNemoEngine_API_Update+0x12cc>
 80081f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081f8:	3b01      	subs	r3, #1
 80081fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80081fc:	d189      	bne.n	8008112 <iNemoEngine_API_Update+0x12ba>
 80081fe:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 8008202:	aaae      	add	r2, sp, #696	@ 0x2b8
 8008204:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008208:	ed53 7a01 	vldr	s15, [r3, #-4]
 800820c:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8008210:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008214:	ed13 7a01 	vldr	s14, [r3, #-4]
 8008218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800821c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008220:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008224:	bf4c      	ite	mi
 8008226:	2201      	movmi	r2, #1
 8008228:	2200      	movpl	r2, #0
 800822a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822e:	bf4c      	ite	mi
 8008230:	2301      	movmi	r3, #1
 8008232:	2300      	movpl	r3, #0
 8008234:	429a      	cmp	r2, r3
 8008236:	f000 819d 	beq.w	8008574 <iNemoEngine_API_Update+0x171c>
 800823a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800823e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008246:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008248:	ece3 7a01 	vstmia	r3!, {s15}
 800824c:	9312      	str	r3, [sp, #72]	@ 0x48
 800824e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008250:	3304      	adds	r3, #4
 8008252:	9310      	str	r3, [sp, #64]	@ 0x40
 8008254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008256:	2b03      	cmp	r3, #3
 8008258:	f47f ae6d 	bne.w	8007f36 <iNemoEngine_API_Update+0x10de>
 800825c:	eddd 7a3e 	vldr	s15, [sp, #248]	@ 0xf8
 8008260:	ed9d 7a3d 	vldr	s14, [sp, #244]	@ 0xf4
 8008264:	eddd 6a16 	vldr	s13, [sp, #88]	@ 0x58
 8008268:	ed1f 1a45 	vldr	s2, [pc, #-276]	@ 8008158 <iNemoEngine_API_Update+0x1300>
 800826c:	9a06      	ldr	r2, [sp, #24]
 800826e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008272:	ee2d 1a81 	vmul.f32	s2, s27, s2
 8008276:	eee7 7a07 	vfma.f32	s15, s14, s14
 800827a:	f892 3900 	ldrb.w	r3, [r2, #2304]	@ 0x900
 800827e:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 8008282:	eeb0 8a67 	vmov.f32	s16, s15
 8008286:	eddd 7a3f 	vldr	s15, [sp, #252]	@ 0xfc
 800828a:	eea7 8aa7 	vfma.f32	s16, s15, s15
 800828e:	f502 6810 	add.w	r8, r2, #2304	@ 0x900
 8008292:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8008296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800829a:	eeb1 6ac8 	vsqrt.f32	s12, s16
 800829e:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 80082a2:	ee2b 7a27 	vmul.f32	s14, s22, s15
 80082a6:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 80082aa:	eec7 6a26 	vdiv.f32	s13, s14, s13
 80082ae:	ed9d 7a17 	vldr	s14, [sp, #92]	@ 0x5c
 80082b2:	edcd 5a52 	vstr	s11, [sp, #328]	@ 0x148
 80082b6:	ee87 5a87 	vdiv.f32	s10, s15, s14
 80082ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80082be:	eeb0 7a41 	vmov.f32	s14, s2
 80082c2:	eeab 7a27 	vfma.f32	s14, s22, s15
 80082c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80082ca:	ed5f 7a5c 	vldr	s15, [pc, #-368]	@ 800815c <iNemoEngine_API_Update+0x1304>
 80082ce:	ed8d 7a03 	vstr	s14, [sp, #12]
 80082d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d6:	edcd 6a53 	vstr	s13, [sp, #332]	@ 0x14c
 80082da:	ed8d 5a54 	vstr	s10, [sp, #336]	@ 0x150
 80082de:	ed8d 6a55 	vstr	s12, [sp, #340]	@ 0x154
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 8159 	bne.w	800859a <iNemoEngine_API_Update+0x1742>
 80082e8:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 80082ec:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
 80082f0:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 80082f4:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
 80082f8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80082fc:	f8c8 3024 	str.w	r3, [r8, #36]	@ 0x24
 8008300:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008304:	f8c8 3020 	str.w	r3, [r8, #32]
 8008308:	edc8 7a07 	vstr	s15, [r8, #28]
 800830c:	f602 130c 	addw	r3, r2, #2316	@ 0x90c
 8008310:	edd3 8a00 	vldr	s17, [r3]
 8008314:	edd2 2a02 	vldr	s5, [r2, #8]
 8008318:	f602 1324 	addw	r3, r2, #2340	@ 0x924
 800831c:	edd3 7a00 	vldr	s15, [r3]
 8008320:	f602 1308 	addw	r3, r2, #2312	@ 0x908
 8008324:	ed93 7a00 	vldr	s14, [r3]
 8008328:	f502 6312 	add.w	r3, r2, #2336	@ 0x920
 800832c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8008330:	edd3 7a00 	vldr	s15, [r3]
 8008334:	f502 6311 	add.w	r3, r2, #2320	@ 0x910
 8008338:	eee7 8a27 	vfma.f32	s17, s14, s15
 800833c:	ed93 7a00 	vldr	s14, [r3]
 8008340:	f602 1328 	addw	r3, r2, #2344	@ 0x928
 8008344:	edd3 7a00 	vldr	s15, [r3]
 8008348:	f602 1314 	addw	r3, r2, #2324	@ 0x914
 800834c:	eee7 8a27 	vfma.f32	s17, s14, s15
 8008350:	ed93 7a00 	vldr	s14, [r3]
 8008354:	f602 132c 	addw	r3, r2, #2348	@ 0x92c
 8008358:	edd3 7a00 	vldr	s15, [r3]
 800835c:	f602 1304 	addw	r3, r2, #2308	@ 0x904
 8008360:	eee7 8a27 	vfma.f32	s17, s14, s15
 8008364:	ed93 7a00 	vldr	s14, [r3]
 8008368:	f602 131c 	addw	r3, r2, #2332	@ 0x91c
 800836c:	edd3 7a00 	vldr	s15, [r3]
 8008370:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8008374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008378:	eee7 8a27 	vfma.f32	s17, s14, s15
 800837c:	f340 8158 	ble.w	8008630 <iNemoEngine_API_Update+0x17d8>
 8008380:	edd2 7a30 	vldr	s15, [r2, #192]	@ 0xc0
 8008384:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838c:	f101 8112 	bmi.w	80095b4 <iNemoEngine_API_Update+0x275c>
 8008390:	ed92 fa31 	vldr	s30, [r2, #196]	@ 0xc4
 8008394:	4613      	mov	r3, r2
 8008396:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 800839a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a2:	f142 8186 	bpl.w	800a6b2 <iNemoEngine_API_Update+0x385a>
 80083a6:	edd3 4a62 	vldr	s9, [r3, #392]	@ 0x188
 80083aa:	eef4 4ae8 	vcmpe.f32	s9, s17
 80083ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b2:	f342 821e 	ble.w	800a7f2 <iNemoEngine_API_Update+0x399a>
 80083b6:	ed93 7a4c 	vldr	s14, [r3, #304]	@ 0x130
 80083ba:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80083be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c2:	f302 8555 	bgt.w	800ae70 <iNemoEngine_API_Update+0x4018>
 80083c6:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 80083ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	f142 8565 	bpl.w	800aea0 <iNemoEngine_API_Update+0x4048>
 80083d6:	edd3 3a4d 	vldr	s7, [r3, #308]	@ 0x134
 80083da:	ed93 4a4f 	vldr	s8, [r3, #316]	@ 0x13c
 80083de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083e2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80083e6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80083ea:	ee24 7a07 	vmul.f32	s14, s8, s14
 80083ee:	ee87 ca27 	vdiv.f32	s24, s14, s15
 80083f2:	ee3c ca23 	vadd.f32	s24, s24, s7
 80083f6:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 80083fa:	eef4 8ae7 	vcmpe.f32	s17, s15
 80083fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008402:	f2c2 8566 	blt.w	800aed2 <iNemoEngine_API_Update+0x407a>
 8008406:	9b06      	ldr	r3, [sp, #24]
 8008408:	ed93 7a52 	vldr	s14, [r3, #328]	@ 0x148
 800840c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8008410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008414:	f142 87a3 	bpl.w	800b35e <iNemoEngine_API_Update+0x4506>
 8008418:	edd3 3a51 	vldr	s7, [r3, #324]	@ 0x144
 800841c:	ed93 4a53 	vldr	s8, [r3, #332]	@ 0x14c
 8008420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008424:	ee34 4a63 	vsub.f32	s8, s8, s7
 8008428:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800842c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8008430:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8008434:	ee3c ca23 	vadd.f32	s24, s24, s7
 8008438:	9b06      	ldr	r3, [sp, #24]
 800843a:	edd3 7a54 	vldr	s15, [r3, #336]	@ 0x150
 800843e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008446:	f2c2 8566 	blt.w	800af16 <iNemoEngine_API_Update+0x40be>
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8008450:	eef4 8ac7 	vcmpe.f32	s17, s14
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	f142 87dc 	bpl.w	800b414 <iNemoEngine_API_Update+0x45bc>
 800845c:	edd3 3a55 	vldr	s7, [r3, #340]	@ 0x154
 8008460:	ed93 4a57 	vldr	s8, [r3, #348]	@ 0x15c
 8008464:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008468:	ee34 4a63 	vsub.f32	s8, s8, s7
 800846c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8008470:	ee64 7a27 	vmul.f32	s15, s8, s15
 8008474:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8008478:	ee3c ca23 	vadd.f32	s24, s24, s7
 800847c:	9b06      	ldr	r3, [sp, #24]
 800847e:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
 8008482:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848a:	f2c2 8566 	blt.w	800af5a <iNemoEngine_API_Update+0x4102>
 800848e:	9b06      	ldr	r3, [sp, #24]
 8008490:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8008494:	eef4 8ac7 	vcmpe.f32	s17, s14
 8008498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849c:	f142 87c5 	bpl.w	800b42a <iNemoEngine_API_Update+0x45d2>
 80084a0:	edd3 3a59 	vldr	s7, [r3, #356]	@ 0x164
 80084a4:	ed93 4a5b 	vldr	s8, [r3, #364]	@ 0x16c
 80084a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 80084b0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80084b4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80084b8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80084bc:	ee3c ca23 	vadd.f32	s24, s24, s7
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 80084c6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80084ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ce:	f2c2 8566 	blt.w	800af9e <iNemoEngine_API_Update+0x4146>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	ed93 7a5e 	vldr	s14, [r3, #376]	@ 0x178
 80084d8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80084dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e0:	f142 8795 	bpl.w	800b40e <iNemoEngine_API_Update+0x45b6>
 80084e4:	edd3 3a5d 	vldr	s7, [r3, #372]	@ 0x174
 80084e8:	ed93 4a5f 	vldr	s8, [r3, #380]	@ 0x17c
 80084ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084f0:	ee34 4a63 	vsub.f32	s8, s8, s7
 80084f4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80084f8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80084fc:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8008500:	ee3c ca23 	vadd.f32	s24, s24, s7
 8008504:	9b06      	ldr	r3, [sp, #24]
 8008506:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 800850a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008512:	f2c0 8092 	blt.w	800863a <iNemoEngine_API_Update+0x17e2>
 8008516:	9b06      	ldr	r3, [sp, #24]
 8008518:	ed93 4a61 	vldr	s8, [r3, #388]	@ 0x184
 800851c:	ed93 7a63 	vldr	s14, [r3, #396]	@ 0x18c
 8008520:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8008524:	ee37 7a44 	vsub.f32	s14, s14, s8
 8008528:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800852c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008530:	ee87 caa4 	vdiv.f32	s24, s15, s9
 8008534:	ee3c ca04 	vadd.f32	s24, s24, s8
 8008538:	e07f      	b.n	800863a <iNemoEngine_API_Update+0x17e2>
 800853a:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 8008884 <iNemoEngine_API_Update+0x1a2c>
 800853e:	eddf cad2 	vldr	s25, [pc, #840]	@ 8008888 <iNemoEngine_API_Update+0x1a30>
 8008542:	edcd 7a21 	vstr	s15, [sp, #132]	@ 0x84
 8008546:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 800888c <iNemoEngine_API_Update+0x1a34>
 800854a:	edcd 7a23 	vstr	s15, [sp, #140]	@ 0x8c
 800854e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8008552:	f7ff b824 	b.w	800759e <iNemoEngine_API_Update+0x746>
 8008556:	1c60      	adds	r0, r4, #1
 8008558:	454e      	cmp	r6, r9
 800855a:	4459      	add	r1, fp
 800855c:	4450      	add	r0, sl
 800855e:	4665      	mov	r5, ip
 8008560:	f6bf ae04 	bge.w	800816c <iNemoEngine_API_Update+0x1314>
 8008564:	eba9 0206 	sub.w	r2, r9, r6
 8008568:	444c      	add	r4, r9
 800856a:	1ba4      	subs	r4, r4, r6
 800856c:	f004 fb2f 	bl	800cbce <memcpy>
 8008570:	464e      	mov	r6, r9
 8008572:	e5fb      	b.n	800816c <iNemoEngine_API_Update+0x1314>
 8008574:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857c:	f43f ae5d 	beq.w	800823a <iNemoEngine_API_Update+0x13e2>
 8008580:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	f43f ae57 	beq.w	800823a <iNemoEngine_API_Update+0x13e2>
 800858c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008590:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8008594:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008598:	e655      	b.n	8008246 <iNemoEngine_API_Update+0x13ee>
 800859a:	2300      	movs	r3, #0
 800859c:	f882 3900 	strb.w	r3, [r2, #2304]	@ 0x900
 80085a0:	edc8 7a07 	vstr	s15, [r8, #28]
 80085a4:	edc8 7a08 	vstr	s15, [r8, #32]
 80085a8:	edc8 7a09 	vstr	s15, [r8, #36]	@ 0x24
 80085ac:	edc8 7a0a 	vstr	s15, [r8, #40]	@ 0x28
 80085b0:	edc8 7a0b 	vstr	s15, [r8, #44]	@ 0x2c
 80085b4:	e6aa      	b.n	800830c <iNemoEngine_API_Update+0x14b4>
 80085b6:	f04f 0908 	mov.w	r9, #8
 80085ba:	f04f 0805 	mov.w	r8, #5
 80085be:	2202      	movs	r2, #2
 80085c0:	f7ff bae3 	b.w	8007b8a <iNemoEngine_API_Update+0xd32>
 80085c4:	2104      	movs	r1, #4
 80085c6:	2000      	movs	r0, #0
 80085c8:	f04f 0c06 	mov.w	ip, #6
 80085cc:	f04f 0e07 	mov.w	lr, #7
 80085d0:	2603      	movs	r6, #3
 80085d2:	460c      	mov	r4, r1
 80085d4:	2301      	movs	r3, #1
 80085d6:	4607      	mov	r7, r0
 80085d8:	f7ff babd 	b.w	8007b56 <iNemoEngine_API_Update+0xcfe>
 80085dc:	ed9f 5aac 	vldr	s10, [pc, #688]	@ 8008890 <iNemoEngine_API_Update+0x1a38>
 80085e0:	ed9f 8aac 	vldr	s16, [pc, #688]	@ 8008894 <iNemoEngine_API_Update+0x1a3c>
 80085e4:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 80088c4 <iNemoEngine_API_Update+0x1a6c>
 80085e8:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8008898 <iNemoEngine_API_Update+0x1a40>
 80085ec:	ed84 5a00 	vstr	s10, [r4]
 80085f0:	eef0 7a45 	vmov.f32	s15, s10
 80085f4:	eeb0 6a45 	vmov.f32	s12, s10
 80085f8:	eddf caa8 	vldr	s25, [pc, #672]	@ 800889c <iNemoEngine_API_Update+0x1a44>
 80085fc:	ed9f 9aa8 	vldr	s18, [pc, #672]	@ 80088a0 <iNemoEngine_API_Update+0x1a48>
 8008600:	ed84 8a01 	vstr	s16, [r4, #4]
 8008604:	eef0 5a66 	vmov.f32	s11, s13
 8008608:	ed84 8a02 	vstr	s16, [r4, #8]
 800860c:	eeb0 5a47 	vmov.f32	s10, s14
 8008610:	eef0 8a67 	vmov.f32	s17, s15
 8008614:	eeb0 ca48 	vmov.f32	s24, s16
 8008618:	f7fe bed8 	b.w	80073cc <iNemoEngine_API_Update+0x574>
 800861c:	eef1 6a66 	vneg.f32	s13, s13
 8008620:	e415      	b.n	8007e4e <iNemoEngine_API_Update+0xff6>
 8008622:	eeb1 4a44 	vneg.f32	s8, s8
 8008626:	f7ff bbee 	b.w	8007e06 <iNemoEngine_API_Update+0xfae>
 800862a:	eef1 7a67 	vneg.f32	s15, s15
 800862e:	e431      	b.n	8007e94 <iNemoEngine_API_Update+0x103c>
 8008630:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
 8008634:	eeb0 fa4c 	vmov.f32	s30, s24
 8008638:	4613      	mov	r3, r2
 800863a:	edd3 fa74 	vldr	s31, [r3, #464]	@ 0x1d0
 800863e:	ed93 7a72 	vldr	s14, [r3, #456]	@ 0x1c8
 8008642:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 8008646:	eddf 4a90 	vldr	s9, [pc, #576]	@ 8008888 <iNemoEngine_API_Update+0x1a30>
 800864a:	ee7c faef 	vsub.f32	s31, s25, s31
 800864e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008652:	eef0 faef 	vabs.f32	s31, s31
 8008656:	eef0 7ae7 	vabs.f32	s15, s15
 800865a:	ee77 7aaf 	vadd.f32	s15, s15, s31
 800865e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8008662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008666:	dd0a      	ble.n	800867e <iNemoEngine_API_Update+0x1826>
 8008668:	ed9f 4a8e 	vldr	s8, [pc, #568]	@ 80088a4 <iNemoEngine_API_Update+0x1a4c>
 800866c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8008670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008674:	f340 8790 	ble.w	8009598 <iNemoEngine_API_Update+0x2740>
 8008678:	eef1 4a04 	vmov.f32	s9, #20	@ 0x40a00000  5.0
 800867c:	e001      	b.n	8008682 <iNemoEngine_API_Update+0x182a>
 800867e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8008682:	eddd 7a21 	vldr	s15, [sp, #132]	@ 0x84
 8008686:	781c      	ldrb	r4, [r3, #0]
 8008688:	eef4 4ae7 	vcmpe.f32	s9, s15
 800868c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008690:	bfa8      	it	ge
 8008692:	eef0 7a64 	vmovge.f32	s15, s9
 8008696:	edcd 7a04 	vstr	s15, [sp, #16]
 800869a:	b1cc      	cbz	r4, 80086d0 <iNemoEngine_API_Update+0x1878>
 800869c:	785c      	ldrb	r4, [r3, #1]
 800869e:	2c00      	cmp	r4, #0
 80086a0:	f040 8774 	bne.w	800958c <iNemoEngine_API_Update+0x2734>
 80086a4:	ee75 7aa6 	vadd.f32	s15, s11, s13
 80086a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80086ac:	ee75 7a27 	vadd.f32	s15, s10, s15
 80086b0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80086b4:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80086b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80086bc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80086c0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80086c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80086c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086cc:	f102 848b 	bmi.w	800afe6 <iNemoEngine_API_Update+0x418e>
 80086d0:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 80086d4:	461a      	mov	r2, r3
 80086d6:	eddd 6a1a 	vldr	s13, [sp, #104]	@ 0x68
 80086da:	ed9d 6a50 	vldr	s12, [sp, #320]	@ 0x140
 80086de:	edcd 6a98 	vstr	s13, [sp, #608]	@ 0x260
 80086e2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80086e6:	eef0 6a65 	vmov.f32	s13, s11
 80086ea:	eee7 6a47 	vfms.f32	s13, s14, s14
 80086ee:	2300      	movs	r3, #0
 80086f0:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
 80086f4:	ed9d 5a4e 	vldr	s10, [sp, #312]	@ 0x138
 80086f8:	eddd 4a4f 	vldr	s9, [sp, #316]	@ 0x13c
 80086fc:	eddd 0a51 	vldr	s1, [sp, #324]	@ 0x144
 8008700:	ed8d 7a45 	vstr	s14, [sp, #276]	@ 0x114
 8008704:	ee26 4a06 	vmul.f32	s8, s12, s12
 8008708:	ee25 2a05 	vmul.f32	s4, s10, s10
 800870c:	ee34 4a04 	vadd.f32	s8, s8, s8
 8008710:	eeb1 3ae6 	vsqrt.f32	s6, s13
 8008714:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
 8008718:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
 800871c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800871e:	ee64 3a86 	vmul.f32	s7, s9, s12
 8008722:	ee25 0a24 	vmul.f32	s0, s10, s9
 8008726:	ee64 1aa4 	vmul.f32	s3, s9, s9
 800872a:	ee64 6aa0 	vmul.f32	s13, s9, s1
 800872e:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 8008732:	eea2 4a24 	vfma.f32	s8, s4, s9
 8008736:	ee73 3aa3 	vadd.f32	s7, s7, s7
 800873a:	ee35 1ac4 	vsub.f32	s2, s11, s8
 800873e:	ee25 4a06 	vmul.f32	s8, s10, s12
 8008742:	ee26 6a20 	vmul.f32	s12, s12, s1
 8008746:	ee71 1aa1 	vadd.f32	s3, s3, s3
 800874a:	ee30 6a06 	vadd.f32	s12, s0, s12
 800874e:	ee25 5a20 	vmul.f32	s10, s10, s1
 8008752:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8008756:	eee2 1a24 	vfma.f32	s3, s4, s9
 800875a:	ee36 2a06 	vadd.f32	s4, s12, s12
 800875e:	eeb0 6a63 	vmov.f32	s12, s7
 8008762:	eea5 6a24 	vfma.f32	s12, s10, s9
 8008766:	eee5 3a64 	vfms.f32	s7, s10, s9
 800876a:	eeb0 5a66 	vmov.f32	s10, s13
 800876e:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 8008772:	ee94 5a24 	vfnms.f32	s10, s8, s9
 8008776:	eee4 6a64 	vfms.f32	s13, s8, s9
 800877a:	ee25 5a07 	vmul.f32	s10, s10, s14
 800877e:	edcd 6a3d 	vstr	s13, [sp, #244]	@ 0xf4
 8008782:	edcd 6a92 	vstr	s13, [sp, #584]	@ 0x248
 8008786:	ee75 6ae1 	vsub.f32	s13, s11, s3
 800878a:	ee79 5ae5 	vsub.f32	s11, s19, s11
 800878e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008792:	ee75 1aa1 	vadd.f32	s3, s11, s3
 8008796:	eee3 6a23 	vfma.f32	s13, s6, s7
 800879a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800879e:	eddd 5a2a 	vldr	s11, [sp, #168]	@ 0xa8
 80087a2:	eddd 4a2c 	vldr	s9, [sp, #176]	@ 0xb0
 80087a6:	ed8d 9a99 	vstr	s18, [sp, #612]	@ 0x264
 80087aa:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80087ae:	eea3 7a01 	vfma.f32	s14, s6, s2
 80087b2:	edcd 6a91 	vstr	s13, [sp, #580]	@ 0x244
 80087b6:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 80087ba:	edcd ca9a 	vstr	s25, [sp, #616]	@ 0x268
 80087be:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80087c2:	eea3 5a02 	vfma.f32	s10, s6, s4
 80087c6:	ed8d 7a90 	vstr	s14, [sp, #576]	@ 0x240
 80087ca:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80088d8 <iNemoEngine_API_Update+0x1a80>
 80087ce:	ed8d 3a44 	vstr	s6, [sp, #272]	@ 0x110
 80087d2:	ee3a 6a46 	vsub.f32	s12, s20, s12
 80087d6:	ee34 5ac5 	vsub.f32	s10, s9, s10
 80087da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	ed8d 5a8f 	vstr	s10, [sp, #572]	@ 0x23c
 80087e6:	edcd 1a3f 	vstr	s3, [sp, #252]	@ 0xfc
 80087ea:	edcd 1a94 	vstr	s3, [sp, #592]	@ 0x250
 80087ee:	ed8d 6a3e 	vstr	s12, [sp, #248]	@ 0xf8
 80087f2:	ed8d 6a93 	vstr	s12, [sp, #588]	@ 0x24c
 80087f6:	d541      	bpl.n	800887c <iNemoEngine_API_Update+0x1a24>
 80087f8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80088a8 <iNemoEngine_API_Update+0x1a50>
 80087fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008804:	dd3a      	ble.n	800887c <iNemoEngine_API_Update+0x1a24>
 8008806:	ee79 7a67 	vsub.f32	s15, s18, s15
 800880a:	eef0 7ae7 	vabs.f32	s15, s15
 800880e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8008812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881a:	dd5f      	ble.n	80088dc <iNemoEngine_API_Update+0x1a84>
 800881c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008828:	f140 86a4 	bpl.w	8009574 <iNemoEngine_API_Update+0x271c>
 800882c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80088ac <iNemoEngine_API_Update+0x1a54>
 8008830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008838:	f141 8185 	bpl.w	8009b46 <iNemoEngine_API_Update+0x2cee>
 800883c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80088bc <iNemoEngine_API_Update+0x1a64>
 8008840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008848:	f2c1 8185 	blt.w	8009b56 <iNemoEngine_API_Update+0x2cfe>
 800884c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80088b0 <iNemoEngine_API_Update+0x1a58>
 8008850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008858:	f141 824e 	bpl.w	8009cf8 <iNemoEngine_API_Update+0x2ea0>
 800885c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80088bc <iNemoEngine_API_Update+0x1a64>
 8008860:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80088b4 <iNemoEngine_API_Update+0x1a5c>
 8008864:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80088b8 <iNemoEngine_API_Update+0x1a60>
 8008868:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800886c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008874:	eea6 7a86 	vfma.f32	s14, s13, s12
 8008878:	f001 b977 	b.w	8009b6a <iNemoEngine_API_Update+0x2d12>
 800887c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008880:	e7c1      	b.n	8008806 <iNemoEngine_API_Update+0x19ae>
 8008882:	bf00      	nop
 8008884:	3ecccccc 	.word	0x3ecccccc
 8008888:	3dcccccd 	.word	0x3dcccccd
 800888c:	3f666666 	.word	0x3f666666
 8008890:	00000000 	.word	0x00000000
 8008894:	3f333333 	.word	0x3f333333
 8008898:	bfb33333 	.word	0xbfb33333
 800889c:	3f7d6d54 	.word	0x3f7d6d54
 80088a0:	3f7ae147 	.word	0x3f7ae147
 80088a4:	3fb77778 	.word	0x3fb77778
 80088a8:	3f4ccccd 	.word	0x3f4ccccd
 80088ac:	3ba3d70a 	.word	0x3ba3d70a
 80088b0:	3c75c28f 	.word	0x3c75c28f
 80088b4:	3f19999a 	.word	0x3f19999a
 80088b8:	43480000 	.word	0x43480000
 80088bc:	3c23d70a 	.word	0x3c23d70a
 80088c0:	3b449ba6 	.word	0x3b449ba6
 80088c4:	3fb33333 	.word	0x3fb33333
 80088c8:	3ecccccd 	.word	0x3ecccccd
 80088cc:	3f8f5c29 	.word	0x3f8f5c29
 80088d0:	3f59999a 	.word	0x3f59999a
 80088d4:	3e4ccccd 	.word	0x3e4ccccd
 80088d8:	3f99999a 	.word	0x3f99999a
 80088dc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80088e0:	ed1f 4a0a 	vldr	s8, [pc, #-40]	@ 80088bc <iNemoEngine_API_Update+0x1a64>
 80088e4:	ed1f 6a0a 	vldr	s12, [pc, #-40]	@ 80088c0 <iNemoEngine_API_Update+0x1a68>
 80088e8:	eeb0 7a65 	vmov.f32	s14, s11
 80088ec:	eef0 6a65 	vmov.f32	s13, s11
 80088f0:	ed8d 6a65 	vstr	s12, [sp, #404]	@ 0x194
 80088f4:	ed9d 6a04 	vldr	s12, [sp, #16]
 80088f8:	ed9d 3a84 	vldr	s6, [sp, #528]	@ 0x210
 80088fc:	ed9d 5a83 	vldr	s10, [sp, #524]	@ 0x20c
 8008900:	ed9d 2a88 	vldr	s4, [sp, #544]	@ 0x220
 8008904:	eddd 4a8c 	vldr	s9, [sp, #560]	@ 0x230
 8008908:	9a06      	ldr	r2, [sp, #24]
 800890a:	ed8d 4a66 	vstr	s8, [sp, #408]	@ 0x198
 800890e:	ee66 3a0f 	vmul.f32	s7, s12, s30
 8008912:	ed9d 6a8d 	vldr	s12, [sp, #564]	@ 0x234
 8008916:	7b13      	ldrb	r3, [r2, #12]
 8008918:	ee23 3a23 	vmul.f32	s6, s6, s7
 800891c:	ee23 5a85 	vmul.f32	s10, s7, s10
 8008920:	ed8d 3a84 	vstr	s6, [sp, #528]	@ 0x210
 8008924:	ed9d 3a85 	vldr	s6, [sp, #532]	@ 0x214
 8008928:	ed8d 5a83 	vstr	s10, [sp, #524]	@ 0x20c
 800892c:	ee63 3a23 	vmul.f32	s7, s6, s7
 8008930:	ed9d 3a86 	vldr	s6, [sp, #536]	@ 0x218
 8008934:	edcd 3a85 	vstr	s7, [sp, #532]	@ 0x214
 8008938:	eddd 3a87 	vldr	s7, [sp, #540]	@ 0x21c
 800893c:	ee2c 3a03 	vmul.f32	s6, s24, s6
 8008940:	ee6c 3a23 	vmul.f32	s7, s24, s7
 8008944:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8008948:	ee2c ca02 	vmul.f32	s24, s24, s4
 800894c:	ee36 6a06 	vadd.f32	s12, s12, s12
 8008950:	ed9d 2a8e 	vldr	s4, [sp, #568]	@ 0x238
 8008954:	ed8d 3a86 	vstr	s6, [sp, #536]	@ 0x218
 8008958:	ee64 4a87 	vmul.f32	s9, s9, s14
 800895c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008960:	ee2f fa02 	vmul.f32	s30, s30, s4
 8008964:	edcd 4a8c 	vstr	s9, [sp, #560]	@ 0x230
 8008968:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 800896c:	edcd 3a87 	vstr	s7, [sp, #540]	@ 0x21c
 8008970:	ed8d ca88 	vstr	s24, [sp, #544]	@ 0x220
 8008974:	ed8d fa8e 	vstr	s30, [sp, #568]	@ 0x238
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8525 	beq.w	80093c8 <iNemoEngine_API_Update+0x2570>
 800897e:	ee27 3a03 	vmul.f32	s6, s14, s6
 8008982:	ee67 3a23 	vmul.f32	s7, s14, s7
 8008986:	ee27 ca0c 	vmul.f32	s24, s14, s24
 800898a:	ed9d 2a22 	vldr	s4, [sp, #136]	@ 0x88
 800898e:	ed8d 3a86 	vstr	s6, [sp, #536]	@ 0x218
 8008992:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008996:	4613      	mov	r3, r2
 8008998:	ee25 2a82 	vmul.f32	s4, s11, s4
 800899c:	7b92      	ldrb	r2, [r2, #14]
 800899e:	7b5b      	ldrb	r3, [r3, #13]
 80089a0:	edcd 3a87 	vstr	s7, [sp, #540]	@ 0x21c
 80089a4:	ee64 5a25 	vmul.f32	s11, s8, s11
 80089a8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80089ac:	edcd 5a66 	vstr	s11, [sp, #408]	@ 0x198
 80089b0:	ed8d ca88 	vstr	s24, [sp, #544]	@ 0x220
 80089b4:	ed8d 2a5f 	vstr	s4, [sp, #380]	@ 0x17c
 80089b8:	ed8d 2a60 	vstr	s4, [sp, #384]	@ 0x180
 80089bc:	ed8d 2a61 	vstr	s4, [sp, #388]	@ 0x184
 80089c0:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 80089c4:	f88d 20eb 	strb.w	r2, [sp, #235]	@ 0xeb
 80089c8:	f88d 20ec 	strb.w	r2, [sp, #236]	@ 0xec
 80089cc:	f88d 20ed 	strb.w	r2, [sp, #237]	@ 0xed
 80089d0:	f88d 30e8 	strb.w	r3, [sp, #232]	@ 0xe8
 80089d4:	f88d 30e9 	strb.w	r3, [sp, #233]	@ 0xe9
 80089d8:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 80089dc:	b15a      	cbz	r2, 80089f6 <iNemoEngine_API_Update+0x1b9e>
 80089de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ea:	dd04      	ble.n	80089f6 <iNemoEngine_API_Update+0x1b9e>
 80089ec:	2100      	movs	r1, #0
 80089ee:	f8ad 10eb 	strh.w	r1, [sp, #235]	@ 0xeb
 80089f2:	f88d 10ed 	strb.w	r1, [sp, #237]	@ 0xed
 80089f6:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 80089fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fe:	dd08      	ble.n	8008a12 <iNemoEngine_API_Update+0x1bba>
 8008a00:	9906      	ldr	r1, [sp, #24]
 8008a02:	edd1 7a64 	vldr	s15, [r1, #400]	@ 0x190
 8008a06:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0e:	f280 85a4 	bge.w	800955a <iNemoEngine_API_Update+0x2702>
 8008a12:	b133      	cbz	r3, 8008a22 <iNemoEngine_API_Update+0x1bca>
 8008a14:	f240 1101 	movw	r1, #257	@ 0x101
 8008a18:	f8ad 10e8 	strh.w	r1, [sp, #232]	@ 0xe8
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	f88d 10ea 	strb.w	r1, [sp, #234]	@ 0xea
 8008a22:	2401      	movs	r4, #1
 8008a24:	f88d 40f1 	strb.w	r4, [sp, #241]	@ 0xf1
 8008a28:	f88d 40f3 	strb.w	r4, [sp, #243]	@ 0xf3
 8008a2c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 80088c4 <iNemoEngine_API_Update+0x1a6c>
 8008a30:	eef4 cae7 	vcmpe.f32	s25, s15
 8008a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a38:	dc07      	bgt.n	8008a4a <iNemoEngine_API_Update+0x1bf2>
 8008a3a:	ed5f 7a5d 	vldr	s15, [pc, #-372]	@ 80088c8 <iNemoEngine_API_Update+0x1a70>
 8008a3e:	eef4 cae7 	vcmpe.f32	s25, s15
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	f141 801d 	bpl.w	8009a84 <iNemoEngine_API_Update+0x2c2c>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 8008a50:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 8008a54:	f88d 30f1 	strb.w	r3, [sp, #241]	@ 0xf1
 8008a58:	f88d 30f3 	strb.w	r3, [sp, #243]	@ 0xf3
 8008a5c:	ed5f 7a65 	vldr	s15, [pc, #-404]	@ 80088cc <iNemoEngine_API_Update+0x1a74>
 8008a60:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8008a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a68:	dc07      	bgt.n	8008a7a <iNemoEngine_API_Update+0x1c22>
 8008a6a:	ed5f 7a67 	vldr	s15, [pc, #-412]	@ 80088d0 <iNemoEngine_API_Update+0x1a78>
 8008a6e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8008a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a76:	f140 86ed 	bpl.w	8009854 <iNemoEngine_API_Update+0x29fc>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f8ad 30eb 	strh.w	r3, [sp, #235]	@ 0xeb
 8008a80:	f88d 30ed 	strb.w	r3, [sp, #237]	@ 0xed
 8008a84:	f8ad 30f1 	strh.w	r3, [sp, #241]	@ 0xf1
 8008a88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008a8c:	eef4 fae7 	vcmpe.f32	s31, s15
 8008a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a94:	f340 8486 	ble.w	80093a4 <iNemoEngine_API_Update+0x254c>
 8008a98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008a9c:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8008aac:	ee27 fa8f 	vmul.f32	s30, s15, s30
 8008ab0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8008ab4:	eef4 fae7 	vcmpe.f32	s31, s15
 8008ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008abc:	bfc4      	itt	gt
 8008abe:	f88d 30f1 	strbgt.w	r3, [sp, #241]	@ 0xf1
 8008ac2:	f88d 30f3 	strbgt.w	r3, [sp, #243]	@ 0xf3
 8008ac6:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 8008aca:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 8008ace:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008ad0:	edcd 4a8c 	vstr	s9, [sp, #560]	@ 0x230
 8008ad4:	2b0e      	cmp	r3, #14
 8008ad6:	ed8d fa8e 	vstr	s30, [sp, #568]	@ 0x238
 8008ada:	f340 8567 	ble.w	80095ac <iNemoEngine_API_Update+0x2754>
 8008ade:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 8008ae2:	eeb4 dae7 	vcmpe.f32	s26, s15
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	f340 82ed 	ble.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008aee:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 8008af2:	eef4 7acb 	vcmpe.f32	s15, s22
 8008af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afa:	f340 82e5 	ble.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008afe:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c
 8008b02:	eef4 7aed 	vcmpe.f32	s15, s27
 8008b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0a:	f340 82dd 	ble.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008b0e:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 80088d4 <iNemoEngine_API_Update+0x1a7c>
 8008b12:	eeb0 7ace 	vabs.f32	s14, s28
 8008b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1e:	f140 82d3 	bpl.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008b22:	eeb0 7aee 	vabs.f32	s14, s29
 8008b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2e:	f140 82cb 	bpl.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008b32:	eeb0 7aeb 	vabs.f32	s14, s23
 8008b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3e:	f140 82c3 	bpl.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008b42:	ed5f 7a9b 	vldr	s15, [pc, #-620]	@ 80088d8 <iNemoEngine_API_Update+0x1a80>
 8008b46:	eef0 aaea 	vabs.f32	s21, s21
 8008b4a:	eef4 aae7 	vcmpe.f32	s21, s15
 8008b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b52:	f140 82b9 	bpl.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008b56:	eeb0 aaca 	vabs.f32	s20, s20
 8008b5a:	eeb4 aae7 	vcmpe.f32	s20, s15
 8008b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b62:	f140 82b1 	bpl.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008b66:	eef0 9ae9 	vabs.f32	s19, s19
 8008b6a:	eef4 9ae7 	vcmpe.f32	s19, s15
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	f140 82a9 	bpl.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008b76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008b78:	9806      	ldr	r0, [sp, #24]
 8008b7a:	ed93 6a00 	vldr	s12, [r3]
 8008b7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008b80:	f890 11a0 	ldrb.w	r1, [r0, #416]	@ 0x1a0
 8008b84:	ed93 7a00 	vldr	s14, [r3]
 8008b88:	f200 73a4 	addw	r3, r0, #1956	@ 0x7a4
 8008b8c:	edd3 4a00 	vldr	s9, [r3]
 8008b90:	2909      	cmp	r1, #9
 8008b92:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8008b96:	f500 63f6 	add.w	r3, r0, #1968	@ 0x7b0
 8008b9a:	ed93 5a00 	vldr	s10, [r3]
 8008b9e:	bf8c      	ite	hi
 8008ba0:	220a      	movhi	r2, #10
 8008ba2:	2205      	movls	r2, #5
 8008ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba8:	bfb4      	ite	lt
 8008baa:	eef0 7a64 	vmovlt.f32	s15, s9
 8008bae:	eef0 7a46 	vmovge.f32	s15, s12
 8008bb2:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008bb6:	bf8c      	ite	hi
 8008bb8:	eef0 5a64 	vmovhi.f32	s11, s9
 8008bbc:	eef0 5a46 	vmovls.f32	s11, s12
 8008bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc4:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008bc8:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008bcc:	bfb8      	it	lt
 8008bce:	eef0 7a45 	vmovlt.f32	s15, s10
 8008bd2:	f200 73bc 	addw	r3, r0, #1980	@ 0x7bc
 8008bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bda:	bf88      	it	hi
 8008bdc:	eef0 5a45 	vmovhi.f32	s11, s10
 8008be0:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008be4:	ed93 5a00 	vldr	s10, [r3]
 8008be8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008bf4:	bfb8      	it	lt
 8008bf6:	eef0 7a45 	vmovlt.f32	s15, s10
 8008bfa:	f500 63f9 	add.w	r3, r0, #1992	@ 0x7c8
 8008bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c02:	bf88      	it	hi
 8008c04:	eef0 5a45 	vmovhi.f32	s11, s10
 8008c08:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008c0c:	ed93 5a00 	vldr	s10, [r3]
 8008c10:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c18:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008c1c:	bfb8      	it	lt
 8008c1e:	eef0 7a45 	vmovlt.f32	s15, s10
 8008c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c26:	bf88      	it	hi
 8008c28:	eef0 5a45 	vmovhi.f32	s11, s10
 8008c2c:	2a05      	cmp	r2, #5
 8008c2e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008c32:	d065      	beq.n	8008d00 <iNemoEngine_API_Update+0x1ea8>
 8008c34:	f200 73d4 	addw	r3, r0, #2004	@ 0x7d4
 8008c38:	ed93 5a00 	vldr	s10, [r3]
 8008c3c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c44:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008c48:	bfb8      	it	lt
 8008c4a:	eef0 7a45 	vmovlt.f32	s15, s10
 8008c4e:	f500 63fc 	add.w	r3, r0, #2016	@ 0x7e0
 8008c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c56:	bf88      	it	hi
 8008c58:	eef0 5a45 	vmovhi.f32	s11, s10
 8008c5c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008c60:	ed93 5a00 	vldr	s10, [r3]
 8008c64:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008c70:	bfb8      	it	lt
 8008c72:	eef0 7a45 	vmovlt.f32	s15, s10
 8008c76:	f200 73ec 	addw	r3, r0, #2028	@ 0x7ec
 8008c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7e:	bf88      	it	hi
 8008c80:	eef0 5a45 	vmovhi.f32	s11, s10
 8008c84:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008c88:	ed93 5a00 	vldr	s10, [r3]
 8008c8c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c94:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008c98:	bfb8      	it	lt
 8008c9a:	eef0 7a45 	vmovlt.f32	s15, s10
 8008c9e:	f500 63ff 	add.w	r3, r0, #2040	@ 0x7f8
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	bf88      	it	hi
 8008ca8:	eef0 5a45 	vmovhi.f32	s11, s10
 8008cac:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008cb0:	ed93 5a00 	vldr	s10, [r3]
 8008cb4:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbc:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008cc0:	bfb8      	it	lt
 8008cc2:	eef0 7a45 	vmovlt.f32	s15, s10
 8008cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cca:	bf88      	it	hi
 8008ccc:	eef0 5a45 	vmovhi.f32	s11, s10
 8008cd0:	2a0a      	cmp	r2, #10
 8008cd2:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008cd6:	d113      	bne.n	8008d00 <iNemoEngine_API_Update+0x1ea8>
 8008cd8:	f600 0304 	addw	r3, r0, #2052	@ 0x804
 8008cdc:	ed93 5a00 	vldr	s10, [r3]
 8008ce0:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce8:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008cec:	bfb8      	it	lt
 8008cee:	eef0 7a45 	vmovlt.f32	s15, s10
 8008cf2:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfa:	bf88      	it	hi
 8008cfc:	eef0 5a45 	vmovhi.f32	s11, s10
 8008d00:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008d04:	eddf 5aeb 	vldr	s11, [pc, #940]	@ 80090b4 <iNemoEngine_API_Update+0x225c>
 8008d08:	ed9f 5aeb 	vldr	s10, [pc, #940]	@ 80090b8 <iNemoEngine_API_Update+0x2260>
 8008d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d10:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008d14:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	f300 81d4 	bgt.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008d20:	eef0 7ac6 	vabs.f32	s15, s12
 8008d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d28:	ed9f 6ae4 	vldr	s12, [pc, #912]	@ 80090bc <iNemoEngine_API_Update+0x2264>
 8008d2c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d34:	f300 81c8 	bgt.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008d38:	9806      	ldr	r0, [sp, #24]
 8008d3a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8008d3c:	ed93 6a00 	vldr	s12, [r3]
 8008d40:	f500 63f5 	add.w	r3, r0, #1960	@ 0x7a8
 8008d44:	edd3 4a00 	vldr	s9, [r3]
 8008d48:	f200 73b4 	addw	r3, r0, #1972	@ 0x7b4
 8008d4c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8008d50:	ed93 5a00 	vldr	s10, [r3]
 8008d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d58:	bfb4      	ite	lt
 8008d5a:	eef0 7a64 	vmovlt.f32	s15, s9
 8008d5e:	eef0 7a46 	vmovge.f32	s15, s12
 8008d62:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008d66:	bf8c      	ite	hi
 8008d68:	eef0 5a64 	vmovhi.f32	s11, s9
 8008d6c:	eef0 5a46 	vmovls.f32	s11, s12
 8008d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d74:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008d78:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008d7c:	bfb8      	it	lt
 8008d7e:	eef0 7a45 	vmovlt.f32	s15, s10
 8008d82:	f500 63f8 	add.w	r3, r0, #1984	@ 0x7c0
 8008d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8a:	bf88      	it	hi
 8008d8c:	eef0 5a45 	vmovhi.f32	s11, s10
 8008d90:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008d94:	ed93 5a00 	vldr	s10, [r3]
 8008d98:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008da4:	bfb8      	it	lt
 8008da6:	eef0 7a45 	vmovlt.f32	s15, s10
 8008daa:	f200 73cc 	addw	r3, r0, #1996	@ 0x7cc
 8008dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db2:	bf88      	it	hi
 8008db4:	eef0 5a45 	vmovhi.f32	s11, s10
 8008db8:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008dbc:	ed93 5a00 	vldr	s10, [r3]
 8008dc0:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc8:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008dcc:	bfb8      	it	lt
 8008dce:	eef0 7a45 	vmovlt.f32	s15, s10
 8008dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd6:	bf88      	it	hi
 8008dd8:	eef0 5a45 	vmovhi.f32	s11, s10
 8008ddc:	2a05      	cmp	r2, #5
 8008dde:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008de2:	d065      	beq.n	8008eb0 <iNemoEngine_API_Update+0x2058>
 8008de4:	f500 63fb 	add.w	r3, r0, #2008	@ 0x7d8
 8008de8:	ed93 5a00 	vldr	s10, [r3]
 8008dec:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df4:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008df8:	bfb8      	it	lt
 8008dfa:	eef0 7a45 	vmovlt.f32	s15, s10
 8008dfe:	f200 73e4 	addw	r3, r0, #2020	@ 0x7e4
 8008e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e06:	bf88      	it	hi
 8008e08:	eef0 5a45 	vmovhi.f32	s11, s10
 8008e0c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008e10:	ed93 5a00 	vldr	s10, [r3]
 8008e14:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e1c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008e20:	bfb8      	it	lt
 8008e22:	eef0 7a45 	vmovlt.f32	s15, s10
 8008e26:	f500 63fe 	add.w	r3, r0, #2032	@ 0x7f0
 8008e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2e:	bf88      	it	hi
 8008e30:	eef0 5a45 	vmovhi.f32	s11, s10
 8008e34:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008e38:	ed93 5a00 	vldr	s10, [r3]
 8008e3c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e44:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008e48:	bfb8      	it	lt
 8008e4a:	eef0 7a45 	vmovlt.f32	s15, s10
 8008e4e:	f200 73fc 	addw	r3, r0, #2044	@ 0x7fc
 8008e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e56:	bf88      	it	hi
 8008e58:	eef0 5a45 	vmovhi.f32	s11, s10
 8008e5c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008e60:	ed93 5a00 	vldr	s10, [r3]
 8008e64:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008e70:	bfb8      	it	lt
 8008e72:	eef0 7a45 	vmovlt.f32	s15, s10
 8008e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7a:	bf88      	it	hi
 8008e7c:	eef0 5a45 	vmovhi.f32	s11, s10
 8008e80:	2a0a      	cmp	r2, #10
 8008e82:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008e86:	d113      	bne.n	8008eb0 <iNemoEngine_API_Update+0x2058>
 8008e88:	f600 0308 	addw	r3, r0, #2056	@ 0x808
 8008e8c:	ed93 5a00 	vldr	s10, [r3]
 8008e90:	eef4 7ac5 	vcmpe.f32	s15, s10
 8008e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e98:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008e9c:	bfb8      	it	lt
 8008e9e:	eef0 7a45 	vmovlt.f32	s15, s10
 8008ea2:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eaa:	bf88      	it	hi
 8008eac:	eef0 5a45 	vmovhi.f32	s11, s10
 8008eb0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008eb4:	eddf 5a7f 	vldr	s11, [pc, #508]	@ 80090b4 <iNemoEngine_API_Update+0x225c>
 8008eb8:	ed9f 5a7f 	vldr	s10, [pc, #508]	@ 80090b8 <iNemoEngine_API_Update+0x2260>
 8008ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ec0:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008ec4:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ecc:	f300 80fc 	bgt.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008ed0:	eef0 7ac6 	vabs.f32	s15, s12
 8008ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ed8:	ed9f 6a78 	vldr	s12, [pc, #480]	@ 80090bc <iNemoEngine_API_Update+0x2264>
 8008edc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee4:	f300 80f0 	bgt.w	80090c8 <iNemoEngine_API_Update+0x2270>
 8008ee8:	9806      	ldr	r0, [sp, #24]
 8008eea:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008eec:	ed93 5a00 	vldr	s10, [r3]
 8008ef0:	f200 73ac 	addw	r3, r0, #1964	@ 0x7ac
 8008ef4:	edd3 4a00 	vldr	s9, [r3]
 8008ef8:	f500 63f7 	add.w	r3, r0, #1976	@ 0x7b8
 8008efc:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8008f00:	ed93 6a00 	vldr	s12, [r3]
 8008f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f08:	bfb4      	ite	lt
 8008f0a:	eef0 7a64 	vmovlt.f32	s15, s9
 8008f0e:	eef0 7a45 	vmovge.f32	s15, s10
 8008f12:	bf8c      	ite	hi
 8008f14:	eef0 5a64 	vmovhi.f32	s11, s9
 8008f18:	eef0 5a45 	vmovls.f32	s11, s10
 8008f1c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f24:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008f28:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8008f2c:	bfa8      	it	ge
 8008f2e:	eef0 7a46 	vmovge.f32	s15, s12
 8008f32:	f200 73c4 	addw	r3, r0, #1988	@ 0x7c4
 8008f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3a:	bf98      	it	ls
 8008f3c:	eef0 5a46 	vmovls.f32	s11, s12
 8008f40:	ee76 4a05 	vadd.f32	s9, s12, s10
 8008f44:	ed93 6a00 	vldr	s12, [r3]
 8008f48:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8008f54:	bfa8      	it	ge
 8008f56:	eef0 7a46 	vmovge.f32	s15, s12
 8008f5a:	f500 63fa 	add.w	r3, r0, #2000	@ 0x7d0
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	bf8c      	ite	hi
 8008f64:	eeb0 5a65 	vmovhi.f32	s10, s11
 8008f68:	eeb0 5a46 	vmovls.f32	s10, s12
 8008f6c:	edd3 5a00 	vldr	s11, [r3]
 8008f70:	eef4 5ae7 	vcmpe.f32	s11, s15
 8008f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f78:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008f7c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8008f80:	bfa8      	it	ge
 8008f82:	eef0 7a65 	vmovge.f32	s15, s11
 8008f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008f8e:	bf88      	it	hi
 8008f90:	eef0 5a45 	vmovhi.f32	s11, s10
 8008f94:	2a05      	cmp	r2, #5
 8008f96:	d065      	beq.n	8009064 <iNemoEngine_API_Update+0x220c>
 8008f98:	f200 73dc 	addw	r3, r0, #2012	@ 0x7dc
 8008f9c:	ed93 5a00 	vldr	s10, [r3]
 8008fa0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8008fac:	bfa8      	it	ge
 8008fae:	eef0 7a45 	vmovge.f32	s15, s10
 8008fb2:	f500 63fd 	add.w	r3, r0, #2024	@ 0x7e8
 8008fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fba:	bf98      	it	ls
 8008fbc:	eef0 5a45 	vmovls.f32	s11, s10
 8008fc0:	ee35 5a06 	vadd.f32	s10, s10, s12
 8008fc4:	ed93 6a00 	vldr	s12, [r3]
 8008fc8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8008fd4:	bfa8      	it	ge
 8008fd6:	eef0 7a46 	vmovge.f32	s15, s12
 8008fda:	f200 73f4 	addw	r3, r0, #2036	@ 0x7f4
 8008fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe2:	bf98      	it	ls
 8008fe4:	eef0 5a46 	vmovls.f32	s11, s12
 8008fe8:	ee36 5a05 	vadd.f32	s10, s12, s10
 8008fec:	ed93 6a00 	vldr	s12, [r3]
 8008ff0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8008ffc:	bfa8      	it	ge
 8008ffe:	eef0 7a46 	vmovge.f32	s15, s12
 8009002:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
 8009006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900a:	bf98      	it	ls
 800900c:	eef0 5a46 	vmovls.f32	s11, s12
 8009010:	ee36 6a05 	vadd.f32	s12, s12, s10
 8009014:	ed93 5a00 	vldr	s10, [r3]
 8009018:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800901c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009020:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8009024:	bfa8      	it	ge
 8009026:	eef0 7a45 	vmovge.f32	s15, s10
 800902a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902e:	bf98      	it	ls
 8009030:	eef0 5a45 	vmovls.f32	s11, s10
 8009034:	2a0a      	cmp	r2, #10
 8009036:	ee35 6a06 	vadd.f32	s12, s10, s12
 800903a:	d113      	bne.n	8009064 <iNemoEngine_API_Update+0x220c>
 800903c:	f600 030c 	addw	r3, r0, #2060	@ 0x80c
 8009040:	ed93 5a00 	vldr	s10, [r3]
 8009044:	eef4 7ac5 	vcmpe.f32	s15, s10
 8009048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8009050:	bfb8      	it	lt
 8009052:	eef0 7a45 	vmovlt.f32	s15, s10
 8009056:	ee36 6a05 	vadd.f32	s12, s12, s10
 800905a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905e:	bf88      	it	hi
 8009060:	eef0 5a45 	vmovhi.f32	s11, s10
 8009064:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009068:	eddf 5a12 	vldr	s11, [pc, #72]	@ 80090b4 <iNemoEngine_API_Update+0x225c>
 800906c:	ed9f 5a12 	vldr	s10, [pc, #72]	@ 80090b8 <iNemoEngine_API_Update+0x2260>
 8009070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009074:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009078:	eef4 7ae5 	vcmpe.f32	s15, s11
 800907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009080:	dc22      	bgt.n	80090c8 <iNemoEngine_API_Update+0x2270>
 8009082:	eef0 7ac6 	vabs.f32	s15, s12
 8009086:	ee27 7a87 	vmul.f32	s14, s15, s14
 800908a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80090bc <iNemoEngine_API_Update+0x2264>
 800908e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	dc17      	bgt.n	80090c8 <iNemoEngine_API_Update+0x2270>
 8009098:	9b06      	ldr	r3, [sp, #24]
 800909a:	795b      	ldrb	r3, [r3, #5]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f002 8117 	beq.w	800b2d0 <iNemoEngine_API_Update+0x4478>
 80090a2:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 80090a6:	2a01      	cmp	r2, #1
 80090a8:	f001 87d1 	beq.w	800b04e <iNemoEngine_API_Update+0x41f6>
 80090ac:	f04f 0901 	mov.w	r9, #1
 80090b0:	f000 bc0b 	b.w	80098ca <iNemoEngine_API_Update+0x2a72>
 80090b4:	3be56041 	.word	0x3be56041
 80090b8:	3dcccccd 	.word	0x3dcccccd
 80090bc:	3e333333 	.word	0x3e333333
 80090c0:	42480000 	.word	0x42480000
 80090c4:	00000000 	.word	0x00000000
 80090c8:	9b06      	ldr	r3, [sp, #24]
 80090ca:	795b      	ldrb	r3, [r3, #5]
 80090cc:	f04f 0900 	mov.w	r9, #0
 80090d0:	f8ad 90ee 	strh.w	r9, [sp, #238]	@ 0xee
 80090d4:	f88d 90f0 	strb.w	r9, [sp, #240]	@ 0xf0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f040 83f1 	bne.w	80098c0 <iNemoEngine_API_Update+0x2a68>
 80090de:	9906      	ldr	r1, [sp, #24]
 80090e0:	f8d1 21bc 	ldr.w	r2, [r1, #444]	@ 0x1bc
 80090e4:	9295      	str	r2, [sp, #596]	@ 0x254
 80090e6:	f8d1 21c0 	ldr.w	r2, [r1, #448]	@ 0x1c0
 80090ea:	9296      	str	r2, [sp, #600]	@ 0x258
 80090ec:	f8d1 21c4 	ldr.w	r2, [r1, #452]	@ 0x1c4
 80090f0:	9297      	str	r2, [sp, #604]	@ 0x25c
 80090f2:	2200      	movs	r2, #0
 80090f4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80090f8:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 80090fc:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 8009100:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 8009104:	704a      	strb	r2, [r1, #1]
 8009106:	ed5f 7a12 	vldr	s15, [pc, #-72]	@ 80090c0 <iNemoEngine_API_Update+0x2268>
 800910a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800910e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009112:	f2c0 8138 	blt.w	8009386 <iNemoEngine_API_Update+0x252e>
 8009116:	9906      	ldr	r1, [sp, #24]
 8009118:	2200      	movs	r2, #0
 800911a:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 800911e:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 8009122:	f881 21a2 	strb.w	r2, [r1, #418]	@ 0x1a2
 8009126:	2b01      	cmp	r3, #1
 8009128:	d125      	bne.n	8009176 <iNemoEngine_API_Update+0x231e>
 800912a:	eddd 4a86 	vldr	s9, [sp, #536]	@ 0x218
 800912e:	ed9d 6a5f 	vldr	s12, [sp, #380]	@ 0x17c
 8009132:	ed9d 5a87 	vldr	s10, [sp, #540]	@ 0x21c
 8009136:	ed9d 7a60 	vldr	s14, [sp, #384]	@ 0x180
 800913a:	eddd 5a88 	vldr	s11, [sp, #544]	@ 0x220
 800913e:	eddd 7a61 	vldr	s15, [sp, #388]	@ 0x184
 8009142:	eeb6 4a08 	vmov.f32	s8, #104	@ 0x3f400000  0.750
 8009146:	ee64 4a84 	vmul.f32	s9, s9, s8
 800914a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800914e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8009152:	ee37 7a07 	vadd.f32	s14, s14, s14
 8009156:	ee65 5a84 	vmul.f32	s11, s11, s8
 800915a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800915e:	edcd 4a86 	vstr	s9, [sp, #536]	@ 0x218
 8009162:	ed8d 6a5f 	vstr	s12, [sp, #380]	@ 0x17c
 8009166:	ed8d 5a87 	vstr	s10, [sp, #540]	@ 0x21c
 800916a:	ed8d 7a60 	vstr	s14, [sp, #384]	@ 0x180
 800916e:	edcd 5a88 	vstr	s11, [sp, #544]	@ 0x220
 8009172:	edcd 7a61 	vstr	s15, [sp, #388]	@ 0x184
 8009176:	9c06      	ldr	r4, [sp, #24]
 8009178:	ed9d 6a60 	vldr	s12, [sp, #384]	@ 0x180
 800917c:	ed94 2a7f 	vldr	s4, [r4, #508]	@ 0x1fc
 8009180:	edd4 1a75 	vldr	s3, [r4, #468]	@ 0x1d4
 8009184:	edd4 2a89 	vldr	s5, [r4, #548]	@ 0x224
 8009188:	edd4 3a93 	vldr	s7, [r4, #588]	@ 0x24c
 800918c:	eddd 0a5f 	vldr	s1, [sp, #380]	@ 0x17c
 8009190:	ed9d 1a61 	vldr	s2, [sp, #388]	@ 0x184
 8009194:	ed94 4a9d 	vldr	s8, [r4, #628]	@ 0x274
 8009198:	edd4 4aa7 	vldr	s9, [r4, #668]	@ 0x29c
 800919c:	ed94 5ab1 	vldr	s10, [r4, #708]	@ 0x2c4
 80091a0:	ed9d 3a8b 	vldr	s6, [sp, #556]	@ 0x22c
 80091a4:	ed9d 7a89 	vldr	s14, [sp, #548]	@ 0x224
 80091a8:	eddd 7a8a 	vldr	s15, [sp, #552]	@ 0x228
 80091ac:	edd4 5abb 	vldr	s11, [r4, #748]	@ 0x2ec
 80091b0:	eea6 2a06 	vfma.f32	s4, s12, s12
 80091b4:	ab83      	add	r3, sp, #524	@ 0x20c
 80091b6:	aa8f      	add	r2, sp, #572	@ 0x23c
 80091b8:	ed9d 6a62 	vldr	s12, [sp, #392]	@ 0x188
 80091bc:	ed84 2a7f 	vstr	s4, [r4, #508]	@ 0x1fc
 80091c0:	eee0 1aa0 	vfma.f32	s3, s1, s1
 80091c4:	a93a      	add	r1, sp, #232	@ 0xe8
 80091c6:	f504 70d6 	add.w	r0, r4, #428	@ 0x1ac
 80091ca:	eee1 2a01 	vfma.f32	s5, s2, s2
 80091ce:	eee6 3a06 	vfma.f32	s7, s12, s12
 80091d2:	eddd 0a63 	vldr	s1, [sp, #396]	@ 0x18c
 80091d6:	ed9d 1a64 	vldr	s2, [sp, #400]	@ 0x190
 80091da:	ed9d 6a65 	vldr	s12, [sp, #404]	@ 0x194
 80091de:	edc4 1a75 	vstr	s3, [r4, #468]	@ 0x1d4
 80091e2:	eea0 4aa0 	vfma.f32	s8, s1, s1
 80091e6:	eee1 4a01 	vfma.f32	s9, s2, s2
 80091ea:	eea6 5a06 	vfma.f32	s10, s12, s12
 80091ee:	eddd 0a66 	vldr	s1, [sp, #408]	@ 0x198
 80091f2:	ed9d 1a67 	vldr	s2, [sp, #412]	@ 0x19c
 80091f6:	ed94 6ac5 	vldr	s12, [r4, #788]	@ 0x314
 80091fa:	edc4 2a89 	vstr	s5, [r4, #548]	@ 0x224
 80091fe:	eee0 5aa0 	vfma.f32	s11, s1, s1
 8009202:	eea1 6a01 	vfma.f32	s12, s2, s2
 8009206:	ee26 7a87 	vmul.f32	s14, s13, s14
 800920a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800920e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8009212:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009216:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800921a:	ee66 8aa8 	vmul.f32	s17, s13, s17
 800921e:	ed8d 7a89 	vstr	s14, [sp, #548]	@ 0x224
 8009222:	edcd 7a8a 	vstr	s15, [sp, #552]	@ 0x228
 8009226:	edc4 3a93 	vstr	s7, [r4, #588]	@ 0x24c
 800922a:	ed84 4a9d 	vstr	s8, [r4, #628]	@ 0x274
 800922e:	edc4 4aa7 	vstr	s9, [r4, #668]	@ 0x29c
 8009232:	ed84 5ab1 	vstr	s10, [r4, #708]	@ 0x2c4
 8009236:	edcd 8a8b 	vstr	s17, [sp, #556]	@ 0x22c
 800923a:	edc4 5abb 	vstr	s11, [r4, #748]	@ 0x2ec
 800923e:	ed84 6ac5 	vstr	s12, [r4, #788]	@ 0x314
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009246:	f7fc fb1d 	bl	8005884 <kf_update>
 800924a:	edd4 6a6d 	vldr	s13, [r4, #436]	@ 0x1b4
 800924e:	ed94 6a6c 	vldr	s12, [r4, #432]	@ 0x1b0
 8009252:	ed94 7a6e 	vldr	s14, [r4, #440]	@ 0x1b8
 8009256:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800925a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800925e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8009262:	eee7 7a07 	vfma.f32	s15, s14, s14
 8009266:	eef4 7ae5 	vcmpe.f32	s15, s11
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	f100 80bb 	bmi.w	80093e8 <iNemoEngine_API_Update+0x2590>
 8009272:	ed5f 5a6c 	vldr	s11, [pc, #-432]	@ 80090c4 <iNemoEngine_API_Update+0x226c>
 8009276:	ed8d 6a52 	vstr	s12, [sp, #328]	@ 0x148
 800927a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800927e:	aa4e      	add	r2, sp, #312	@ 0x138
 8009280:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8009282:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8009286:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800928a:	4611      	mov	r1, r2
 800928c:	ae68      	add	r6, sp, #416	@ 0x1a0
 800928e:	af70      	add	r7, sp, #448	@ 0x1c0
 8009290:	edcd 6a53 	vstr	s13, [sp, #332]	@ 0x14c
 8009294:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8009298:	ed8d 7a54 	vstr	s14, [sp, #336]	@ 0x150
 800929c:	ee27 6a86 	vmul.f32	s12, s15, s12
 80092a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80092a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80092a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80092ac:	edcd 5a55 	vstr	s11, [sp, #340]	@ 0x154
 80092b0:	ed8d 6aae 	vstr	s12, [sp, #696]	@ 0x2b8
 80092b4:	edcd 6aaf 	vstr	s13, [sp, #700]	@ 0x2bc
 80092b8:	ed8d 7ab0 	vstr	s14, [sp, #704]	@ 0x2c0
 80092bc:	edcd 7ab1 	vstr	s15, [sp, #708]	@ 0x2c4
 80092c0:	f7fc f920 	bl	8005504 <qmult>
 80092c4:	ed92 6a01 	vldr	s12, [r2, #4]
 80092c8:	edd2 5a00 	vldr	s11, [r2]
 80092cc:	edd2 6a02 	vldr	s13, [r2, #8]
 80092d0:	ed92 7a03 	vldr	s14, [r2, #12]
 80092d4:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 80092d6:	ee66 7a06 	vmul.f32	s15, s12, s12
 80092da:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 80092de:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80092e2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80092e6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80092ea:	eeb1 5ae7 	vsqrt.f32	s10, s15
 80092ee:	eec4 7a85 	vdiv.f32	s15, s9, s10
 80092f2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80092f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80092fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80092fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009302:	edcd 5a4a 	vstr	s11, [sp, #296]	@ 0x128
 8009306:	ed8d 6a4b 	vstr	s12, [sp, #300]	@ 0x12c
 800930a:	edcd 6a4c 	vstr	s13, [sp, #304]	@ 0x130
 800930e:	ed8d 7a4d 	vstr	s14, [sp, #308]	@ 0x134
 8009312:	4634      	mov	r4, r6
 8009314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009316:	42bc      	cmp	r4, r7
 8009318:	f105 0510 	add.w	r5, r5, #16
 800931c:	f106 0610 	add.w	r6, r6, #16
 8009320:	f845 0c10 	str.w	r0, [r5, #-16]
 8009324:	f845 1c0c 	str.w	r1, [r5, #-12]
 8009328:	f845 2c08 	str.w	r2, [r5, #-8]
 800932c:	f845 3c04 	str.w	r3, [r5, #-4]
 8009330:	d1ef      	bne.n	8009312 <iNemoEngine_API_Update+0x24ba>
 8009332:	6830      	ldr	r0, [r6, #0]
 8009334:	6028      	str	r0, [r5, #0]
 8009336:	9e06      	ldr	r6, [sp, #24]
 8009338:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800933a:	f8d6 31bc 	ldr.w	r3, [r6, #444]	@ 0x1bc
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009342:	f8d6 31c0 	ldr.w	r3, [r6, #448]	@ 0x1c0
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800934a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	@ 0x1c4
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	ad4a      	add	r5, sp, #296	@ 0x128
 8009352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009354:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8009356:	60eb      	str	r3, [r5, #12]
 8009358:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800935a:	6028      	str	r0, [r5, #0]
 800935c:	6069      	str	r1, [r5, #4]
 800935e:	60aa      	str	r2, [r5, #8]
 8009360:	edd6 9a75 	vldr	s19, [r6, #468]	@ 0x1d4
 8009364:	edc3 5a00 	vstr	s11, [r3]
 8009368:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800936a:	f8d6 794c 	ldr.w	r7, [r6, #2380]	@ 0x94c
 800936e:	ed83 6a00 	vstr	s12, [r3]
 8009372:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009374:	edc3 6a00 	vstr	s13, [r3]
 8009378:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800937a:	accc      	add	r4, sp, #816	@ 0x330
 800937c:	ed83 7a00 	vstr	s14, [r3]
 8009380:	4635      	mov	r5, r6
 8009382:	f7fd be20 	b.w	8006fc6 <iNemoEngine_API_Update+0x16e>
 8009386:	9906      	ldr	r1, [sp, #24]
 8009388:	f891 21a2 	ldrb.w	r2, [r1, #418]	@ 0x1a2
 800938c:	2a31      	cmp	r2, #49	@ 0x31
 800938e:	f63f aeca 	bhi.w	8009126 <iNemoEngine_API_Update+0x22ce>
 8009392:	3201      	adds	r2, #1
 8009394:	f881 21a2 	strb.w	r2, [r1, #418]	@ 0x1a2
 8009398:	2200      	movs	r2, #0
 800939a:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 800939e:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 80093a2:	e6c0      	b.n	8009126 <iNemoEngine_API_Update+0x22ce>
 80093a4:	9a06      	ldr	r2, [sp, #24]
 80093a6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f340 8398 	ble.w	8009ade <iNemoEngine_API_Update+0x2c86>
 80093ae:	3b01      	subs	r3, #1
 80093b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80093b2:	2300      	movs	r3, #0
 80093b4:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 80093b8:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 80093bc:	f88d 30f1 	strb.w	r3, [sp, #241]	@ 0xf1
 80093c0:	f88d 30f3 	strb.w	r3, [sp, #243]	@ 0xf3
 80093c4:	f7ff bb8b 	b.w	8008ade <iNemoEngine_API_Update+0x1c86>
 80093c8:	7b53      	ldrb	r3, [r2, #13]
 80093ca:	7b92      	ldrb	r2, [r2, #14]
 80093cc:	f88d 30e8 	strb.w	r3, [sp, #232]	@ 0xe8
 80093d0:	f88d 30e9 	strb.w	r3, [sp, #233]	@ 0xe9
 80093d4:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 80093d8:	f88d 20eb 	strb.w	r2, [sp, #235]	@ 0xeb
 80093dc:	f88d 20ec 	strb.w	r2, [sp, #236]	@ 0xec
 80093e0:	f88d 20ed 	strb.w	r2, [sp, #237]	@ 0xed
 80093e4:	f7ff bb07 	b.w	80089f6 <iNemoEngine_API_Update+0x1b9e>
 80093e8:	ee35 5ae7 	vsub.f32	s10, s11, s15
 80093ec:	eef1 5ac5 	vsqrt.f32	s11, s10
 80093f0:	e741      	b.n	8009276 <iNemoEngine_API_Update+0x241e>
 80093f2:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	@ 0x974
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f341 8173 	ble.w	800a6e2 <iNemoEngine_API_Update+0x388a>
 80093fc:	3b01      	subs	r3, #1
 80093fe:	f8a5 3974 	strh.w	r3, [r5, #2420]	@ 0x974
 8009402:	f7fd bd51 	b.w	8006ea8 <iNemoEngine_API_Update+0x50>
 8009406:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800940a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800940e:	eea7 6a07 	vfma.f32	s12, s14, s14
 8009412:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009416:	eeb0 8a67 	vmov.f32	s16, s15
 800941a:	eef0 7a46 	vmov.f32	s15, s12
 800941e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009422:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8009426:	ee17 0a90 	vmov	r0, s15
 800942a:	f7f7 f88d 	bl	8000548 <__aeabi_f2d>
 800942e:	ee78 7a08 	vadd.f32	s15, s16, s16
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	ee17 0a90 	vmov	r0, s15
 800943a:	ec43 2b18 	vmov	d8, r2, r3
 800943e:	f7f7 f883 	bl	8000548 <__aeabi_f2d>
 8009442:	eeb0 1a48 	vmov.f32	s2, s16
 8009446:	eef0 1a68 	vmov.f32	s3, s17
 800944a:	ec41 0b10 	vmov	d0, r0, r1
 800944e:	f006 fe81 	bl	8010154 <atan2>
 8009452:	a3eb      	add	r3, pc, #940	@ (adr r3, 8009800 <iNemoEngine_API_Update+0x29a8>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	ec51 0b10 	vmov	r0, r1, d0
 800945c:	f7f7 f8cc 	bl	80005f8 <__aeabi_dmul>
 8009460:	4be9      	ldr	r3, [pc, #932]	@ (8009808 <iNemoEngine_API_Update+0x29b0>)
 8009462:	2200      	movs	r2, #0
 8009464:	f7f6 ff12 	bl	800028c <__adddf3>
 8009468:	f7f7 fbbe 	bl	8000be8 <__aeabi_d2f>
 800946c:	ee08 0a10 	vmov	s16, r0
 8009470:	f7fd be3a 	b.w	80070e8 <iNemoEngine_API_Update+0x290>
 8009474:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009478:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800947c:	eea7 6a07 	vfma.f32	s12, s14, s14
 8009480:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009484:	eeb0 8a67 	vmov.f32	s16, s15
 8009488:	eef0 7a46 	vmov.f32	s15, s12
 800948c:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009490:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8009494:	ee17 0a90 	vmov	r0, s15
 8009498:	f7f7 f856 	bl	8000548 <__aeabi_f2d>
 800949c:	ee78 7a08 	vadd.f32	s15, s16, s16
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	ee17 0a90 	vmov	r0, s15
 80094a8:	ec43 2b18 	vmov	d8, r2, r3
 80094ac:	f7f7 f84c 	bl	8000548 <__aeabi_f2d>
 80094b0:	eeb0 1a48 	vmov.f32	s2, s16
 80094b4:	eef0 1a68 	vmov.f32	s3, s17
 80094b8:	ec41 0b10 	vmov	d0, r0, r1
 80094bc:	f006 fe4a 	bl	8010154 <atan2>
 80094c0:	a3cf      	add	r3, pc, #828	@ (adr r3, 8009800 <iNemoEngine_API_Update+0x29a8>)
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	ec51 0b10 	vmov	r0, r1, d0
 80094ca:	f7f7 f895 	bl	80005f8 <__aeabi_dmul>
 80094ce:	4bce      	ldr	r3, [pc, #824]	@ (8009808 <iNemoEngine_API_Update+0x29b0>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	f7f6 fed9 	bl	8000288 <__aeabi_dsub>
 80094d6:	f7f7 fb87 	bl	8000be8 <__aeabi_d2f>
 80094da:	ee08 0a10 	vmov	s16, r0
 80094de:	f7fd be03 	b.w	80070e8 <iNemoEngine_API_Update+0x290>
 80094e2:	ed9f baca 	vldr	s22, [pc, #808]	@ 800980c <iNemoEngine_API_Update+0x29b4>
 80094e6:	49ca      	ldr	r1, [pc, #808]	@ (8009810 <iNemoEngine_API_Update+0x29b8>)
 80094e8:	9806      	ldr	r0, [sp, #24]
 80094ea:	f7fd beba 	b.w	8007262 <iNemoEngine_API_Update+0x40a>
 80094ee:	ee7c 7a27 	vadd.f32	s15, s24, s15
 80094f2:	ee17 0a90 	vmov	r0, s15
 80094f6:	f7f7 f827 	bl	8000548 <__aeabi_f2d>
 80094fa:	ec41 0b10 	vmov	d0, r0, r1
 80094fe:	f007 f89b 	bl	8010638 <floor>
 8009502:	ec51 0b10 	vmov	r0, r1, d0
 8009506:	f7f7 fb6f 	bl	8000be8 <__aeabi_d2f>
 800950a:	ee0c 0a10 	vmov	s24, r0
 800950e:	f7fe b937 	b.w	8007780 <iNemoEngine_API_Update+0x928>
 8009512:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009516:	ee17 0a90 	vmov	r0, s15
 800951a:	f7f7 f815 	bl	8000548 <__aeabi_f2d>
 800951e:	ec41 0b10 	vmov	d0, r0, r1
 8009522:	f007 f889 	bl	8010638 <floor>
 8009526:	ec51 0b10 	vmov	r0, r1, d0
 800952a:	f7f7 fb5d 	bl	8000be8 <__aeabi_d2f>
 800952e:	ee08 0a10 	vmov	s16, r0
 8009532:	f7fe b8fa 	b.w	800772a <iNemoEngine_API_Update+0x8d2>
 8009536:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800953a:	ee17 0a90 	vmov	r0, s15
 800953e:	f7f7 f803 	bl	8000548 <__aeabi_f2d>
 8009542:	ec41 0b10 	vmov	d0, r0, r1
 8009546:	f007 f877 	bl	8010638 <floor>
 800954a:	ec51 0b10 	vmov	r0, r1, d0
 800954e:	f7f7 fb4b 	bl	8000be8 <__aeabi_d2f>
 8009552:	ee08 0a90 	vmov	s17, r0
 8009556:	f7fe b8bd 	b.w	80076d4 <iNemoEngine_API_Update+0x87c>
 800955a:	2c00      	cmp	r4, #0
 800955c:	f47f aa59 	bne.w	8008a12 <iNemoEngine_API_Update+0x1bba>
 8009560:	f8ad 40e8 	strh.w	r4, [sp, #232]	@ 0xe8
 8009564:	f88d 40ea 	strb.w	r4, [sp, #234]	@ 0xea
 8009568:	f88d 40f1 	strb.w	r4, [sp, #241]	@ 0xf1
 800956c:	f88d 40f3 	strb.w	r4, [sp, #243]	@ 0xf3
 8009570:	f7ff ba5c 	b.w	8008a2c <iNemoEngine_API_Update+0x1bd4>
 8009574:	eddf 5aa7 	vldr	s11, [pc, #668]	@ 8009814 <iNemoEngine_API_Update+0x29bc>
 8009578:	ed9f 4aa7 	vldr	s8, [pc, #668]	@ 8009818 <iNemoEngine_API_Update+0x29c0>
 800957c:	ed9f 6aa7 	vldr	s12, [pc, #668]	@ 800981c <iNemoEngine_API_Update+0x29c4>
 8009580:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8009820 <iNemoEngine_API_Update+0x29c8>
 8009584:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8009824 <iNemoEngine_API_Update+0x29cc>
 8009588:	f7ff b9b2 	b.w	80088f0 <iNemoEngine_API_Update+0x1a98>
 800958c:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8009590:	2400      	movs	r4, #0
 8009592:	461a      	mov	r2, r3
 8009594:	f7ff b89f 	b.w	80086d6 <iNemoEngine_API_Update+0x187e>
 8009598:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800959c:	eeb0 4a08 	vmov.f32	s8, #8	@ 0x40400000  3.0
 80095a0:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 80095a4:	eee7 4a84 	vfma.f32	s9, s15, s8
 80095a8:	f7ff b86b 	b.w	8008682 <iNemoEngine_API_Update+0x182a>
 80095ac:	3305      	adds	r3, #5
 80095ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80095b0:	f7ff ba95 	b.w	8008ade <iNemoEngine_API_Update+0x1c86>
 80095b4:	edd2 4a48 	vldr	s9, [r2, #288]	@ 0x120
 80095b8:	eef4 4ae8 	vcmpe.f32	s9, s17
 80095bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c0:	f341 8112 	ble.w	800a7e8 <iNemoEngine_API_Update+0x3990>
 80095c4:	ed92 7a32 	vldr	s14, [r2, #200]	@ 0xc8
 80095c8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80095cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d0:	4613      	mov	r3, r2
 80095d2:	f101 8392 	bmi.w	800acfa <iNemoEngine_API_Update+0x3ea2>
 80095d6:	edd2 7a34 	vldr	s15, [r2, #208]	@ 0xd0
 80095da:	eef4 8ae7 	vcmpe.f32	s17, s15
 80095de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e2:	f141 83a2 	bpl.w	800ad2a <iNemoEngine_API_Update+0x3ed2>
 80095e6:	edd3 3a33 	vldr	s7, [r3, #204]	@ 0xcc
 80095ea:	ed93 4a35 	vldr	s8, [r3, #212]	@ 0xd4
 80095ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095f2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80095f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80095fa:	ee24 7a07 	vmul.f32	s14, s8, s14
 80095fe:	ee87 fa27 	vdiv.f32	s30, s14, s15
 8009602:	ee3f fa23 	vadd.f32	s30, s30, s7
 8009606:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800960a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800960e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009612:	f2c1 83a3 	blt.w	800ad5c <iNemoEngine_API_Update+0x3f04>
 8009616:	9b06      	ldr	r3, [sp, #24]
 8009618:	ed93 7a38 	vldr	s14, [r3, #224]	@ 0xe0
 800961c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8009620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009624:	f141 86ad 	bpl.w	800b382 <iNemoEngine_API_Update+0x452a>
 8009628:	edd3 3a37 	vldr	s7, [r3, #220]	@ 0xdc
 800962c:	ed93 4a39 	vldr	s8, [r3, #228]	@ 0xe4
 8009630:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009634:	ee34 4a63 	vsub.f32	s8, s8, s7
 8009638:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800963c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8009640:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8009644:	ee3f fa23 	vadd.f32	s30, s30, s7
 8009648:	9b06      	ldr	r3, [sp, #24]
 800964a:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 800964e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009656:	f2c1 83a3 	blt.w	800ada0 <iNemoEngine_API_Update+0x3f48>
 800965a:	9b06      	ldr	r3, [sp, #24]
 800965c:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8009660:	eef4 8ac7 	vcmpe.f32	s17, s14
 8009664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009668:	f141 86ca 	bpl.w	800b400 <iNemoEngine_API_Update+0x45a8>
 800966c:	edd3 3a3b 	vldr	s7, [r3, #236]	@ 0xec
 8009670:	ed93 4a3d 	vldr	s8, [r3, #244]	@ 0xf4
 8009674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009678:	ee34 4a63 	vsub.f32	s8, s8, s7
 800967c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8009680:	ee64 7a27 	vmul.f32	s15, s8, s15
 8009684:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8009688:	ee3f fa23 	vadd.f32	s30, s30, s7
 800968c:	9b06      	ldr	r3, [sp, #24]
 800968e:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 8009692:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969a:	f2c1 83a3 	blt.w	800ade4 <iNemoEngine_API_Update+0x3f8c>
 800969e:	9b06      	ldr	r3, [sp, #24]
 80096a0:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 80096a4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80096a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ac:	f141 866c 	bpl.w	800b388 <iNemoEngine_API_Update+0x4530>
 80096b0:	edd3 3a3f 	vldr	s7, [r3, #252]	@ 0xfc
 80096b4:	ed93 4a41 	vldr	s8, [r3, #260]	@ 0x104
 80096b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096bc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80096c0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80096c4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80096c8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80096cc:	ee3f fa23 	vadd.f32	s30, s30, s7
 80096d0:	9b06      	ldr	r3, [sp, #24]
 80096d2:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 80096d6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80096da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096de:	f2c1 83a3 	blt.w	800ae28 <iNemoEngine_API_Update+0x3fd0>
 80096e2:	9b06      	ldr	r3, [sp, #24]
 80096e4:	ed93 7a44 	vldr	s14, [r3, #272]	@ 0x110
 80096e8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80096ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f0:	f141 863c 	bpl.w	800b36c <iNemoEngine_API_Update+0x4514>
 80096f4:	edd3 3a43 	vldr	s7, [r3, #268]	@ 0x10c
 80096f8:	ed93 4a45 	vldr	s8, [r3, #276]	@ 0x114
 80096fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009700:	ee34 4a63 	vsub.f32	s8, s8, s7
 8009704:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8009708:	ee64 7a27 	vmul.f32	s15, s8, s15
 800970c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8009710:	ee3f fa23 	vadd.f32	s30, s30, s7
 8009714:	9b06      	ldr	r3, [sp, #24]
 8009716:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 800971a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800971e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009722:	f6fe ae38 	blt.w	8008396 <iNemoEngine_API_Update+0x153e>
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	ed93 4a47 	vldr	s8, [r3, #284]	@ 0x11c
 800972c:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8009730:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8009734:	ee37 7a44 	vsub.f32	s14, s14, s8
 8009738:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800973c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009740:	ee87 faa4 	vdiv.f32	s30, s15, s9
 8009744:	ee3f fa04 	vadd.f32	s30, s30, s8
 8009748:	f7fe be25 	b.w	8008396 <iNemoEngine_API_Update+0x153e>
 800974c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8009750:	ee17 0a90 	vmov	r0, s15
 8009754:	f7f6 fef8 	bl	8000548 <__aeabi_f2d>
 8009758:	ec41 0b10 	vmov	d0, r0, r1
 800975c:	f006 ff6c 	bl	8010638 <floor>
 8009760:	ec51 0b10 	vmov	r0, r1, d0
 8009764:	f7f7 fa40 	bl	8000be8 <__aeabi_d2f>
 8009768:	ee08 0a90 	vmov	s17, r0
 800976c:	f7fe b930 	b.w	80079d0 <iNemoEngine_API_Update+0xb78>
 8009770:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8009774:	ee17 0a90 	vmov	r0, s15
 8009778:	f7f6 fee6 	bl	8000548 <__aeabi_f2d>
 800977c:	ec41 0b10 	vmov	d0, r0, r1
 8009780:	f006 ff5a 	bl	8010638 <floor>
 8009784:	ec51 0b10 	vmov	r0, r1, d0
 8009788:	f7f7 fa2e 	bl	8000be8 <__aeabi_d2f>
 800978c:	ee08 0a90 	vmov	s17, r0
 8009790:	f7fe b8b5 	b.w	80078fe <iNemoEngine_API_Update+0xaa6>
 8009794:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8009798:	ee17 0a90 	vmov	r0, s15
 800979c:	f7f6 fed4 	bl	8000548 <__aeabi_f2d>
 80097a0:	ec41 0b10 	vmov	d0, r0, r1
 80097a4:	f006 ff48 	bl	8010638 <floor>
 80097a8:	ec51 0b10 	vmov	r0, r1, d0
 80097ac:	f7f7 fa1c 	bl	8000be8 <__aeabi_d2f>
 80097b0:	ee0c 0a10 	vmov	s24, r0
 80097b4:	f7fe b878 	b.w	80078a8 <iNemoEngine_API_Update+0xa50>
 80097b8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80097bc:	ee17 0a90 	vmov	r0, s15
 80097c0:	f7f6 fec2 	bl	8000548 <__aeabi_f2d>
 80097c4:	ec41 0b10 	vmov	d0, r0, r1
 80097c8:	f006 ff36 	bl	8010638 <floor>
 80097cc:	ec51 0b10 	vmov	r0, r1, d0
 80097d0:	f7f7 fa0a 	bl	8000be8 <__aeabi_d2f>
 80097d4:	ee08 0a10 	vmov	s16, r0
 80097d8:	f7fe b83b 	b.w	8007852 <iNemoEngine_API_Update+0x9fa>
 80097dc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80097e0:	ee17 0a90 	vmov	r0, s15
 80097e4:	f7f6 feb0 	bl	8000548 <__aeabi_f2d>
 80097e8:	ec41 0b10 	vmov	d0, r0, r1
 80097ec:	f006 ff24 	bl	8010638 <floor>
 80097f0:	ec51 0b10 	vmov	r0, r1, d0
 80097f4:	f7f7 f9f8 	bl	8000be8 <__aeabi_d2f>
 80097f8:	ee08 0a10 	vmov	s16, r0
 80097fc:	f7fe b93e 	b.w	8007a7c <iNemoEngine_API_Update+0xc24>
 8009800:	20000000 	.word	0x20000000
 8009804:	404ca5dc 	.word	0x404ca5dc
 8009808:	40568000 	.word	0x40568000
 800980c:	3dcccccd 	.word	0x3dcccccd
 8009810:	3a83126f 	.word	0x3a83126f
 8009814:	3c75c28f 	.word	0x3c75c28f
 8009818:	391d4951 	.word	0x391d4951
 800981c:	383cbe62 	.word	0x383cbe62
 8009820:	469c3e00 	.word	0x469c3e00
 8009824:	43168000 	.word	0x43168000
 8009828:	3d088889 	.word	0x3d088889
 800982c:	3e4ccccd 	.word	0x3e4ccccd
 8009830:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8009834:	ee17 0a90 	vmov	r0, s15
 8009838:	f7f6 fe86 	bl	8000548 <__aeabi_f2d>
 800983c:	ec41 0b10 	vmov	d0, r0, r1
 8009840:	f006 fefa 	bl	8010638 <floor>
 8009844:	ec51 0b10 	vmov	r0, r1, d0
 8009848:	f7f7 f9ce 	bl	8000be8 <__aeabi_d2f>
 800984c:	ee0c 0a10 	vmov	s24, r0
 8009850:	f7fe b8e9 	b.w	8007a26 <iNemoEngine_API_Update+0xbce>
 8009854:	2a00      	cmp	r2, #0
 8009856:	f43f a910 	beq.w	8008a7a <iNemoEngine_API_Update+0x1c22>
 800985a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800985e:	ee39 9a47 	vsub.f32	s18, s18, s14
 8009862:	eef0 7ac9 	vabs.f32	s15, s18
 8009866:	ee29 9a09 	vmul.f32	s18, s18, s18
 800986a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800986e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009872:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8009876:	bfb8      	it	lt
 8009878:	eef0 7a46 	vmovlt.f32	s15, s12
 800987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009880:	edcd 7a8d 	vstr	s15, [sp, #564]	@ 0x234
 8009884:	f77f a900 	ble.w	8008a88 <iNemoEngine_API_Update+0x1c30>
 8009888:	eddd 7a86 	vldr	s15, [sp, #536]	@ 0x218
 800988c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009890:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8009894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009898:	f77f a8f6 	ble.w	8008a88 <iNemoEngine_API_Update+0x1c30>
 800989c:	ee67 7a89 	vmul.f32	s15, s15, s18
 80098a0:	edcd 7a86 	vstr	s15, [sp, #536]	@ 0x218
 80098a4:	eddd 7a87 	vldr	s15, [sp, #540]	@ 0x21c
 80098a8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80098ac:	edcd 7a87 	vstr	s15, [sp, #540]	@ 0x21c
 80098b0:	eddd 7a88 	vldr	s15, [sp, #544]	@ 0x220
 80098b4:	ee27 9a89 	vmul.f32	s18, s15, s18
 80098b8:	ed8d 9a88 	vstr	s18, [sp, #544]	@ 0x220
 80098bc:	f7ff b8e4 	b.w	8008a88 <iNemoEngine_API_Update+0x1c30>
 80098c0:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 80098c4:	2a01      	cmp	r2, #1
 80098c6:	f000 877b 	beq.w	800a7c0 <iNemoEngine_API_Update+0x3968>
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	f040 8778 	bne.w	800a7c0 <iNemoEngine_API_Update+0x3968>
 80098d0:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 80098d4:	9a06      	ldr	r2, [sp, #24]
 80098d6:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 80098da:	f240 1301 	movw	r3, #257	@ 0x101
 80098de:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee
 80098e2:	2301      	movs	r3, #1
 80098e4:	f88d 30f0 	strb.w	r3, [sp, #240]	@ 0xf0
 80098e8:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 80098ec:	ed92 6a64 	vldr	s12, [r2, #400]	@ 0x190
 80098f0:	ed8d 7a3d 	vstr	s14, [sp, #244]	@ 0xf4
 80098f4:	eecb 5a27 	vdiv.f32	s11, s22, s15
 80098f8:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c
 80098fc:	edcd 5a3e 	vstr	s11, [sp, #248]	@ 0xf8
 8009900:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 8009904:	eeb4 5a00 	vmov.f32	s10, #64	@ 0x3e000000  0.125
 8009908:	ee26 6a05 	vmul.f32	s12, s12, s10
 800990c:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 8009910:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8009914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009918:	f280 87d8 	bge.w	800a8cc <iNemoEngine_API_Update+0x3a74>
 800991c:	ed9d 6a18 	vldr	s12, [sp, #96]	@ 0x60
 8009920:	eeb4 dac6 	vcmpe.f32	s26, s12
 8009924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009928:	f341 83a4 	ble.w	800b074 <iNemoEngine_API_Update+0x421c>
 800992c:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 8009930:	eeb4 6acb 	vcmpe.f32	s12, s22
 8009934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009938:	f341 839c 	ble.w	800b074 <iNemoEngine_API_Update+0x421c>
 800993c:	ed9d 6a17 	vldr	s12, [sp, #92]	@ 0x5c
 8009940:	eeb4 6aed 	vcmpe.f32	s12, s27
 8009944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009948:	f341 8394 	ble.w	800b074 <iNemoEngine_API_Update+0x421c>
 800994c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8009950:	eeb4 8ac6 	vcmpe.f32	s16, s12
 8009954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009958:	f141 838c 	bpl.w	800b074 <iNemoEngine_API_Update+0x421c>
 800995c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009960:	eeb7 6a08 	vmov.f32	s12, #120	@ 0x3fc00000  1.5
 8009964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009968:	eef4 7ac6 	vcmpe.f32	s15, s12
 800996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009970:	f141 8380 	bpl.w	800b074 <iNemoEngine_API_Update+0x421c>
 8009974:	2300      	movs	r3, #0
 8009976:	f8a2 31a6 	strh.w	r3, [r2, #422]	@ 0x1a6
 800997a:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 800997e:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8009982:	2a00      	cmp	r2, #0
 8009984:	f040 87c7 	bne.w	800a916 <iNemoEngine_API_Update+0x3abe>
 8009988:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800998a:	a840      	add	r0, sp, #256	@ 0x100
 800998c:	f04f 31ff 	mov.w	r1, #4294967295
 8009990:	4613      	mov	r3, r2
 8009992:	edd2 7a00 	vldr	s15, [r2]
 8009996:	3101      	adds	r1, #1
 8009998:	330c      	adds	r3, #12
 800999a:	3204      	adds	r2, #4
 800999c:	461c      	mov	r4, r3
 800999e:	ed94 7a00 	vldr	s14, [r4]
 80099a2:	330c      	adds	r3, #12
 80099a4:	4598      	cmp	r8, r3
 80099a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099aa:	d1f7      	bne.n	800999c <iNemoEngine_API_Update+0x2b44>
 80099ac:	2902      	cmp	r1, #2
 80099ae:	ece0 7a01 	vstmia	r0!, {s15}
 80099b2:	f108 0804 	add.w	r8, r8, #4
 80099b6:	d1eb      	bne.n	8009990 <iNemoEngine_API_Update+0x2b38>
 80099b8:	ed5f 7a65 	vldr	s15, [pc, #-404]	@ 8009828 <iNemoEngine_API_Update+0x29d0>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	eddd 4a40 	vldr	s9, [sp, #256]	@ 0x100
 80099c2:	ed9d 5a41 	vldr	s10, [sp, #260]	@ 0x104
 80099c6:	eddd 5a42 	vldr	s11, [sp, #264]	@ 0x108
 80099ca:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 80099cc:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 80099d0:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80099d4:	ee25 5a27 	vmul.f32	s10, s10, s15
 80099d8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80099dc:	f503 71b2 	add.w	r1, r3, #356	@ 0x164
 80099e0:	4602      	mov	r2, r0
 80099e2:	edd2 7a7c 	vldr	s15, [r2, #496]	@ 0x1f0
 80099e6:	f5a2 73ae 	sub.w	r3, r2, #348	@ 0x15c
 80099ea:	ed93 7ad6 	vldr	s14, [r3, #856]	@ 0x358
 80099ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f6:	f103 030c 	add.w	r3, r3, #12
 80099fa:	bf88      	it	hi
 80099fc:	eef0 7a47 	vmovhi.f32	s15, s14
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d1f2      	bne.n	80099ea <iNemoEngine_API_Update+0x2b92>
 8009a04:	1d1a      	adds	r2, r3, #4
 8009a06:	4291      	cmp	r1, r2
 8009a08:	ece4 7a01 	vstmia	r4!, {s15}
 8009a0c:	d1e9      	bne.n	80099e2 <iNemoEngine_API_Update+0x2b8a>
 8009a0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009a10:	ed9d 4a3d 	vldr	s8, [sp, #244]	@ 0xf4
 8009a14:	edd3 7a00 	vldr	s15, [r3]
 8009a18:	ed9d 7a3e 	vldr	s14, [sp, #248]	@ 0xf8
 8009a1c:	ed9d 6a3f 	vldr	s12, [sp, #252]	@ 0xfc
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	ee97 7a85 	vfnms.f32	s14, s15, s10
 8009a2c:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 8009a30:	eef0 4a47 	vmov.f32	s9, s14
 8009a34:	ed8d 4a40 	vstr	s8, [sp, #256]	@ 0x100
 8009a38:	ed8d 7a41 	vstr	s14, [sp, #260]	@ 0x104
 8009a3c:	ed8d 6a42 	vstr	s12, [sp, #264]	@ 0x108
 8009a40:	b13b      	cbz	r3, 8009a52 <iNemoEngine_API_Update+0x2bfa>
 8009a42:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8009a46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4e:	f101 83e1 	bmi.w	800b214 <iNemoEngine_API_Update+0x43bc>
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
 8009a58:	2a1e      	cmp	r2, #30
 8009a5a:	f001 843c 	beq.w	800b2d6 <iNemoEngine_API_Update+0x447e>
 8009a5e:	1c53      	adds	r3, r2, #1
 8009a60:	2aff      	cmp	r2, #255	@ 0xff
 8009a62:	9906      	ldr	r1, [sp, #24]
 8009a64:	bf14      	ite	ne
 8009a66:	b2db      	uxtbne	r3, r3
 8009a68:	23ff      	moveq	r3, #255	@ 0xff
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f881 31a1 	strb.w	r3, [r1, #417]	@ 0x1a1
 8009a70:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 8009a74:	464b      	mov	r3, r9
 8009a76:	f7ff bb46 	b.w	8009106 <iNemoEngine_API_Update+0x22ae>
 8009a7a:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 800982c <iNemoEngine_API_Update+0x29d4>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f7fd bc03 	b.w	800728a <iNemoEngine_API_Update+0x432>
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f43e afe0 	beq.w	8008a4a <iNemoEngine_API_Update+0x1bf2>
 8009a8a:	f89d 30e8 	ldrb.w	r3, [sp, #232]	@ 0xe8
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d002      	beq.n	8009a98 <iNemoEngine_API_Update+0x2c40>
 8009a92:	2c01      	cmp	r4, #1
 8009a94:	f47e afe2 	bne.w	8008a5c <iNemoEngine_API_Update+0x1c04>
 8009a98:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c
 8009a9c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8009aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa4:	bfb8      	it	lt
 8009aa6:	eeb0 5a67 	vmovlt.f32	s10, s15
 8009aaa:	ed8d 5a83 	vstr	s10, [sp, #524]	@ 0x20c
 8009aae:	ed8d 5a84 	vstr	s10, [sp, #528]	@ 0x210
 8009ab2:	ed8d 5a85 	vstr	s10, [sp, #532]	@ 0x214
 8009ab6:	f7fe bfd1 	b.w	8008a5c <iNemoEngine_API_Update+0x1c04>
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	49c6      	ldr	r1, [pc, #792]	@ (8009dd8 <iNemoEngine_API_Update+0x2f80>)
 8009abe:	ed93 ba05 	vldr	s22, [r3, #20]
 8009ac2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fd bbc9 	b.w	8007262 <iNemoEngine_API_Update+0x40a>
 8009ad0:	9b06      	ldr	r3, [sp, #24]
 8009ad2:	49c2      	ldr	r1, [pc, #776]	@ (8009ddc <iNemoEngine_API_Update+0x2f84>)
 8009ad4:	ed93 ba05 	vldr	s22, [r3, #20]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fd bbc2 	b.w	8007262 <iNemoEngine_API_Update+0x40a>
 8009ade:	4611      	mov	r1, r2
 8009ae0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009ae2:	2a00      	cmp	r2, #0
 8009ae4:	dd0c      	ble.n	8009b00 <iNemoEngine_API_Update+0x2ca8>
 8009ae6:	ed9d 7a03 	vldr	s14, [sp, #12]
 8009aea:	eef5 7a08 	vmov.f32	s15, #88	@ 0x3ec00000  0.375
 8009aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af6:	dd03      	ble.n	8009b00 <iNemoEngine_API_Update+0x2ca8>
 8009af8:	3a01      	subs	r2, #1
 8009afa:	65ca      	str	r2, [r1, #92]	@ 0x5c
 8009afc:	f7fe bfef 	b.w	8008ade <iNemoEngine_API_Update+0x1c86>
 8009b00:	ed9d 7a16 	vldr	s14, [sp, #88]	@ 0x58
 8009b04:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b0c:	eeb4 bac7 	vcmpe.f32	s22, s14
 8009b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b14:	f57e afe3 	bpl.w	8008ade <iNemoEngine_API_Update+0x1c86>
 8009b18:	ed9d 7a17 	vldr	s14, [sp, #92]	@ 0x5c
 8009b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b20:	eef4 dae7 	vcmpe.f32	s27, s15
 8009b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b28:	f57e afd9 	bpl.w	8008ade <iNemoEngine_API_Update+0x1c86>
 8009b2c:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 8009b30:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 8009b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	f341 8492 	ble.w	800b464 <iNemoEngine_API_Update+0x460c>
 8009b40:	9a06      	ldr	r2, [sp, #24]
 8009b42:	3303      	adds	r3, #3
 8009b44:	e434      	b.n	80093b0 <iNemoEngine_API_Update+0x2558>
 8009b46:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8009de0 <iNemoEngine_API_Update+0x2f88>
 8009b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b52:	f57e ae7b 	bpl.w	800884c <iNemoEngine_API_Update+0x19f4>
 8009b56:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8009de4 <iNemoEngine_API_Update+0x2f8c>
 8009b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b62:	f280 80c9 	bge.w	8009cf8 <iNemoEngine_API_Update+0x2ea0>
 8009b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b6a:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8009de8 <iNemoEngine_API_Update+0x2f90>
 8009b6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b76:	f280 80d5 	bge.w	8009d24 <iNemoEngine_API_Update+0x2ecc>
 8009b7a:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8009dec <iNemoEngine_API_Update+0x2f94>
 8009b7e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b86:	f280 80e3 	bge.w	8009d50 <iNemoEngine_API_Update+0x2ef8>
 8009b8a:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009df0 <iNemoEngine_API_Update+0x2f98>
 8009b8e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b96:	f280 80f1 	bge.w	8009d7c <iNemoEngine_API_Update+0x2f24>
 8009b9a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8009df4 <iNemoEngine_API_Update+0x2f9c>
 8009b9e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba6:	f280 80ff 	bge.w	8009da8 <iNemoEngine_API_Update+0x2f50>
 8009baa:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8009bae:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb6:	db0d      	blt.n	8009bd4 <iNemoEngine_API_Update+0x2d7c>
 8009bb8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8009bbc:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8009df8 <iNemoEngine_API_Update+0x2fa0>
 8009bc0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009bc4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009bc8:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009bcc:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8009dfc <iNemoEngine_API_Update+0x2fa4>
 8009bd0:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009bd4:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8009e00 <iNemoEngine_API_Update+0x2fa8>
 8009bd8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be0:	f141 82fa 	bpl.w	800b1d8 <iNemoEngine_API_Update+0x4380>
 8009be4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009de0 <iNemoEngine_API_Update+0x2f88>
 8009be8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf0:	f2c1 82fa 	blt.w	800b1e8 <iNemoEngine_API_Update+0x4390>
 8009bf4:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8009de4 <iNemoEngine_API_Update+0x2f8c>
 8009bf8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c00:	f141 8296 	bpl.w	800b130 <iNemoEngine_API_Update+0x42d8>
 8009c04:	ed9f 6a76 	vldr	s12, [pc, #472]	@ 8009de0 <iNemoEngine_API_Update+0x2f88>
 8009c08:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009e04 <iNemoEngine_API_Update+0x2fac>
 8009c0c:	eddf 5a7e 	vldr	s11, [pc, #504]	@ 8009e08 <iNemoEngine_API_Update+0x2fb0>
 8009c10:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8009c14:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009c18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c1c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009c20:	ed9f 6a71 	vldr	s12, [pc, #452]	@ 8009de8 <iNemoEngine_API_Update+0x2f90>
 8009c24:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2c:	f2c1 8296 	blt.w	800b15c <iNemoEngine_API_Update+0x4304>
 8009c30:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009dec <iNemoEngine_API_Update+0x2f94>
 8009c34:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3c:	f141 8296 	bpl.w	800b16c <iNemoEngine_API_Update+0x4314>
 8009c40:	ed9f 6a69 	vldr	s12, [pc, #420]	@ 8009de8 <iNemoEngine_API_Update+0x2f90>
 8009c44:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8009e0c <iNemoEngine_API_Update+0x2fb4>
 8009c48:	eddf 5a71 	vldr	s11, [pc, #452]	@ 8009e10 <iNemoEngine_API_Update+0x2fb8>
 8009c4c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8009c50:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009c54:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009e14 <iNemoEngine_API_Update+0x2fbc>
 8009c58:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009c5c:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8009df0 <iNemoEngine_API_Update+0x2f98>
 8009c60:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c68:	f2c1 8296 	blt.w	800b198 <iNemoEngine_API_Update+0x4340>
 8009c6c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8009df4 <iNemoEngine_API_Update+0x2f9c>
 8009c70:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c78:	f141 8296 	bpl.w	800b1a8 <iNemoEngine_API_Update+0x4350>
 8009c7c:	ed9f 6a5c 	vldr	s12, [pc, #368]	@ 8009df0 <iNemoEngine_API_Update+0x2f98>
 8009c80:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8009e18 <iNemoEngine_API_Update+0x2fc0>
 8009c84:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8009c88:	eef2 5a04 	vmov.f32	s11, #36	@ 0x41200000  10.0
 8009c8c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009c90:	eef7 6a0c 	vmov.f32	s13, #124	@ 0x3fe00000  1.750
 8009c94:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009c98:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009c9c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca4:	db0d      	blt.n	8009cc2 <iNemoEngine_API_Update+0x2e6a>
 8009ca6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009caa:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8009e1c <iNemoEngine_API_Update+0x2fc4>
 8009cae:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8009cb2:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8009cb6:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009cba:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8009e20 <iNemoEngine_API_Update+0x2fc8>
 8009cbe:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009cc2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009cc6:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009cca:	eeb0 5a00 	vmov.f32	s10, #0	@ 0x40000000  2.0
 8009cce:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8009cd2:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8009de4 <iNemoEngine_API_Update+0x2f8c>
 8009cd6:	ed9f 4a42 	vldr	s8, [pc, #264]	@ 8009de0 <iNemoEngine_API_Update+0x2f88>
 8009cda:	eef4 5ac6 	vcmpe.f32	s11, s12
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	bfb8      	it	lt
 8009ce4:	eef0 5a46 	vmovlt.f32	s11, s12
 8009ce8:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8009e24 <iNemoEngine_API_Update+0x2fcc>
 8009cec:	ee25 4a84 	vmul.f32	s8, s11, s8
 8009cf0:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009cf4:	f7fe bdfc 	b.w	80088f0 <iNemoEngine_API_Update+0x1a98>
 8009cf8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009de8 <iNemoEngine_API_Update+0x2f90>
 8009cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d04:	d50e      	bpl.n	8009d24 <iNemoEngine_API_Update+0x2ecc>
 8009d06:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009de4 <iNemoEngine_API_Update+0x2f8c>
 8009d0a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8009e28 <iNemoEngine_API_Update+0x2fd0>
 8009d0e:	ed9f 6a47 	vldr	s12, [pc, #284]	@ 8009e2c <iNemoEngine_API_Update+0x2fd4>
 8009d12:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009d16:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009d1a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009e30 <iNemoEngine_API_Update+0x2fd8>
 8009d1e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009d22:	e72a      	b.n	8009b7a <iNemoEngine_API_Update+0x2d22>
 8009d24:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009dec <iNemoEngine_API_Update+0x2f94>
 8009d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d30:	d50e      	bpl.n	8009d50 <iNemoEngine_API_Update+0x2ef8>
 8009d32:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8009de8 <iNemoEngine_API_Update+0x2f90>
 8009d36:	ed9f 6a36 	vldr	s12, [pc, #216]	@ 8009e10 <iNemoEngine_API_Update+0x2fb8>
 8009d3a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009d3e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8009d42:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009d46:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009d4a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009d4e:	e71c      	b.n	8009b8a <iNemoEngine_API_Update+0x2d32>
 8009d50:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8009df0 <iNemoEngine_API_Update+0x2f98>
 8009d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5c:	d50e      	bpl.n	8009d7c <iNemoEngine_API_Update+0x2f24>
 8009d5e:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8009dec <iNemoEngine_API_Update+0x2f94>
 8009d62:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009d66:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8009d6a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009d6e:	eeb3 6a04 	vmov.f32	s12, #52	@ 0x41a00000  20.0
 8009d72:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009d76:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009d7a:	e70e      	b.n	8009b9a <iNemoEngine_API_Update+0x2d42>
 8009d7c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009df4 <iNemoEngine_API_Update+0x2f9c>
 8009d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	d50e      	bpl.n	8009da8 <iNemoEngine_API_Update+0x2f50>
 8009d8a:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8009df0 <iNemoEngine_API_Update+0x2f98>
 8009d8e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8009e34 <iNemoEngine_API_Update+0x2fdc>
 8009d92:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009d96:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8009d9a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009d9e:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8009da2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009da6:	e700      	b.n	8009baa <iNemoEngine_API_Update+0x2d52>
 8009da8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db4:	f57f af00 	bpl.w	8009bb8 <iNemoEngine_API_Update+0x2d60>
 8009db8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009df4 <iNemoEngine_API_Update+0x2f9c>
 8009dbc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8009e38 <iNemoEngine_API_Update+0x2fe0>
 8009dc0:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8009e3c <iNemoEngine_API_Update+0x2fe4>
 8009dc4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009dc8:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009dcc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8009e40 <iNemoEngine_API_Update+0x2fe8>
 8009dd0:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009dd4:	e6fe      	b.n	8009bd4 <iNemoEngine_API_Update+0x2d7c>
 8009dd6:	bf00      	nop
 8009dd8:	3727c5ac 	.word	0x3727c5ac
 8009ddc:	3ac49ba6 	.word	0x3ac49ba6
 8009de0:	3c23d70a 	.word	0x3c23d70a
 8009de4:	3c75c28f 	.word	0x3c75c28f
 8009de8:	3cf5c28f 	.word	0x3cf5c28f
 8009dec:	3d4ccccd 	.word	0x3d4ccccd
 8009df0:	3dcccccd 	.word	0x3dcccccd
 8009df4:	3e4ccccd 	.word	0x3e4ccccd
 8009df8:	46979000 	.word	0x46979000
 8009dfc:	4415c000 	.word	0x4415c000
 8009e00:	3ba3d70a 	.word	0x3ba3d70a
 8009e04:	3d4cccc0 	.word	0x3d4cccc0
 8009e08:	43480000 	.word	0x43480000
 8009e0c:	3eb33334 	.word	0x3eb33334
 8009e10:	4247ffff 	.word	0x4247ffff
 8009e14:	3f933333 	.word	0x3f933333
 8009e18:	410c0000 	.word	0x410c0000
 8009e1c:	42c80000 	.word	0x42c80000
 8009e20:	424a0000 	.word	0x424a0000
 8009e24:	3b449ba6 	.word	0x3b449ba6
 8009e28:	3ecccccc 	.word	0x3ecccccc
 8009e2c:	42855556 	.word	0x42855556
 8009e30:	3fcccccd 	.word	0x3fcccccd
 8009e34:	42d40000 	.word	0x42d40000
 8009e38:	43f00000 	.word	0x43f00000
 8009e3c:	40555555 	.word	0x40555555
 8009e40:	42ee0000 	.word	0x42ee0000
 8009e44:	4615      	mov	r5, r2
 8009e46:	f205 47b4 	addw	r7, r5, #1204	@ 0x4b4
 8009e4a:	49d7      	ldr	r1, [pc, #860]	@ (800a1a8 <iNemoEngine_API_Update+0x3350>)
 8009e4c:	4ad7      	ldr	r2, [pc, #860]	@ (800a1ac <iNemoEngine_API_Update+0x3354>)
 8009e4e:	4bd8      	ldr	r3, [pc, #864]	@ (800a1b0 <iNemoEngine_API_Update+0x3358>)
 8009e50:	2000      	movs	r0, #0
 8009e52:	f885 0318 	strb.w	r0, [r5, #792]	@ 0x318
 8009e56:	f205 6824 	addw	r8, r5, #1572	@ 0x624
 8009e5a:	6039      	str	r1, [r7, #0]
 8009e5c:	f205 7194 	addw	r1, r5, #1940	@ 0x794
 8009e60:	f8c8 2000 	str.w	r2, [r8]
 8009e64:	600b      	str	r3, [r1, #0]
 8009e66:	f895 64b1 	ldrb.w	r6, [r5, #1201]	@ 0x4b1
 8009e6a:	911b      	str	r1, [sp, #108]	@ 0x6c
 8009e6c:	2e00      	cmp	r6, #0
 8009e6e:	f001 8297 	beq.w	800b3a0 <iNemoEngine_API_Update+0x4548>
 8009e72:	eddf 7ad0 	vldr	s15, [pc, #832]	@ 800a1b4 <iNemoEngine_API_Update+0x335c>
 8009e76:	ee68 faa7 	vmul.f32	s31, s17, s15
 8009e7a:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 8009e7e:	ee28 fa27 	vmul.f32	s30, s16, s15
 8009e82:	ee6c da27 	vmul.f32	s27, s24, s15
 8009e86:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8009e8a:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8009e8e:	ee17 0a90 	vmov	r0, s15
 8009e92:	f7f6 fb59 	bl	8000548 <__aeabi_f2d>
 8009e96:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8009e9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e9e:	ee17 0a90 	vmov	r0, s15
 8009ea2:	f7f6 fb51 	bl	8000548 <__aeabi_f2d>
 8009ea6:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8009eaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009eae:	ee17 0a90 	vmov	r0, s15
 8009eb2:	f7f6 fb49 	bl	8000548 <__aeabi_f2d>
 8009eb6:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8009eba:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009ebe:	ee17 0a90 	vmov	r0, s15
 8009ec2:	f7f6 fb41 	bl	8000548 <__aeabi_f2d>
 8009ec6:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8009eca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ece:	ee17 0a90 	vmov	r0, s15
 8009ed2:	f7f6 fb39 	bl	8000548 <__aeabi_f2d>
 8009ed6:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	ee17 0a90 	vmov	r0, s15
 8009ee2:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ee6:	f7f6 fb2f 	bl	8000548 <__aeabi_f2d>
 8009eea:	9b06      	ldr	r3, [sp, #24]
 8009eec:	ed9f bab8 	vldr	s22, [pc, #736]	@ 800a1d0 <iNemoEngine_API_Update+0x3378>
 8009ef0:	eef0 7aef 	vabs.f32	s15, s31
 8009ef4:	edcd 7a03 	vstr	s15, [sp, #12]
 8009ef8:	eef0 7acf 	vabs.f32	s15, s30
 8009efc:	f503 6597 	add.w	r5, r3, #1208	@ 0x4b8
 8009f00:	edcd 7a04 	vstr	s15, [sp, #16]
 8009f04:	230c      	movs	r3, #12
 8009f06:	eef0 7aed 	vabs.f32	s15, s27
 8009f0a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8009f0e:	fb13 5606 	smlabb	r6, r3, r6, r5
 8009f12:	edcd 7a05 	vstr	s15, [sp, #20]
 8009f16:	46aa      	mov	sl, r5
 8009f18:	e060      	b.n	8009fdc <iNemoEngine_API_Update+0x3184>
 8009f1a:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 800a1b8 <iNemoEngine_API_Update+0x3360>
 8009f1e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f26:	f280 8162 	bge.w	800a1ee <iNemoEngine_API_Update+0x3396>
 8009f2a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800a1bc <iNemoEngine_API_Update+0x3364>
 8009f2e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f36:	f300 816c 	bgt.w	800a212 <iNemoEngine_API_Update+0x33ba>
 8009f3a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009f3e:	f006 faff 	bl	8010540 <ceil>
 8009f42:	ec51 0b10 	vmov	r0, r1, d0
 8009f46:	f7f6 fe4f 	bl	8000be8 <__aeabi_d2f>
 8009f4a:	eddd 7a04 	vldr	s15, [sp, #16]
 8009f4e:	f8ca 0000 	str.w	r0, [sl]
 8009f52:	eef4 7acb 	vcmpe.f32	s15, s22
 8009f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5a:	f140 8121 	bpl.w	800a1a0 <iNemoEngine_API_Update+0x3348>
 8009f5e:	eddf 7a96 	vldr	s15, [pc, #600]	@ 800a1b8 <iNemoEngine_API_Update+0x3360>
 8009f62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6a:	f280 8137 	bge.w	800a1dc <iNemoEngine_API_Update+0x3384>
 8009f6e:	eddf 7a93 	vldr	s15, [pc, #588]	@ 800a1bc <iNemoEngine_API_Update+0x3364>
 8009f72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7a:	f300 8257 	bgt.w	800a42c <iNemoEngine_API_Update+0x35d4>
 8009f7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f82:	f006 fadd 	bl	8010540 <ceil>
 8009f86:	ec51 0b10 	vmov	r0, r1, d0
 8009f8a:	f7f6 fe2d 	bl	8000be8 <__aeabi_d2f>
 8009f8e:	eddd 7a05 	vldr	s15, [sp, #20]
 8009f92:	f8ca 0004 	str.w	r0, [sl, #4]
 8009f96:	eef4 7acb 	vcmpe.f32	s15, s22
 8009f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9e:	d527      	bpl.n	8009ff0 <iNemoEngine_API_Update+0x3198>
 8009fa0:	eddf 7a85 	vldr	s15, [pc, #532]	@ 800a1b8 <iNemoEngine_API_Update+0x3360>
 8009fa4:	eeb4 cae7 	vcmpe.f32	s24, s15
 8009fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fac:	f280 8128 	bge.w	800a200 <iNemoEngine_API_Update+0x33a8>
 8009fb0:	eddf 7a82 	vldr	s15, [pc, #520]	@ 800a1bc <iNemoEngine_API_Update+0x3364>
 8009fb4:	eeb4 cae7 	vcmpe.f32	s24, s15
 8009fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbc:	f300 812b 	bgt.w	800a216 <iNemoEngine_API_Update+0x33be>
 8009fc0:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 8009fc4:	f006 fabc 	bl	8010540 <ceil>
 8009fc8:	ec51 0b10 	vmov	r0, r1, d0
 8009fcc:	f7f6 fe0c 	bl	8000be8 <__aeabi_d2f>
 8009fd0:	f8ca 0008 	str.w	r0, [sl, #8]
 8009fd4:	f10a 0a0c 	add.w	sl, sl, #12
 8009fd8:	45b2      	cmp	sl, r6
 8009fda:	d011      	beq.n	800a000 <iNemoEngine_API_Update+0x31a8>
 8009fdc:	eddd 7a03 	vldr	s15, [sp, #12]
 8009fe0:	eef4 7acb 	vcmpe.f32	s15, s22
 8009fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe8:	d497      	bmi.n	8009f1a <iNemoEngine_API_Update+0x30c2>
 8009fea:	ee1f 0a90 	vmov	r0, s31
 8009fee:	e7ac      	b.n	8009f4a <iNemoEngine_API_Update+0x30f2>
 8009ff0:	ee1d 0a90 	vmov	r0, s27
 8009ff4:	f10a 0a0c 	add.w	sl, sl, #12
 8009ff8:	f84a 0c04 	str.w	r0, [sl, #-4]
 8009ffc:	45b2      	cmp	sl, r6
 8009ffe:	d1ed      	bne.n	8009fdc <iNemoEngine_API_Update+0x3184>
 800a000:	9b06      	ldr	r3, [sp, #24]
 800a002:	f893 9621 	ldrb.w	r9, [r3, #1569]	@ 0x621
 800a006:	f503 66c5 	add.w	r6, r3, #1576	@ 0x628
 800a00a:	f1b9 0f00 	cmp.w	r9, #0
 800a00e:	f000 8114 	beq.w	800a23a <iNemoEngine_API_Update+0x33e2>
 800a012:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 800a1c0 <iNemoEngine_API_Update+0x3368>
 800a016:	ee6a faa7 	vmul.f32	s31, s21, s15
 800a01a:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 800a01e:	ee2a fa27 	vmul.f32	s30, s20, s15
 800a022:	ee69 daa7 	vmul.f32	s27, s19, s15
 800a026:	ee7f 7acb 	vsub.f32	s15, s31, s22
 800a02a:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 800a02e:	ee17 0a90 	vmov	r0, s15
 800a032:	f7f6 fa89 	bl	8000548 <__aeabi_f2d>
 800a036:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 800a03a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a03e:	ee17 0a90 	vmov	r0, s15
 800a042:	f7f6 fa81 	bl	8000548 <__aeabi_f2d>
 800a046:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 800a04a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a04e:	ee17 0a90 	vmov	r0, s15
 800a052:	f7f6 fa79 	bl	8000548 <__aeabi_f2d>
 800a056:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 800a05a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a05e:	ee17 0a90 	vmov	r0, s15
 800a062:	f7f6 fa71 	bl	8000548 <__aeabi_f2d>
 800a066:	ee7d 7acb 	vsub.f32	s15, s27, s22
 800a06a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a06e:	ee17 0a90 	vmov	r0, s15
 800a072:	f7f6 fa69 	bl	8000548 <__aeabi_f2d>
 800a076:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	ee17 0a90 	vmov	r0, s15
 800a082:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a086:	f7f6 fa5f 	bl	8000548 <__aeabi_f2d>
 800a08a:	eef0 7aef 	vabs.f32	s15, s31
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	edcd 7a03 	vstr	s15, [sp, #12]
 800a094:	eef0 7acf 	vabs.f32	s15, s30
 800a098:	edcd 7a04 	vstr	s15, [sp, #16]
 800a09c:	eef0 7aed 	vabs.f32	s15, s27
 800a0a0:	f503 66c5 	add.w	r6, r3, #1576	@ 0x628
 800a0a4:	edcd 7a05 	vstr	s15, [sp, #20]
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	eef0 7a6c 	vmov.f32	s15, s25
 800a0ae:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800a0b2:	eef0 ca48 	vmov.f32	s25, s16
 800a0b6:	ed9f ba46 	vldr	s22, [pc, #280]	@ 800a1d0 <iNemoEngine_API_Update+0x3378>
 800a0ba:	eeb0 8a4d 	vmov.f32	s16, s26
 800a0be:	fb13 6909 	smlabb	r9, r3, r9, r6
 800a0c2:	46b3      	mov	fp, r6
 800a0c4:	eeb0 da67 	vmov.f32	s26, s15
 800a0c8:	e060      	b.n	800a18c <iNemoEngine_API_Update+0x3334>
 800a0ca:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 800a1c4 <iNemoEngine_API_Update+0x336c>
 800a0ce:	eef4 aae7 	vcmpe.f32	s21, s15
 800a0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d6:	f280 8197 	bge.w	800a408 <iNemoEngine_API_Update+0x35b0>
 800a0da:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800a1c8 <iNemoEngine_API_Update+0x3370>
 800a0de:	eef4 aae7 	vcmpe.f32	s21, s15
 800a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e6:	f300 81a3 	bgt.w	800a430 <iNemoEngine_API_Update+0x35d8>
 800a0ea:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a0ee:	f006 fa27 	bl	8010540 <ceil>
 800a0f2:	ec51 0b10 	vmov	r0, r1, d0
 800a0f6:	f7f6 fd77 	bl	8000be8 <__aeabi_d2f>
 800a0fa:	eddd 7a04 	vldr	s15, [sp, #16]
 800a0fe:	f8cb 0000 	str.w	r0, [fp]
 800a102:	eef4 7acb 	vcmpe.f32	s15, s22
 800a106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10a:	f140 8171 	bpl.w	800a3f0 <iNemoEngine_API_Update+0x3598>
 800a10e:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800a1c4 <iNemoEngine_API_Update+0x336c>
 800a112:	eeb4 aae7 	vcmpe.f32	s20, s15
 800a116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11a:	f280 816c 	bge.w	800a3f6 <iNemoEngine_API_Update+0x359e>
 800a11e:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 800a1c8 <iNemoEngine_API_Update+0x3370>
 800a122:	eeb4 aae7 	vcmpe.f32	s20, s15
 800a126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12a:	f300 81bd 	bgt.w	800a4a8 <iNemoEngine_API_Update+0x3650>
 800a12e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a132:	f006 fa05 	bl	8010540 <ceil>
 800a136:	ec51 0b10 	vmov	r0, r1, d0
 800a13a:	f7f6 fd55 	bl	8000be8 <__aeabi_d2f>
 800a13e:	eddd 7a05 	vldr	s15, [sp, #20]
 800a142:	f8cb 0004 	str.w	r0, [fp, #4]
 800a146:	eef4 7acb 	vcmpe.f32	s15, s22
 800a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14e:	d564      	bpl.n	800a21a <iNemoEngine_API_Update+0x33c2>
 800a150:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800a1c4 <iNemoEngine_API_Update+0x336c>
 800a154:	eef4 9ae7 	vcmpe.f32	s19, s15
 800a158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a15c:	f280 815d 	bge.w	800a41a <iNemoEngine_API_Update+0x35c2>
 800a160:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a1c8 <iNemoEngine_API_Update+0x3370>
 800a164:	eef4 9ae7 	vcmpe.f32	s19, s15
 800a168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a16c:	f300 8162 	bgt.w	800a434 <iNemoEngine_API_Update+0x35dc>
 800a170:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 800a174:	f006 f9e4 	bl	8010540 <ceil>
 800a178:	ec51 0b10 	vmov	r0, r1, d0
 800a17c:	f7f6 fd34 	bl	8000be8 <__aeabi_d2f>
 800a180:	f8cb 0008 	str.w	r0, [fp, #8]
 800a184:	f10b 0b0c 	add.w	fp, fp, #12
 800a188:	45cb      	cmp	fp, r9
 800a18a:	d04e      	beq.n	800a22a <iNemoEngine_API_Update+0x33d2>
 800a18c:	eddd 7a03 	vldr	s15, [sp, #12]
 800a190:	eef4 7acb 	vcmpe.f32	s15, s22
 800a194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a198:	d497      	bmi.n	800a0ca <iNemoEngine_API_Update+0x3272>
 800a19a:	ee1f 0a90 	vmov	r0, s31
 800a19e:	e7ac      	b.n	800a0fa <iNemoEngine_API_Update+0x32a2>
 800a1a0:	ee1f 0a10 	vmov	r0, s30
 800a1a4:	e6f3      	b.n	8009f8e <iNemoEngine_API_Update+0x3136>
 800a1a6:	bf00      	nop
 800a1a8:	3a7001e0 	.word	0x3a7001e0
 800a1ac:	3a000100 	.word	0x3a000100
 800a1b0:	3a8c0118 	.word	0x3a8c0118
 800a1b4:	44888777 	.word	0x44888777
 800a1b8:	39f001e1 	.word	0x39f001e1
 800a1bc:	b9f001e1 	.word	0xb9f001e1
 800a1c0:	44fffe00 	.word	0x44fffe00
 800a1c4:	39800100 	.word	0x39800100
 800a1c8:	b9800100 	.word	0xb9800100
 800a1cc:	446a0ccd 	.word	0x446a0ccd
 800a1d0:	4b000000 	.word	0x4b000000
 800a1d4:	3cfaad3b 	.word	0x3cfaad3b
 800a1d8:	bcfaad3b 	.word	0xbcfaad3b
 800a1dc:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 800a1e0:	f006 fa2a 	bl	8010638 <floor>
 800a1e4:	ec51 0b10 	vmov	r0, r1, d0
 800a1e8:	f7f6 fcfe 	bl	8000be8 <__aeabi_d2f>
 800a1ec:	e6cf      	b.n	8009f8e <iNemoEngine_API_Update+0x3136>
 800a1ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a1f2:	f006 fa21 	bl	8010638 <floor>
 800a1f6:	ec51 0b10 	vmov	r0, r1, d0
 800a1fa:	f7f6 fcf5 	bl	8000be8 <__aeabi_d2f>
 800a1fe:	e6a4      	b.n	8009f4a <iNemoEngine_API_Update+0x30f2>
 800a200:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 800a204:	f006 fa18 	bl	8010638 <floor>
 800a208:	ec51 0b10 	vmov	r0, r1, d0
 800a20c:	f7f6 fcec 	bl	8000be8 <__aeabi_d2f>
 800a210:	e6de      	b.n	8009fd0 <iNemoEngine_API_Update+0x3178>
 800a212:	4648      	mov	r0, r9
 800a214:	e699      	b.n	8009f4a <iNemoEngine_API_Update+0x30f2>
 800a216:	4648      	mov	r0, r9
 800a218:	e6da      	b.n	8009fd0 <iNemoEngine_API_Update+0x3178>
 800a21a:	ee1d 0a90 	vmov	r0, s27
 800a21e:	f10b 0b0c 	add.w	fp, fp, #12
 800a222:	f84b 0c04 	str.w	r0, [fp, #-4]
 800a226:	45cb      	cmp	fp, r9
 800a228:	d1b0      	bne.n	800a18c <iNemoEngine_API_Update+0x3334>
 800a22a:	eef0 7a4d 	vmov.f32	s15, s26
 800a22e:	eeb0 da48 	vmov.f32	s26, s16
 800a232:	eeb0 8a6c 	vmov.f32	s16, s25
 800a236:	eef0 ca67 	vmov.f32	s25, s15
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	f893 9791 	ldrb.w	r9, [r3, #1937]	@ 0x791
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	f001 80a7 	beq.w	800b396 <iNemoEngine_API_Update+0x453e>
 800a248:	ed5f 7a20 	vldr	s15, [pc, #-128]	@ 800a1cc <iNemoEngine_API_Update+0x3374>
 800a24c:	ee6e fa27 	vmul.f32	s31, s28, s15
 800a250:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 800a254:	ee2e faa7 	vmul.f32	s30, s29, s15
 800a258:	ee6b daa7 	vmul.f32	s27, s23, s15
 800a25c:	ee7f 7acb 	vsub.f32	s15, s31, s22
 800a260:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 800a264:	ee17 0a90 	vmov	r0, s15
 800a268:	f7f6 f96e 	bl	8000548 <__aeabi_f2d>
 800a26c:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 800a270:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a274:	ee17 0a90 	vmov	r0, s15
 800a278:	f7f6 f966 	bl	8000548 <__aeabi_f2d>
 800a27c:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 800a280:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a284:	ee17 0a90 	vmov	r0, s15
 800a288:	f7f6 f95e 	bl	8000548 <__aeabi_f2d>
 800a28c:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 800a290:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a294:	ee17 0a90 	vmov	r0, s15
 800a298:	f7f6 f956 	bl	8000548 <__aeabi_f2d>
 800a29c:	ee7d 7acb 	vsub.f32	s15, s27, s22
 800a2a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2a4:	ee17 0a90 	vmov	r0, s15
 800a2a8:	f7f6 f94e 	bl	8000548 <__aeabi_f2d>
 800a2ac:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	ee17 0a90 	vmov	r0, s15
 800a2b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2bc:	f7f6 f944 	bl	8000548 <__aeabi_f2d>
 800a2c0:	eef0 7aef 	vabs.f32	s15, s31
 800a2c4:	9b06      	ldr	r3, [sp, #24]
 800a2c6:	edcd 7a03 	vstr	s15, [sp, #12]
 800a2ca:	eef0 7acf 	vabs.f32	s15, s30
 800a2ce:	edcd 7a04 	vstr	s15, [sp, #16]
 800a2d2:	eef0 7aed 	vabs.f32	s15, s27
 800a2d6:	f503 62f3 	add.w	r2, r3, #1944	@ 0x798
 800a2da:	eeb0 7a48 	vmov.f32	s14, s16
 800a2de:	230c      	movs	r3, #12
 800a2e0:	edcd 7a05 	vstr	s15, [sp, #20]
 800a2e4:	eef0 7a6c 	vmov.f32	s15, s25
 800a2e8:	eeb0 8a4d 	vmov.f32	s16, s26
 800a2ec:	eef0 ca4a 	vmov.f32	s25, s20
 800a2f0:	eeb0 da6a 	vmov.f32	s26, s21
 800a2f4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800a2f8:	eef0 aa69 	vmov.f32	s21, s19
 800a2fc:	ed1f ba4c 	vldr	s22, [pc, #-304]	@ 800a1d0 <iNemoEngine_API_Update+0x3378>
 800a300:	9215      	str	r2, [sp, #84]	@ 0x54
 800a302:	fb13 2909 	smlabb	r9, r3, r9, r2
 800a306:	4693      	mov	fp, r2
 800a308:	eeb0 aa67 	vmov.f32	s20, s15
 800a30c:	eef0 9a47 	vmov.f32	s19, s14
 800a310:	e064      	b.n	800a3dc <iNemoEngine_API_Update+0x3584>
 800a312:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 800a316:	ed1f 7a51 	vldr	s14, [pc, #-324]	@ 800a1d4 <iNemoEngine_API_Update+0x337c>
 800a31a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a322:	f280 80af 	bge.w	800a484 <iNemoEngine_API_Update+0x362c>
 800a326:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 800a1d8 <iNemoEngine_API_Update+0x3380>
 800a32a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a332:	f300 80bb 	bgt.w	800a4ac <iNemoEngine_API_Update+0x3654>
 800a336:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a33a:	f006 f901 	bl	8010540 <ceil>
 800a33e:	ec51 0b10 	vmov	r0, r1, d0
 800a342:	f7f6 fc51 	bl	8000be8 <__aeabi_d2f>
 800a346:	eddd 7a04 	vldr	s15, [sp, #16]
 800a34a:	f8cb 0000 	str.w	r0, [fp]
 800a34e:	eef4 7acb 	vcmpe.f32	s15, s22
 800a352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a356:	f140 8089 	bpl.w	800a46c <iNemoEngine_API_Update+0x3614>
 800a35a:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 800a35e:	ed1f 7a63 	vldr	s14, [pc, #-396]	@ 800a1d4 <iNemoEngine_API_Update+0x337c>
 800a362:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36a:	f280 8082 	bge.w	800a472 <iNemoEngine_API_Update+0x361a>
 800a36e:	ed1f 7a66 	vldr	s14, [pc, #-408]	@ 800a1d8 <iNemoEngine_API_Update+0x3380>
 800a372:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37a:	f300 809b 	bgt.w	800a4b4 <iNemoEngine_API_Update+0x365c>
 800a37e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a382:	f006 f8dd 	bl	8010540 <ceil>
 800a386:	ec51 0b10 	vmov	r0, r1, d0
 800a38a:	f7f6 fc2d 	bl	8000be8 <__aeabi_d2f>
 800a38e:	eddd 7a05 	vldr	s15, [sp, #20]
 800a392:	f8cb 0004 	str.w	r0, [fp, #4]
 800a396:	eef4 7acb 	vcmpe.f32	s15, s22
 800a39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39e:	d54b      	bpl.n	800a438 <iNemoEngine_API_Update+0x35e0>
 800a3a0:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 800a3a4:	ed1f 7a75 	vldr	s14, [pc, #-468]	@ 800a1d4 <iNemoEngine_API_Update+0x337c>
 800a3a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b0:	da71      	bge.n	800a496 <iNemoEngine_API_Update+0x363e>
 800a3b2:	ed1f 7a77 	vldr	s14, [pc, #-476]	@ 800a1d8 <iNemoEngine_API_Update+0x3380>
 800a3b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3be:	dc77      	bgt.n	800a4b0 <iNemoEngine_API_Update+0x3658>
 800a3c0:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 800a3c4:	f006 f8bc 	bl	8010540 <ceil>
 800a3c8:	ec51 0b10 	vmov	r0, r1, d0
 800a3cc:	f7f6 fc0c 	bl	8000be8 <__aeabi_d2f>
 800a3d0:	f8cb 0008 	str.w	r0, [fp, #8]
 800a3d4:	f10b 0b0c 	add.w	fp, fp, #12
 800a3d8:	45cb      	cmp	fp, r9
 800a3da:	d035      	beq.n	800a448 <iNemoEngine_API_Update+0x35f0>
 800a3dc:	eddd 7a03 	vldr	s15, [sp, #12]
 800a3e0:	eef4 7acb 	vcmpe.f32	s15, s22
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	d493      	bmi.n	800a312 <iNemoEngine_API_Update+0x34ba>
 800a3ea:	ee1f 0a90 	vmov	r0, s31
 800a3ee:	e7aa      	b.n	800a346 <iNemoEngine_API_Update+0x34ee>
 800a3f0:	ee1f 0a10 	vmov	r0, s30
 800a3f4:	e6a3      	b.n	800a13e <iNemoEngine_API_Update+0x32e6>
 800a3f6:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 800a3fa:	f006 f91d 	bl	8010638 <floor>
 800a3fe:	ec51 0b10 	vmov	r0, r1, d0
 800a402:	f7f6 fbf1 	bl	8000be8 <__aeabi_d2f>
 800a406:	e69a      	b.n	800a13e <iNemoEngine_API_Update+0x32e6>
 800a408:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a40c:	f006 f914 	bl	8010638 <floor>
 800a410:	ec51 0b10 	vmov	r0, r1, d0
 800a414:	f7f6 fbe8 	bl	8000be8 <__aeabi_d2f>
 800a418:	e66f      	b.n	800a0fa <iNemoEngine_API_Update+0x32a2>
 800a41a:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 800a41e:	f006 f90b 	bl	8010638 <floor>
 800a422:	ec51 0b10 	vmov	r0, r1, d0
 800a426:	f7f6 fbdf 	bl	8000be8 <__aeabi_d2f>
 800a42a:	e6a9      	b.n	800a180 <iNemoEngine_API_Update+0x3328>
 800a42c:	4648      	mov	r0, r9
 800a42e:	e5ae      	b.n	8009f8e <iNemoEngine_API_Update+0x3136>
 800a430:	4650      	mov	r0, sl
 800a432:	e662      	b.n	800a0fa <iNemoEngine_API_Update+0x32a2>
 800a434:	4650      	mov	r0, sl
 800a436:	e6a3      	b.n	800a180 <iNemoEngine_API_Update+0x3328>
 800a438:	ee1d 0a90 	vmov	r0, s27
 800a43c:	f10b 0b0c 	add.w	fp, fp, #12
 800a440:	f84b 0c04 	str.w	r0, [fp, #-4]
 800a444:	45cb      	cmp	fp, r9
 800a446:	d1c9      	bne.n	800a3dc <iNemoEngine_API_Update+0x3584>
 800a448:	eeb0 7a69 	vmov.f32	s14, s19
 800a44c:	eef0 7a4a 	vmov.f32	s15, s20
 800a450:	eef0 9a6a 	vmov.f32	s19, s21
 800a454:	eeb0 aa6c 	vmov.f32	s20, s25
 800a458:	eef0 aa4d 	vmov.f32	s21, s26
 800a45c:	eef0 ca67 	vmov.f32	s25, s15
 800a460:	eeb0 da48 	vmov.f32	s26, s16
 800a464:	eeb0 8a47 	vmov.f32	s16, s14
 800a468:	f7fd b820 	b.w	80074ac <iNemoEngine_API_Update+0x654>
 800a46c:	ee1f 0a10 	vmov	r0, s30
 800a470:	e78d      	b.n	800a38e <iNemoEngine_API_Update+0x3536>
 800a472:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 800a476:	f006 f8df 	bl	8010638 <floor>
 800a47a:	ec51 0b10 	vmov	r0, r1, d0
 800a47e:	f7f6 fbb3 	bl	8000be8 <__aeabi_d2f>
 800a482:	e784      	b.n	800a38e <iNemoEngine_API_Update+0x3536>
 800a484:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a488:	f006 f8d6 	bl	8010638 <floor>
 800a48c:	ec51 0b10 	vmov	r0, r1, d0
 800a490:	f7f6 fbaa 	bl	8000be8 <__aeabi_d2f>
 800a494:	e757      	b.n	800a346 <iNemoEngine_API_Update+0x34ee>
 800a496:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 800a49a:	f006 f8cd 	bl	8010638 <floor>
 800a49e:	ec51 0b10 	vmov	r0, r1, d0
 800a4a2:	f7f6 fba1 	bl	8000be8 <__aeabi_d2f>
 800a4a6:	e793      	b.n	800a3d0 <iNemoEngine_API_Update+0x3578>
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	e648      	b.n	800a13e <iNemoEngine_API_Update+0x32e6>
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	e74a      	b.n	800a346 <iNemoEngine_API_Update+0x34ee>
 800a4b0:	4650      	mov	r0, sl
 800a4b2:	e78d      	b.n	800a3d0 <iNemoEngine_API_Update+0x3578>
 800a4b4:	4650      	mov	r0, sl
 800a4b6:	e76a      	b.n	800a38e <iNemoEngine_API_Update+0x3536>
 800a4b8:	4616      	mov	r6, r2
 800a4ba:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800a4be:	4be1      	ldr	r3, [pc, #900]	@ (800a844 <iNemoEngine_API_Update+0x39ec>)
 800a4c0:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	f8c2 51cc 	str.w	r5, [r2, #460]	@ 0x1cc
 800a4ca:	f8c2 51d0 	str.w	r5, [r2, #464]	@ 0x1d0
 800a4ce:	f882 11ac 	strb.w	r1, [r2, #428]	@ 0x1ac
 800a4d2:	f506 70ea 	add.w	r0, r6, #468	@ 0x1d4
 800a4d6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800a4da:	f002 faf9 	bl	800cad0 <memset>
 800a4de:	ed96 6a02 	vldr	s12, [r6, #8]
 800a4e2:	eddf 7ad9 	vldr	s15, [pc, #868]	@ 800a848 <iNemoEngine_API_Update+0x39f0>
 800a4e6:	eddf 5ad9 	vldr	s11, [pc, #868]	@ 800a84c <iNemoEngine_API_Update+0x39f4>
 800a4ea:	ed9f 5ad9 	vldr	s10, [pc, #868]	@ 800a850 <iNemoEngine_API_Update+0x39f8>
 800a4ee:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
 800a4f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	edc6 7a34 	vstr	s15, [r6, #208]	@ 0xd0
 800a4fc:	eddf 7ad5 	vldr	s15, [pc, #852]	@ 800a854 <iNemoEngine_API_Update+0x39fc>
 800a500:	f8c6 30c0 	str.w	r3, [r6, #192]	@ 0xc0
 800a504:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a508:	f8c6 3128 	str.w	r3, [r6, #296]	@ 0x128
 800a50c:	edc6 7a4e 	vstr	s15, [r6, #312]	@ 0x138
 800a510:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 800a858 <iNemoEngine_API_Update+0x3a00>
 800a514:	4bd1      	ldr	r3, [pc, #836]	@ (800a85c <iNemoEngine_API_Update+0x3a04>)
 800a516:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
 800a51a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a51e:	f8c6 30e4 	str.w	r3, [r6, #228]	@ 0xe4
 800a522:	edc6 7a50 	vstr	s15, [r6, #320]	@ 0x140
 800a526:	eddf 7ace 	vldr	s15, [pc, #824]	@ 800a860 <iNemoEngine_API_Update+0x3a08>
 800a52a:	4bce      	ldr	r3, [pc, #824]	@ (800a864 <iNemoEngine_API_Update+0x3a0c>)
 800a52c:	f8c6 30d4 	str.w	r3, [r6, #212]	@ 0xd4
 800a530:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a534:	4bcc      	ldr	r3, [pc, #816]	@ (800a868 <iNemoEngine_API_Update+0x3a10>)
 800a536:	edc6 7a38 	vstr	s15, [r6, #224]	@ 0xe0
 800a53a:	eddf 7acc 	vldr	s15, [pc, #816]	@ 800a86c <iNemoEngine_API_Update+0x3a14>
 800a53e:	f8c6 313c 	str.w	r3, [r6, #316]	@ 0x13c
 800a542:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a546:	4bca      	ldr	r3, [pc, #808]	@ (800a870 <iNemoEngine_API_Update+0x3a18>)
 800a548:	edc6 7a52 	vstr	s15, [r6, #328]	@ 0x148
 800a54c:	eddf 7ac9 	vldr	s15, [pc, #804]	@ 800a874 <iNemoEngine_API_Update+0x3a1c>
 800a550:	f8c6 3144 	str.w	r3, [r6, #324]	@ 0x144
 800a554:	4bc8      	ldr	r3, [pc, #800]	@ (800a878 <iNemoEngine_API_Update+0x3a20>)
 800a556:	f8c6 314c 	str.w	r3, [r6, #332]	@ 0x14c
 800a55a:	4631      	mov	r1, r6
 800a55c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a560:	ee26 5a05 	vmul.f32	s10, s12, s10
 800a564:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a568:	4bc4      	ldr	r3, [pc, #784]	@ (800a87c <iNemoEngine_API_Update+0x3a24>)
 800a56a:	f8c6 30ec 	str.w	r3, [r6, #236]	@ 0xec
 800a56e:	4bc4      	ldr	r3, [pc, #784]	@ (800a880 <iNemoEngine_API_Update+0x3a28>)
 800a570:	f8c6 512c 	str.w	r5, [r6, #300]	@ 0x12c
 800a574:	f8c6 50cc 	str.w	r5, [r6, #204]	@ 0xcc
 800a578:	f8c6 5134 	str.w	r5, [r6, #308]	@ 0x134
 800a57c:	edc6 7a3a 	vstr	s15, [r6, #232]	@ 0xe8
 800a580:	edc6 5a32 	vstr	s11, [r6, #200]	@ 0xc8
 800a584:	edc6 5a4c 	vstr	s11, [r6, #304]	@ 0x130
 800a588:	ed86 5a36 	vstr	s10, [r6, #216]	@ 0xd8
 800a58c:	f8c1 31d4 	str.w	r3, [r1, #468]	@ 0x1d4
 800a590:	f8c1 31fc 	str.w	r3, [r1, #508]	@ 0x1fc
 800a594:	f8c1 3224 	str.w	r3, [r1, #548]	@ 0x224
 800a598:	f8c1 324c 	str.w	r3, [r1, #588]	@ 0x24c
 800a59c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
 800a5a0:	f8c1 329c 	str.w	r3, [r1, #668]	@ 0x29c
 800a5a4:	f8c1 32c4 	str.w	r3, [r1, #708]	@ 0x2c4
 800a5a8:	f8c1 32ec 	str.w	r3, [r1, #748]	@ 0x2ec
 800a5ac:	f8c1 3314 	str.w	r3, [r1, #788]	@ 0x314
 800a5b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a5b4:	ed81 5a54 	vstr	s10, [r1, #336]	@ 0x150
 800a5b8:	eddf 3ab2 	vldr	s7, [pc, #712]	@ 800a884 <iNemoEngine_API_Update+0x3a2c>
 800a5bc:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 800a888 <iNemoEngine_API_Update+0x3a30>
 800a5c0:	f8c1 317c 	str.w	r3, [r1, #380]	@ 0x17c
 800a5c4:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
 800a5c8:	f8c1 3124 	str.w	r3, [r1, #292]	@ 0x124
 800a5cc:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 800a88c <iNemoEngine_API_Update+0x3a34>
 800a5d0:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800a890 <iNemoEngine_API_Update+0x3a38>
 800a5d4:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800a894 <iNemoEngine_API_Update+0x3a3c>
 800a5d8:	eddf 4aaf 	vldr	s9, [pc, #700]	@ 800a898 <iNemoEngine_API_Update+0x3a40>
 800a5dc:	4aaf      	ldr	r2, [pc, #700]	@ (800a89c <iNemoEngine_API_Update+0x3a44>)
 800a5de:	f8df c2dc 	ldr.w	ip, [pc, #732]	@ 800a8bc <iNemoEngine_API_Update+0x3a64>
 800a5e2:	4faf      	ldr	r7, [pc, #700]	@ (800a8a0 <iNemoEngine_API_Update+0x3a48>)
 800a5e4:	4eaf      	ldr	r6, [pc, #700]	@ (800a8a4 <iNemoEngine_API_Update+0x3a4c>)
 800a5e6:	4db0      	ldr	r5, [pc, #704]	@ (800a8a8 <iNemoEngine_API_Update+0x3a50>)
 800a5e8:	48b0      	ldr	r0, [pc, #704]	@ (800a8ac <iNemoEngine_API_Update+0x3a54>)
 800a5ea:	f8df e2d4 	ldr.w	lr, [pc, #724]	@ 800a8c0 <iNemoEngine_API_Update+0x3a68>
 800a5ee:	edc1 3a3d 	vstr	s7, [r1, #244]	@ 0xf4
 800a5f2:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 800a5f6:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800a5fa:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
 800a5fe:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a602:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a606:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a60a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a60e:	ee66 2a23 	vmul.f32	s5, s12, s7
 800a612:	ee26 3a02 	vmul.f32	s6, s12, s4
 800a616:	f8c1 3114 	str.w	r3, [r1, #276]	@ 0x114
 800a61a:	ee66 4a24 	vmul.f32	s9, s12, s9
 800a61e:	4ba4      	ldr	r3, [pc, #656]	@ (800a8b0 <iNemoEngine_API_Update+0x3a58>)
 800a620:	f8c1 3184 	str.w	r3, [r1, #388]	@ 0x184
 800a624:	ee66 1a04 	vmul.f32	s3, s12, s8
 800a628:	4ba2      	ldr	r3, [pc, #648]	@ (800a8b4 <iNemoEngine_API_Update+0x3a5c>)
 800a62a:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
 800a62e:	f8c1 c15c 	str.w	ip, [r1, #348]	@ 0x15c
 800a632:	f8c1 70fc 	str.w	r7, [r1, #252]	@ 0xfc
 800a636:	f8c1 6164 	str.w	r6, [r1, #356]	@ 0x164
 800a63a:	f8c1 516c 	str.w	r5, [r1, #364]	@ 0x16c
 800a63e:	f8c1 0174 	str.w	r0, [r1, #372]	@ 0x174
 800a642:	edc1 1a46 	vstr	s3, [r1, #280]	@ 0x118
 800a646:	edc1 4a60 	vstr	s9, [r1, #384]	@ 0x180
 800a64a:	f8c1 e19c 	str.w	lr, [r1, #412]	@ 0x19c
 800a64e:	ed81 2a66 	vstr	s4, [r1, #408]	@ 0x198
 800a652:	ed81 4a65 	vstr	s8, [r1, #404]	@ 0x194
 800a656:	f8c1 2154 	str.w	r2, [r1, #340]	@ 0x154
 800a65a:	f8c1 210c 	str.w	r2, [r1, #268]	@ 0x10c
 800a65e:	edc1 6a3c 	vstr	s13, [r1, #240]	@ 0xf0
 800a662:	edc1 6a56 	vstr	s13, [r1, #344]	@ 0x158
 800a666:	ed81 7a3e 	vstr	s14, [r1, #248]	@ 0xf8
 800a66a:	ed81 7a58 	vstr	s14, [r1, #352]	@ 0x160
 800a66e:	edc1 7a40 	vstr	s15, [r1, #256]	@ 0x100
 800a672:	edc1 7a5a 	vstr	s15, [r1, #360]	@ 0x168
 800a676:	edc1 2a42 	vstr	s5, [r1, #264]	@ 0x108
 800a67a:	edc1 2a5c 	vstr	s5, [r1, #368]	@ 0x170
 800a67e:	ed81 3a44 	vstr	s6, [r1, #272]	@ 0x110
 800a682:	ed81 3a5e 	vstr	s6, [r1, #376]	@ 0x178
 800a686:	ed81 6a48 	vstr	s12, [r1, #288]	@ 0x120
 800a68a:	ed81 6a62 	vstr	s12, [r1, #392]	@ 0x188
 800a68e:	edc1 5a64 	vstr	s11, [r1, #400]	@ 0x190
 800a692:	784b      	ldrb	r3, [r1, #1]
 800a694:	b18b      	cbz	r3, 800a6ba <iNemoEngine_API_Update+0x3862>
 800a696:	f501 6214 	add.w	r2, r1, #2368	@ 0x940
 800a69a:	9225      	str	r2, [sp, #148]	@ 0x94
 800a69c:	f601 1348 	addw	r3, r1, #2376	@ 0x948
 800a6a0:	f601 1244 	addw	r2, r1, #2372	@ 0x944
 800a6a4:	9226      	str	r2, [sp, #152]	@ 0x98
 800a6a6:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a6a8:	9a06      	ldr	r2, [sp, #24]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	7053      	strb	r3, [r2, #1]
 800a6ae:	f7fc bee8 	b.w	8007482 <iNemoEngine_API_Update+0x62a>
 800a6b2:	ed93 ca4b 	vldr	s24, [r3, #300]	@ 0x12c
 800a6b6:	f7fd bfc0 	b.w	800863a <iNemoEngine_API_Update+0x17e2>
 800a6ba:	9a06      	ldr	r2, [sp, #24]
 800a6bc:	f502 6314 	add.w	r3, r2, #2368	@ 0x940
 800a6c0:	f602 1144 	addw	r1, r2, #2372	@ 0x944
 800a6c4:	f602 1048 	addw	r0, r2, #2376	@ 0x948
 800a6c8:	9325      	str	r3, [sp, #148]	@ 0x94
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
 800a6d0:	680b      	ldr	r3, [r1, #0]
 800a6d2:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
 800a6d6:	6803      	ldr	r3, [r0, #0]
 800a6d8:	9126      	str	r1, [sp, #152]	@ 0x98
 800a6da:	9027      	str	r0, [sp, #156]	@ 0x9c
 800a6dc:	f8c2 31c4 	str.w	r3, [r2, #452]	@ 0x1c4
 800a6e0:	e7e2      	b.n	800a6a8 <iNemoEngine_API_Update+0x3850>
 800a6e2:	f205 47b4 	addw	r7, r5, #1204	@ 0x4b4
 800a6e6:	ed97 0a00 	vldr	s0, [r7]
 800a6ea:	f505 6097 	add.w	r0, r5, #1208	@ 0x4b8
 800a6ee:	f7fa ff43 	bl	8005578 <dataDerivative5>
 800a6f2:	f205 6824 	addw	r8, r5, #1572	@ 0x624
 800a6f6:	eef0 3a40 	vmov.f32	s7, s0
 800a6fa:	f505 60c5 	add.w	r0, r5, #1576	@ 0x628
 800a6fe:	ed98 0a00 	vldr	s0, [r8]
 800a702:	f7fa ff39 	bl	8005578 <dataDerivative5>
 800a706:	f205 7394 	addw	r3, r5, #1940	@ 0x794
 800a70a:	eeb0 3a40 	vmov.f32	s6, s0
 800a70e:	f505 60f3 	add.w	r0, r5, #1944	@ 0x798
 800a712:	ed93 0a00 	vldr	s0, [r3]
 800a716:	f7fa ff2f 	bl	8005578 <dataDerivative5>
 800a71a:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	@ 0x976
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	3301      	adds	r3, #1
 800a724:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a728:	ee07 3a90 	vmov	s15, r3
 800a72c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a730:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a734:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a738:	f605 106c 	addw	r0, r5, #2412	@ 0x96c
 800a73c:	f605 1168 	addw	r1, r5, #2408	@ 0x968
 800a740:	f505 6217 	add.w	r2, r5, #2416	@ 0x970
 800a744:	b21b      	sxth	r3, r3
 800a746:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a74a:	ed90 7a00 	vldr	s14, [r0]
 800a74e:	ed91 5a00 	vldr	s10, [r1]
 800a752:	eef0 7a63 	vmov.f32	s15, s7
 800a756:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a75a:	eeb0 7a43 	vmov.f32	s14, s6
 800a75e:	eea5 7a85 	vfma.f32	s14, s11, s10
 800a762:	ed92 5a00 	vldr	s10, [r2]
 800a766:	eef0 6a40 	vmov.f32	s13, s0
 800a76a:	eee5 6a85 	vfma.f32	s13, s11, s10
 800a76e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a772:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a776:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a77a:	edc0 7a00 	vstr	s15, [r0]
 800a77e:	ed81 7a00 	vstr	s14, [r1]
 800a782:	edc2 6a00 	vstr	s13, [r2]
 800a786:	f8a5 3976 	strh.w	r3, [r5, #2422]	@ 0x976
 800a78a:	f47c ab8d 	bne.w	8006ea8 <iNemoEngine_API_Update+0x50>
 800a78e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a792:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a796:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a79a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a79e:	2300      	movs	r3, #0
 800a7a0:	ed85 7a07 	vstr	s14, [r5, #28]
 800a7a4:	edc5 6a08 	vstr	s13, [r5, #32]
 800a7a8:	edc5 7a06 	vstr	s15, [r5, #24]
 800a7ac:	6003      	str	r3, [r0, #0]
 800a7ae:	600b      	str	r3, [r1, #0]
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f8a5 3976 	strh.w	r3, [r5, #2422]	@ 0x976
 800a7b8:	f885 3978 	strb.w	r3, [r5, #2424]	@ 0x978
 800a7bc:	f7fc bb74 	b.w	8006ea8 <iNemoEngine_API_Update+0x50>
 800a7c0:	9906      	ldr	r1, [sp, #24]
 800a7c2:	f8d1 21bc 	ldr.w	r2, [r1, #444]	@ 0x1bc
 800a7c6:	9295      	str	r2, [sp, #596]	@ 0x254
 800a7c8:	f8d1 21c0 	ldr.w	r2, [r1, #448]	@ 0x1c0
 800a7cc:	9296      	str	r2, [sp, #600]	@ 0x258
 800a7ce:	f8d1 21c4 	ldr.w	r2, [r1, #452]	@ 0x1c4
 800a7d2:	9297      	str	r2, [sp, #604]	@ 0x25c
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	464b      	mov	r3, r9
 800a7d8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a7dc:	f881 21a0 	strb.w	r2, [r1, #416]	@ 0x1a0
 800a7e0:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 800a7e4:	f7fe bc8f 	b.w	8009106 <iNemoEngine_API_Update+0x22ae>
 800a7e8:	ed92 fa49 	vldr	s30, [r2, #292]	@ 0x124
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	f7fd bdd2 	b.w	8008396 <iNemoEngine_API_Update+0x153e>
 800a7f2:	ed93 ca63 	vldr	s24, [r3, #396]	@ 0x18c
 800a7f6:	f7fd bf20 	b.w	800863a <iNemoEngine_API_Update+0x17e2>
 800a7fa:	eddf 8a2f 	vldr	s17, [pc, #188]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a7fe:	f7fd b87e 	b.w	80078fe <iNemoEngine_API_Update+0xaa6>
 800a802:	ed9f ca2d 	vldr	s24, [pc, #180]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a806:	f7fd b90e 	b.w	8007a26 <iNemoEngine_API_Update+0xbce>
 800a80a:	ed9f 8a2b 	vldr	s16, [pc, #172]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a80e:	f7fc bf8c 	b.w	800772a <iNemoEngine_API_Update+0x8d2>
 800a812:	eddf 8a29 	vldr	s17, [pc, #164]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a816:	f7fc bf5d 	b.w	80076d4 <iNemoEngine_API_Update+0x87c>
 800a81a:	ed9f 8a27 	vldr	s16, [pc, #156]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a81e:	f7fd b92d 	b.w	8007a7c <iNemoEngine_API_Update+0xc24>
 800a822:	ed9f ca25 	vldr	s24, [pc, #148]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a826:	f7fd b83f 	b.w	80078a8 <iNemoEngine_API_Update+0xa50>
 800a82a:	ed9f ca23 	vldr	s24, [pc, #140]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a82e:	f7fc bfa7 	b.w	8007780 <iNemoEngine_API_Update+0x928>
 800a832:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a836:	f7fd b80c 	b.w	8007852 <iNemoEngine_API_Update+0x9fa>
 800a83a:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 800a8b8 <iNemoEngine_API_Update+0x3a60>
 800a83e:	f7fd b8c7 	b.w	80079d0 <iNemoEngine_API_Update+0xb78>
 800a842:	bf00      	nop
 800a844:	bf666666 	.word	0xbf666666
 800a848:	3d072b02 	.word	0x3d072b02
 800a84c:	3ca3d70a 	.word	0x3ca3d70a
 800a850:	3d4ccccd 	.word	0x3d4ccccd
 800a854:	3cb43958 	.word	0x3cb43958
 800a858:	3cf5c28f 	.word	0x3cf5c28f
 800a85c:	3eb33333 	.word	0x3eb33333
 800a860:	3d75c28f 	.word	0x3d75c28f
 800a864:	3ee66666 	.word	0x3ee66666
 800a868:	3f866666 	.word	0x3f866666
 800a86c:	3d23d70a 	.word	0x3d23d70a
 800a870:	3f8ccccd 	.word	0x3f8ccccd
 800a874:	3d8f5c29 	.word	0x3d8f5c29
 800a878:	3f933333 	.word	0x3f933333
 800a87c:	3ebd70a4 	.word	0x3ebd70a4
 800a880:	40a00000 	.word	0x40a00000
 800a884:	3ecccccd 	.word	0x3ecccccd
 800a888:	3f4ccccd 	.word	0x3f4ccccd
 800a88c:	3dcccccd 	.word	0x3dcccccd
 800a890:	3e4ccccd 	.word	0x3e4ccccd
 800a894:	3e99999a 	.word	0x3e99999a
 800a898:	3f666666 	.word	0x3f666666
 800a89c:	3f99999a 	.word	0x3f99999a
 800a8a0:	3f19999a 	.word	0x3f19999a
 800a8a4:	3fb9999a 	.word	0x3fb9999a
 800a8a8:	3fcccccd 	.word	0x3fcccccd
 800a8ac:	3fe66666 	.word	0x3fe66666
 800a8b0:	40200000 	.word	0x40200000
 800a8b4:	40400000 	.word	0x40400000
 800a8b8:	80000000 	.word	0x80000000
 800a8bc:	3fa66666 	.word	0x3fa66666
 800a8c0:	3f333333 	.word	0x3f333333
 800a8c4:	3e4cccce 	.word	0x3e4cccce
 800a8c8:	3eaaaaab 	.word	0x3eaaaaab
 800a8cc:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	f040 85bc 	bne.w	800b44e <iNemoEngine_API_Update+0x45f6>
 800a8d6:	9906      	ldr	r1, [sp, #24]
 800a8d8:	ed5f 8a06 	vldr	s17, [pc, #-24]	@ 800a8c4 <iNemoEngine_API_Update+0x3a6c>
 800a8dc:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	@ 0x1a6
 800a8e0:	ed5f 7a07 	vldr	s15, [pc, #-28]	@ 800a8c8 <iNemoEngine_API_Update+0x3a70>
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2b31      	cmp	r3, #49	@ 0x31
 800a8ea:	f8a1 31a6 	strh.w	r3, [r1, #422]	@ 0x1a6
 800a8ee:	bf98      	it	ls
 800a8f0:	eef0 8a67 	vmovls.f32	s17, s15
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a8fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8fe:	f5b3 0f8c 	cmp.w	r3, #4587520	@ 0x460000
 800a902:	f000 8599 	beq.w	800b438 <iNemoEngine_API_Update+0x45e0>
 800a906:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 800a90a:	f47f a83a 	bne.w	8009982 <iNemoEngine_API_Update+0x2b2a>
 800a90e:	9a06      	ldr	r2, [sp, #24]
 800a910:	2301      	movs	r3, #1
 800a912:	f882 31a4 	strb.w	r3, [r2, #420]	@ 0x1a4
 800a916:	9a06      	ldr	r2, [sp, #24]
 800a918:	edcd 6a03 	vstr	s13, [sp, #12]
 800a91c:	f502 63c3 	add.w	r3, r2, #1560	@ 0x618
 800a920:	ed93 5a00 	vldr	s10, [r3]
 800a924:	f502 63f1 	add.w	r3, r2, #1928	@ 0x788
 800a928:	ed93 7a00 	vldr	s14, [r3]
 800a92c:	f202 6314 	addw	r3, r2, #1556	@ 0x614
 800a930:	edd3 4a00 	vldr	s9, [r3]
 800a934:	ee25 4a05 	vmul.f32	s8, s10, s10
 800a938:	f202 7384 	addw	r3, r2, #1924	@ 0x784
 800a93c:	eea4 4aa4 	vfma.f32	s8, s9, s9
 800a940:	a93d      	add	r1, sp, #244	@ 0xf4
 800a942:	a843      	add	r0, sp, #268	@ 0x10c
 800a944:	ed93 6a00 	vldr	s12, [r3]
 800a948:	f202 631c 	addw	r3, r2, #1564	@ 0x61c
 800a94c:	edd3 7a00 	vldr	s15, [r3]
 800a950:	eea7 4aa7 	vfma.f32	s8, s15, s15
 800a954:	f202 738c 	addw	r3, r2, #1932	@ 0x78c
 800a958:	465e      	mov	r6, fp
 800a95a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800a95e:	eeb1 3ac4 	vsqrt.f32	s6, s8
 800a962:	465a      	mov	r2, fp
 800a964:	4655      	mov	r5, sl
 800a966:	4657      	mov	r7, sl
 800a968:	acae      	add	r4, sp, #696	@ 0x2b8
 800a96a:	ee67 5a07 	vmul.f32	s11, s14, s14
 800a96e:	ee83 4a83 	vdiv.f32	s8, s7, s6
 800a972:	eee6 5a06 	vfma.f32	s11, s12, s12
 800a976:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a97a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a97e:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 800a982:	edd3 7a00 	vldr	s15, [r3]
 800a986:	ed8d 5a3e 	vstr	s10, [sp, #248]	@ 0xf8
 800a98a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 800a98e:	ee64 4a84 	vmul.f32	s9, s9, s8
 800a992:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800a996:	edcd 4a3d 	vstr	s9, [sp, #244]	@ 0xf4
 800a99a:	eec3 5a85 	vdiv.f32	s11, s7, s10
 800a99e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a9a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a9a6:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a9aa:	ed8d 7a44 	vstr	s14, [sp, #272]	@ 0x110
 800a9ae:	edcd 7a45 	vstr	s15, [sp, #276]	@ 0x114
 800a9b2:	ed8d 6a43 	vstr	s12, [sp, #268]	@ 0x10c
 800a9b6:	f7fa fec5 	bl	8005744 <getRotationMatrix>
 800a9ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a9bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a9c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9c2:	6836      	ldr	r6, [r6, #0]
 800a9c4:	602e      	str	r6, [r5, #0]
 800a9c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a9c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a9cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9ce:	edda 7a00 	vldr	s15, [sl]
 800a9d2:	ed9a 7a01 	vldr	s14, [sl, #4]
 800a9d6:	eddd 6a03 	vldr	s13, [sp, #12]
 800a9da:	6026      	str	r6, [r4, #0]
 800a9dc:	eef0 7ae7 	vabs.f32	s15, s15
 800a9e0:	eeb0 7ac7 	vabs.f32	s14, s14
 800a9e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ec:	f140 8407 	bpl.w	800b1fe <iNemoEngine_API_Update+0x43a6>
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9f6:	469e      	mov	lr, r3
 800a9f8:	eef0 7a47 	vmov.f32	s15, s14
 800a9fc:	2103      	movs	r1, #3
 800a9fe:	2707      	movs	r7, #7
 800aa00:	f04f 0c06 	mov.w	ip, #6
 800aa04:	4603      	mov	r3, r0
 800aa06:	2601      	movs	r6, #1
 800aa08:	ed9a 7a02 	vldr	s14, [sl, #8]
 800aa0c:	eeb0 7ac7 	vabs.f32	s14, s14
 800aa10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aa14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa18:	f340 8453 	ble.w	800b2c2 <iNemoEngine_API_Update+0x446a>
 800aa1c:	2306      	movs	r3, #6
 800aa1e:	2708      	movs	r7, #8
 800aa20:	2104      	movs	r1, #4
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	f04f 0c07 	mov.w	ip, #7
 800aa28:	f04f 0e05 	mov.w	lr, #5
 800aa2c:	970c      	str	r7, [sp, #48]	@ 0x30
 800aa2e:	4608      	mov	r0, r1
 800aa30:	2200      	movs	r2, #0
 800aa32:	2301      	movs	r3, #1
 800aa34:	2602      	movs	r6, #2
 800aa36:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800aa38:	4450      	add	r0, sl
 800aa3a:	4454      	add	r4, sl
 800aa3c:	ed90 6a00 	vldr	s12, [r0]
 800aa40:	ed94 7a00 	vldr	s14, [r4]
 800aa44:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800aa48:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800aa4a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800aa4e:	acae      	add	r4, sp, #696	@ 0x2b8
 800aa50:	adae      	add	r5, sp, #696	@ 0x2b8
 800aa52:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800aa56:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800aa5a:	edc0 7a00 	vstr	s15, [r0]
 800aa5e:	ed94 7a00 	vldr	s14, [r4]
 800aa62:	edd5 7a00 	vldr	s15, [r5]
 800aa66:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800aa6a:	ed84 6a00 	vstr	s12, [r4]
 800aa6e:	edd0 5a00 	vldr	s11, [r0]
 800aa72:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800aa74:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800aa78:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800aa7c:	ed90 7a00 	vldr	s14, [r0]
 800aa80:	edd5 7a00 	vldr	s15, [r5]
 800aa84:	eee5 7ac7 	vfms.f32	s15, s11, s14
 800aa88:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800aa8c:	9404      	str	r4, [sp, #16]
 800aa8e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800aa90:	edc5 7a00 	vstr	s15, [r5]
 800aa94:	ed90 7a00 	vldr	s14, [r0]
 800aa98:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800aa9a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800aa9e:	edd0 7a00 	vldr	s15, [r0]
 800aaa2:	eee6 7a47 	vfms.f32	s15, s12, s14
 800aaa6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800aaaa:	00bc      	lsls	r4, r7, #2
 800aaac:	9405      	str	r4, [sp, #20]
 800aaae:	edc0 7a00 	vstr	s15, [r0]
 800aab2:	acae      	add	r4, sp, #696	@ 0x2b8
 800aab4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800aab6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800aaba:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800aabe:	ed90 5a00 	vldr	s10, [r0]
 800aac2:	ed94 7a00 	vldr	s14, [r4]
 800aac6:	eea5 7ac5 	vfms.f32	s14, s11, s10
 800aaca:	0097      	lsls	r7, r2, #2
 800aacc:	eef0 7ae7 	vabs.f32	s15, s15
 800aad0:	ed84 7a00 	vstr	s14, [r4]
 800aad4:	9c03      	ldr	r4, [sp, #12]
 800aad6:	edd0 5a00 	vldr	s11, [r0]
 800aada:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800aadc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800aae0:	ed90 7a00 	vldr	s14, [r0]
 800aae4:	eea6 7a65 	vfms.f32	s14, s12, s11
 800aae8:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800aaec:	008c      	lsls	r4, r1, #2
 800aaee:	ed80 7a00 	vstr	s14, [r0]
 800aaf2:	ed95 7a00 	vldr	s14, [r5]
 800aaf6:	eeb0 7ac7 	vabs.f32	s14, s14
 800aafa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aafe:	00b0      	lsls	r0, r6, #2
 800ab00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab04:	9003      	str	r0, [sp, #12]
 800ab06:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800ab0a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 800ab0e:	dd0a      	ble.n	800ab26 <iNemoEngine_API_Update+0x3cce>
 800ab10:	4618      	mov	r0, r3
 800ab12:	4613      	mov	r3, r2
 800ab14:	4602      	mov	r2, r0
 800ab16:	4674      	mov	r4, lr
 800ab18:	4650      	mov	r0, sl
 800ab1a:	463d      	mov	r5, r7
 800ab1c:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 800ab20:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 800ab24:	0097      	lsls	r7, r2, #2
 800ab26:	a9ae      	add	r1, sp, #696	@ 0x2b8
 800ab28:	448e      	add	lr, r1
 800ab2a:	440c      	add	r4, r1
 800ab2c:	ed9e 7a00 	vldr	s14, [lr]
 800ab30:	edd4 7a00 	vldr	s15, [r4]
 800ab34:	edcd 6a03 	vstr	s13, [sp, #12]
 800ab38:	ee87 2a27 	vdiv.f32	s4, s14, s15
 800ab3c:	4408      	add	r0, r1
 800ab3e:	4451      	add	r1, sl
 800ab40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab44:	ed8e 2a00 	vstr	s4, [lr]
 800ab48:	ed90 6a00 	vldr	s12, [r0]
 800ab4c:	edd1 7a00 	vldr	s15, [r1]
 800ab50:	eee2 7a46 	vfms.f32	s15, s4, s12
 800ab54:	edc1 7a00 	vstr	s15, [r1]
 800ab58:	9905      	ldr	r1, [sp, #20]
 800ab5a:	ed90 3a00 	vldr	s6, [r0]
 800ab5e:	ed94 6a00 	vldr	s12, [r4]
 800ab62:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800ab64:	4401      	add	r1, r0
 800ab66:	edd1 3a00 	vldr	s7, [r1]
 800ab6a:	9904      	ldr	r1, [sp, #16]
 800ab6c:	4401      	add	r1, r0
 800ab6e:	00b0      	lsls	r0, r6, #2
 800ab70:	edd1 4a00 	vldr	s9, [r1]
 800ab74:	f500 61b2 	add.w	r1, r0, #1424	@ 0x590
 800ab78:	4469      	add	r1, sp
 800ab7a:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 800ab7e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800ab82:	edd1 7a00 	vldr	s15, [r1]
 800ab86:	a9ae      	add	r1, sp, #696	@ 0x2b8
 800ab88:	4401      	add	r1, r0
 800ab8a:	ee87 4a06 	vdiv.f32	s8, s14, s12
 800ab8e:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800ab90:	ed91 6a00 	vldr	s12, [r1]
 800ab94:	f505 61b2 	add.w	r1, r5, #1424	@ 0x590
 800ab98:	4469      	add	r1, sp
 800ab9a:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 800ab9e:	ee87 5a06 	vdiv.f32	s10, s14, s12
 800aba2:	4405      	add	r5, r0
 800aba4:	ed91 7a00 	vldr	s14, [r1]
 800aba8:	edd5 5a00 	vldr	s11, [r5]
 800abac:	f507 61b2 	add.w	r1, r7, #1424	@ 0x590
 800abb0:	4469      	add	r1, sp
 800abb2:	4407      	add	r7, r0
 800abb4:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 800abb8:	edd7 1a00 	vldr	s3, [r7]
 800abbc:	ed91 6a00 	vldr	s12, [r1]
 800abc0:	eea5 7ae7 	vfms.f32	s14, s11, s15
 800abc4:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 800abc8:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 800abcc:	eea1 6ae7 	vfms.f32	s12, s3, s15
 800abd0:	4601      	mov	r1, r0
 800abd2:	f5a1 7176 	sub.w	r1, r1, #984	@ 0x3d8
 800abd6:	ed91 1a00 	vldr	s2, [r1]
 800abda:	eea2 6a47 	vfms.f32	s12, s4, s14
 800abde:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 800abe2:	f5a0 7079 	sub.w	r0, r0, #996	@ 0x3e4
 800abe6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800abea:	ee22 6a86 	vmul.f32	s12, s5, s12
 800abee:	460b      	mov	r3, r1
 800abf0:	eea3 7a46 	vfms.f32	s14, s6, s12
 800abf4:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 800abf8:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 800abfc:	eee3 7ac6 	vfms.f32	s15, s7, s12
 800ac00:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ac04:	ed8b 6a02 	vstr	s12, [fp, #8]
 800ac08:	eee4 7ac7 	vfms.f32	s15, s9, s14
 800ac0c:	ed8b 7a01 	vstr	s14, [fp, #4]
 800ac10:	ee65 7a27 	vmul.f32	s15, s10, s15
 800ac14:	ed90 7a00 	vldr	s14, [r0]
 800ac18:	ed91 6a00 	vldr	s12, [r1]
 800ac1c:	edcb 7a00 	vstr	s15, [fp]
 800ac20:	f50d 60b2 	add.w	r0, sp, #1424	@ 0x590
 800ac24:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800ac28:	edd3 7a00 	vldr	s15, [r3]
 800ac2c:	f5a1 7376 	sub.w	r3, r1, #984	@ 0x3d8
 800ac30:	edd3 0a00 	vldr	s1, [r3]
 800ac34:	f5a1 7279 	sub.w	r2, r1, #996	@ 0x3e4
 800ac38:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ac3c:	4658      	mov	r0, fp
 800ac3e:	a952      	add	r1, sp, #328	@ 0x148
 800ac40:	eee1 7a65 	vfms.f32	s15, s2, s11
 800ac44:	edd2 5a00 	vldr	s11, [r2]
 800ac48:	eee1 0a61 	vfms.f32	s1, s2, s3
 800ac4c:	eee1 5ac7 	vfms.f32	s11, s3, s14
 800ac50:	eef0 1a60 	vmov.f32	s3, s1
 800ac54:	eee2 5a46 	vfms.f32	s11, s4, s12
 800ac58:	eee2 1a67 	vfms.f32	s3, s4, s15
 800ac5c:	ee62 5aa5 	vmul.f32	s11, s5, s11
 800ac60:	ee62 2aa1 	vmul.f32	s5, s5, s3
 800ac64:	eea3 6a65 	vfms.f32	s12, s6, s11
 800ac68:	eee2 7ac3 	vfms.f32	s15, s5, s6
 800ac6c:	eea2 1ae3 	vfms.f32	s2, s5, s7
 800ac70:	eea3 7ae5 	vfms.f32	s14, s7, s11
 800ac74:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ac78:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ac7c:	edcb 5a05 	vstr	s11, [fp, #20]
 800ac80:	eef0 5a41 	vmov.f32	s11, s2
 800ac84:	eea4 7ac6 	vfms.f32	s14, s9, s12
 800ac88:	eee7 5ae4 	vfms.f32	s11, s15, s9
 800ac8c:	ee25 7a07 	vmul.f32	s14, s10, s14
 800ac90:	ee65 5a25 	vmul.f32	s11, s10, s11
 800ac94:	ed8b 6a04 	vstr	s12, [fp, #16]
 800ac98:	ed8b 7a03 	vstr	s14, [fp, #12]
 800ac9c:	edcb 2a08 	vstr	s5, [fp, #32]
 800aca0:	edcb 7a07 	vstr	s15, [fp, #28]
 800aca4:	edcb 5a06 	vstr	s11, [fp, #24]
 800aca8:	f7fa fcac 	bl	8005604 <b_dcm2q>
 800acac:	ed9d 7a53 	vldr	s14, [sp, #332]	@ 0x14c
 800acb0:	eddd 7a54 	vldr	s15, [sp, #336]	@ 0x150
 800acb4:	ed9d 6a52 	vldr	s12, [sp, #328]	@ 0x148
 800acb8:	9b06      	ldr	r3, [sp, #24]
 800acba:	eddd 6a03 	vldr	s13, [sp, #12]
 800acbe:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 800acc2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800acc6:	ee36 6a06 	vadd.f32	s12, s12, s12
 800acca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800acce:	ed8d 6a3d 	vstr	s12, [sp, #244]	@ 0xf4
 800acd2:	ed8d 7a3e 	vstr	s14, [sp, #248]	@ 0xf8
 800acd6:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f43e ae54 	beq.w	8009988 <iNemoEngine_API_Update+0x2b30>
 800ace0:	9906      	ldr	r1, [sp, #24]
 800ace2:	2200      	movs	r2, #0
 800ace4:	464b      	mov	r3, r9
 800ace6:	f881 21a0 	strb.w	r2, [r1, #416]	@ 0x1a0
 800acea:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 800acee:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 800acf2:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 800acf6:	f7fe ba06 	b.w	8009106 <iNemoEngine_API_Update+0x22ae>
 800acfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800acfe:	ee38 4ae7 	vsub.f32	s8, s17, s15
 800ad02:	edd2 3a31 	vldr	s7, [r2, #196]	@ 0xc4
 800ad06:	edd2 7a33 	vldr	s15, [r2, #204]	@ 0xcc
 800ad0a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 800ad0e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad12:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800ad16:	edd2 7a34 	vldr	s15, [r2, #208]	@ 0xd0
 800ad1a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ad1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad22:	ee3f fa23 	vadd.f32	s30, s30, s7
 800ad26:	f6fe ac6e 	blt.w	8009606 <iNemoEngine_API_Update+0x27ae>
 800ad2a:	9b06      	ldr	r3, [sp, #24]
 800ad2c:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 800ad30:	eef4 8ac7 	vcmpe.f32	s17, s14
 800ad34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad38:	f140 837a 	bpl.w	800b430 <iNemoEngine_API_Update+0x45d8>
 800ad3c:	edd3 3a35 	vldr	s7, [r3, #212]	@ 0xd4
 800ad40:	ed93 4a37 	vldr	s8, [r3, #220]	@ 0xdc
 800ad44:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad48:	ee34 4a63 	vsub.f32	s8, s8, s7
 800ad4c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800ad50:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ad54:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800ad58:	ee3f fa23 	vadd.f32	s30, s30, s7
 800ad5c:	9b06      	ldr	r3, [sp, #24]
 800ad5e:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 800ad62:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6a:	f6fe ac6d 	blt.w	8009648 <iNemoEngine_API_Update+0x27f0>
 800ad6e:	9b06      	ldr	r3, [sp, #24]
 800ad70:	ed93 7a3a 	vldr	s14, [r3, #232]	@ 0xe8
 800ad74:	eef4 8ac7 	vcmpe.f32	s17, s14
 800ad78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7c:	f140 82fd 	bpl.w	800b37a <iNemoEngine_API_Update+0x4522>
 800ad80:	edd3 3a39 	vldr	s7, [r3, #228]	@ 0xe4
 800ad84:	ed93 4a3b 	vldr	s8, [r3, #236]	@ 0xec
 800ad88:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad8c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800ad90:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800ad94:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ad98:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800ad9c:	ee3f fa23 	vadd.f32	s30, s30, s7
 800ada0:	9b06      	ldr	r3, [sp, #24]
 800ada2:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800ada6:	eef4 8ae7 	vcmpe.f32	s17, s15
 800adaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adae:	f6fe ac6d 	blt.w	800968c <iNemoEngine_API_Update+0x2834>
 800adb2:	9b06      	ldr	r3, [sp, #24]
 800adb4:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 800adb8:	eef4 8ac7 	vcmpe.f32	s17, s14
 800adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc0:	f140 831a 	bpl.w	800b3f8 <iNemoEngine_API_Update+0x45a0>
 800adc4:	edd3 3a3d 	vldr	s7, [r3, #244]	@ 0xf4
 800adc8:	ed93 4a3f 	vldr	s8, [r3, #252]	@ 0xfc
 800adcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800add0:	ee34 4a63 	vsub.f32	s8, s8, s7
 800add4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800add8:	ee64 7a27 	vmul.f32	s15, s8, s15
 800addc:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800ade0:	ee3f fa23 	vadd.f32	s30, s30, s7
 800ade4:	9b06      	ldr	r3, [sp, #24]
 800ade6:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 800adea:	eef4 8ae7 	vcmpe.f32	s17, s15
 800adee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf2:	f6fe ac6d 	blt.w	80096d0 <iNemoEngine_API_Update+0x2878>
 800adf6:	9b06      	ldr	r3, [sp, #24]
 800adf8:	ed93 7a42 	vldr	s14, [r3, #264]	@ 0x108
 800adfc:	eef4 8ac7 	vcmpe.f32	s17, s14
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	f140 82c3 	bpl.w	800b38e <iNemoEngine_API_Update+0x4536>
 800ae08:	edd3 3a41 	vldr	s7, [r3, #260]	@ 0x104
 800ae0c:	ed93 4a43 	vldr	s8, [r3, #268]	@ 0x10c
 800ae10:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae14:	ee34 4a63 	vsub.f32	s8, s8, s7
 800ae18:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800ae1c:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ae20:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800ae24:	ee3f fa23 	vadd.f32	s30, s30, s7
 800ae28:	9b06      	ldr	r3, [sp, #24]
 800ae2a:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 800ae2e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	f6fe ac6d 	blt.w	8009714 <iNemoEngine_API_Update+0x28bc>
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800ae40:	eef4 8ac7 	vcmpe.f32	s17, s14
 800ae44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae48:	f140 82d2 	bpl.w	800b3f0 <iNemoEngine_API_Update+0x4598>
 800ae4c:	ed93 4a45 	vldr	s8, [r3, #276]	@ 0x114
 800ae50:	edd3 4a47 	vldr	s9, [r3, #284]	@ 0x11c
 800ae54:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae58:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800ae5c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800ae60:	ee64 7aa7 	vmul.f32	s15, s9, s15
 800ae64:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800ae68:	ee3f fa04 	vadd.f32	s30, s30, s8
 800ae6c:	f7fd ba93 	b.w	8008396 <iNemoEngine_API_Update+0x153e>
 800ae70:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae74:	ee38 4ae7 	vsub.f32	s8, s17, s15
 800ae78:	edd3 3a4b 	vldr	s7, [r3, #300]	@ 0x12c
 800ae7c:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 800ae80:	ee77 7ae3 	vsub.f32	s15, s15, s7
 800ae84:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ae88:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800ae8c:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 800ae90:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ae94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae98:	ee3c ca23 	vadd.f32	s24, s24, s7
 800ae9c:	f6fd aaab 	blt.w	80083f6 <iNemoEngine_API_Update+0x159e>
 800aea0:	9b06      	ldr	r3, [sp, #24]
 800aea2:	ed93 7a50 	vldr	s14, [r3, #320]	@ 0x140
 800aea6:	eef4 8ac7 	vcmpe.f32	s17, s14
 800aeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeae:	f140 8260 	bpl.w	800b372 <iNemoEngine_API_Update+0x451a>
 800aeb2:	edd3 3a4f 	vldr	s7, [r3, #316]	@ 0x13c
 800aeb6:	ed93 4a51 	vldr	s8, [r3, #324]	@ 0x144
 800aeba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aebe:	ee34 4a63 	vsub.f32	s8, s8, s7
 800aec2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800aec6:	ee64 7a27 	vmul.f32	s15, s8, s15
 800aeca:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800aece:	ee3c ca23 	vadd.f32	s24, s24, s7
 800aed2:	9b06      	ldr	r3, [sp, #24]
 800aed4:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 800aed8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee0:	f6fd aaaa 	blt.w	8008438 <iNemoEngine_API_Update+0x15e0>
 800aee4:	9b06      	ldr	r3, [sp, #24]
 800aee6:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 800aeea:	eef4 8ac7 	vcmpe.f32	s17, s14
 800aeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef2:	f140 8237 	bpl.w	800b364 <iNemoEngine_API_Update+0x450c>
 800aef6:	edd3 3a53 	vldr	s7, [r3, #332]	@ 0x14c
 800aefa:	ed93 4a55 	vldr	s8, [r3, #340]	@ 0x154
 800aefe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af02:	ee34 4a63 	vsub.f32	s8, s8, s7
 800af06:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800af0a:	ee64 7a27 	vmul.f32	s15, s8, s15
 800af0e:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800af12:	ee3c ca23 	vadd.f32	s24, s24, s7
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 800af1c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800af20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af24:	f6fd aaaa 	blt.w	800847c <iNemoEngine_API_Update+0x1624>
 800af28:	9b06      	ldr	r3, [sp, #24]
 800af2a:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 800af2e:	eef4 8ac7 	vcmpe.f32	s17, s14
 800af32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af36:	f140 8270 	bpl.w	800b41a <iNemoEngine_API_Update+0x45c2>
 800af3a:	edd3 3a57 	vldr	s7, [r3, #348]	@ 0x15c
 800af3e:	ed93 4a59 	vldr	s8, [r3, #356]	@ 0x164
 800af42:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af46:	ee34 4a63 	vsub.f32	s8, s8, s7
 800af4a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800af4e:	ee64 7a27 	vmul.f32	s15, s8, s15
 800af52:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800af56:	ee3c ca23 	vadd.f32	s24, s24, s7
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 800af60:	eef4 8ae7 	vcmpe.f32	s17, s15
 800af64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af68:	f6fd aaaa 	blt.w	80084c0 <iNemoEngine_API_Update+0x1668>
 800af6c:	9b06      	ldr	r3, [sp, #24]
 800af6e:	ed93 7a5c 	vldr	s14, [r3, #368]	@ 0x170
 800af72:	eef4 8ac7 	vcmpe.f32	s17, s14
 800af76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af7a:	f140 8252 	bpl.w	800b422 <iNemoEngine_API_Update+0x45ca>
 800af7e:	edd3 3a5b 	vldr	s7, [r3, #364]	@ 0x16c
 800af82:	ed93 4a5d 	vldr	s8, [r3, #372]	@ 0x174
 800af86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af8a:	ee34 4a63 	vsub.f32	s8, s8, s7
 800af8e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800af92:	ee64 7a27 	vmul.f32	s15, s8, s15
 800af96:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800af9a:	ee3c ca23 	vadd.f32	s24, s24, s7
 800af9e:	9b06      	ldr	r3, [sp, #24]
 800afa0:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 800afa4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800afa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afac:	f6fd aaaa 	blt.w	8008504 <iNemoEngine_API_Update+0x16ac>
 800afb0:	9b06      	ldr	r3, [sp, #24]
 800afb2:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 800afb6:	eef4 8ac7 	vcmpe.f32	s17, s14
 800afba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afbe:	f140 8222 	bpl.w	800b406 <iNemoEngine_API_Update+0x45ae>
 800afc2:	ed93 4a5f 	vldr	s8, [r3, #380]	@ 0x17c
 800afc6:	edd3 4a61 	vldr	s9, [r3, #388]	@ 0x184
 800afca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800afce:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800afd2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800afd6:	ee64 7aa7 	vmul.f32	s15, s9, s15
 800afda:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800afde:	ee3c ca04 	vadd.f32	s24, s24, s8
 800afe2:	f7fd bb2a 	b.w	800863a <iNemoEngine_API_Update+0x17e2>
 800afe6:	a94e      	add	r1, sp, #312	@ 0x138
 800afe8:	a868      	add	r0, sp, #416	@ 0x1a0
 800afea:	f7fa fb0b 	bl	8005604 <b_dcm2q>
 800afee:	9d06      	ldr	r5, [sp, #24]
 800aff0:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 800aff4:	edc5 7a72 	vstr	s15, [r5, #456]	@ 0x1c8
 800aff8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800affc:	edc5 7a73 	vstr	s15, [r5, #460]	@ 0x1cc
 800b000:	4621      	mov	r1, r4
 800b002:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800b006:	f505 70ea 	add.w	r0, r5, #468	@ 0x1d4
 800b00a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b00e:	f001 fd5f 	bl	800cad0 <memset>
 800b012:	4be5      	ldr	r3, [pc, #916]	@ (800b3a8 <iNemoEngine_API_Update+0x4550>)
 800b014:	702c      	strb	r4, [r5, #0]
 800b016:	eddd 7a05 	vldr	s15, [sp, #20]
 800b01a:	edd5 2a02 	vldr	s5, [r5, #8]
 800b01e:	ed9d 7a1a 	vldr	s14, [sp, #104]	@ 0x68
 800b022:	9a06      	ldr	r2, [sp, #24]
 800b024:	f8c5 31d4 	str.w	r3, [r5, #468]	@ 0x1d4
 800b028:	f8c5 31fc 	str.w	r3, [r5, #508]	@ 0x1fc
 800b02c:	f8c5 3224 	str.w	r3, [r5, #548]	@ 0x224
 800b030:	f8c5 324c 	str.w	r3, [r5, #588]	@ 0x24c
 800b034:	f8c5 3274 	str.w	r3, [r5, #628]	@ 0x274
 800b038:	f8c5 329c 	str.w	r3, [r5, #668]	@ 0x29c
 800b03c:	f8c5 32c4 	str.w	r3, [r5, #708]	@ 0x2c4
 800b040:	f8c5 32ec 	str.w	r3, [r5, #748]	@ 0x2ec
 800b044:	f8c5 3314 	str.w	r3, [r5, #788]	@ 0x314
 800b048:	2401      	movs	r4, #1
 800b04a:	f7fd bb44 	b.w	80086d6 <iNemoEngine_API_Update+0x187e>
 800b04e:	290a      	cmp	r1, #10
 800b050:	f000 815d 	beq.w	800b30e <iNemoEngine_API_Update+0x44b6>
 800b054:	1c4b      	adds	r3, r1, #1
 800b056:	9906      	ldr	r1, [sp, #24]
 800b058:	f881 31a0 	strb.w	r3, [r1, #416]	@ 0x1a0
 800b05c:	4613      	mov	r3, r2
 800b05e:	2200      	movs	r2, #0
 800b060:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b064:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 800b068:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 800b06c:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 800b070:	f7fe b849 	b.w	8009106 <iNemoEngine_API_Update+0x22ae>
 800b074:	ed9d 7a55 	vldr	s14, [sp, #340]	@ 0x154
 800b078:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b080:	f340 824f 	ble.w	800b522 <iNemoEngine_API_Update+0x46ca>
 800b084:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800b088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b090:	f140 8244 	bpl.w	800b51c <iNemoEngine_API_Update+0x46c4>
 800b094:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a0:	f140 81f9 	bpl.w	800b496 <iNemoEngine_API_Update+0x463e>
 800b0a4:	eddf 7ace 	vldr	s15, [pc, #824]	@ 800b3e0 <iNemoEngine_API_Update+0x4588>
 800b0a8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800b0b4:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 800b0b8:	eef0 8a46 	vmov.f32	s17, s12
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	eee7 8aa5 	vfma.f32	s17, s15, s11
 800b0c4:	f2c0 81fb 	blt.w	800b4be <iNemoEngine_API_Update+0x4666>
 800b0c8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b0cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d4:	f140 81fb 	bpl.w	800b4ce <iNemoEngine_API_Update+0x4676>
 800b0d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b0dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0e0:	ed9f 6ab2 	vldr	s12, [pc, #712]	@ 800b3ac <iNemoEngine_API_Update+0x4554>
 800b0e4:	eddf 8ab2 	vldr	s17, [pc, #712]	@ 800b3b0 <iNemoEngine_API_Update+0x4558>
 800b0e8:	eee7 8a86 	vfma.f32	s17, s15, s12
 800b0ec:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b0f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f8:	f2c0 81fb 	blt.w	800b4f2 <iNemoEngine_API_Update+0x469a>
 800b0fc:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 800b100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b108:	f140 81fb 	bpl.w	800b502 <iNemoEngine_API_Update+0x46aa>
 800b10c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b110:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b114:	eef0 8a00 	vmov.f32	s17, #0	@ 0x40000000  2.0
 800b118:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b11c:	eee7 8a87 	vfma.f32	s17, s15, s14
 800b120:	9a06      	ldr	r2, [sp, #24]
 800b122:	2300      	movs	r3, #0
 800b124:	f8a2 31a6 	strh.w	r3, [r2, #422]	@ 0x1a6
 800b128:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 800b12c:	f7fe bc29 	b.w	8009982 <iNemoEngine_API_Update+0x2b2a>
 800b130:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 800b3b4 <iNemoEngine_API_Update+0x455c>
 800b134:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13c:	f57e ad78 	bpl.w	8009c30 <iNemoEngine_API_Update+0x2dd8>
 800b140:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 800b3b8 <iNemoEngine_API_Update+0x4560>
 800b144:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 800b3e0 <iNemoEngine_API_Update+0x4588>
 800b148:	eddf 5a9c 	vldr	s11, [pc, #624]	@ 800b3bc <iNemoEngine_API_Update+0x4564>
 800b14c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800b150:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b154:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800b3c0 <iNemoEngine_API_Update+0x4568>
 800b158:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b15c:	ed9f 6a99 	vldr	s12, [pc, #612]	@ 800b3c4 <iNemoEngine_API_Update+0x456c>
 800b160:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b168:	f6fe ad78 	blt.w	8009c5c <iNemoEngine_API_Update+0x2e04>
 800b16c:	eddf 6a96 	vldr	s13, [pc, #600]	@ 800b3c8 <iNemoEngine_API_Update+0x4570>
 800b170:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b178:	f57e ad78 	bpl.w	8009c6c <iNemoEngine_API_Update+0x2e14>
 800b17c:	ed9f 6a91 	vldr	s12, [pc, #580]	@ 800b3c4 <iNemoEngine_API_Update+0x456c>
 800b180:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800b184:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 800b188:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b18c:	eef3 5a04 	vmov.f32	s11, #52	@ 0x41a00000  20.0
 800b190:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800b194:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b198:	ed9f 6a93 	vldr	s12, [pc, #588]	@ 800b3e8 <iNemoEngine_API_Update+0x4590>
 800b19c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a4:	f6fe ad78 	blt.w	8009c98 <iNemoEngine_API_Update+0x2e40>
 800b1a8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b1ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	f57e ad77 	bpl.w	8009ca6 <iNemoEngine_API_Update+0x2e4e>
 800b1b8:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 800b3e8 <iNemoEngine_API_Update+0x4590>
 800b1bc:	eddf 6a83 	vldr	s13, [pc, #524]	@ 800b3cc <iNemoEngine_API_Update+0x4574>
 800b1c0:	eddf 5a83 	vldr	s11, [pc, #524]	@ 800b3d0 <iNemoEngine_API_Update+0x4578>
 800b1c4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800b1c8:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b1cc:	eef2 6a05 	vmov.f32	s13, #37	@ 0x41280000  10.5
 800b1d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b1d4:	f7fe bd75 	b.w	8009cc2 <iNemoEngine_API_Update+0x2e6a>
 800b1d8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800b3d4 <iNemoEngine_API_Update+0x457c>
 800b1dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e4:	f57e ad06 	bpl.w	8009bf4 <iNemoEngine_API_Update+0x2d9c>
 800b1e8:	eddf 6a73 	vldr	s13, [pc, #460]	@ 800b3b8 <iNemoEngine_API_Update+0x4560>
 800b1ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f4:	da9c      	bge.n	800b130 <iNemoEngine_API_Update+0x42d8>
 800b1f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1fa:	f7fe bd11 	b.w	8009c20 <iNemoEngine_API_Update+0x2dc8>
 800b1fe:	2104      	movs	r1, #4
 800b200:	f04f 0e03 	mov.w	lr, #3
 800b204:	2706      	movs	r7, #6
 800b206:	f04f 0c07 	mov.w	ip, #7
 800b20a:	4608      	mov	r0, r1
 800b20c:	2301      	movs	r3, #1
 800b20e:	2600      	movs	r6, #0
 800b210:	f7ff bbfa 	b.w	800aa08 <iNemoEngine_API_Update+0x3bb0>
 800b214:	eddf 3a70 	vldr	s7, [pc, #448]	@ 800b3d8 <iNemoEngine_API_Update+0x4580>
 800b218:	ed9f 5a70 	vldr	s10, [pc, #448]	@ 800b3dc <iNemoEngine_API_Update+0x4584>
 800b21c:	ac43      	add	r4, sp, #268	@ 0x10c
 800b21e:	f04f 31ff 	mov.w	r1, #4294967295
 800b222:	edd0 7a7c 	vldr	s15, [r0, #496]	@ 0x1f0
 800b226:	f5a0 73ae 	sub.w	r3, r0, #348	@ 0x15c
 800b22a:	3101      	adds	r1, #1
 800b22c:	eeb0 7a67 	vmov.f32	s14, s15
 800b230:	461a      	mov	r2, r3
 800b232:	edd2 5ad6 	vldr	s11, [r2, #856]	@ 0x358
 800b236:	320c      	adds	r2, #12
 800b238:	4290      	cmp	r0, r2
 800b23a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b23e:	d1f8      	bne.n	800b232 <iNemoEngine_API_Update+0x43da>
 800b240:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b248:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b24c:	edd3 5ad6 	vldr	s11, [r3, #856]	@ 0x358
 800b250:	330c      	adds	r3, #12
 800b252:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b256:	4298      	cmp	r0, r3
 800b258:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b25c:	d1f6      	bne.n	800b24c <iNemoEngine_API_Update+0x43f4>
 800b25e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b262:	2902      	cmp	r1, #2
 800b264:	f100 0004 	add.w	r0, r0, #4
 800b268:	ece4 7a01 	vstmia	r4!, {s15}
 800b26c:	d1d9      	bne.n	800b222 <iNemoEngine_API_Update+0x43ca>
 800b26e:	eddd 5a43 	vldr	s11, [sp, #268]	@ 0x10c
 800b272:	eddd 7a44 	vldr	s15, [sp, #272]	@ 0x110
 800b276:	ed9d 7a45 	vldr	s14, [sp, #276]	@ 0x114
 800b27a:	eeb1 3ae5 	vsqrt.f32	s6, s11
 800b27e:	eef1 3ae7 	vsqrt.f32	s7, s15
 800b282:	eeb1 5ac7 	vsqrt.f32	s10, s14
 800b286:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b28a:	eef3 5a00 	vmov.f32	s11, #48	@ 0x41800000  16.0
 800b28e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b292:	ed8d 3a43 	vstr	s6, [sp, #268]	@ 0x10c
 800b296:	eef4 7ae5 	vcmpe.f32	s15, s11
 800b29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29e:	edcd 3a44 	vstr	s7, [sp, #272]	@ 0x110
 800b2a2:	ed8d 5a45 	vstr	s10, [sp, #276]	@ 0x114
 800b2a6:	f57e abd4 	bpl.w	8009a52 <iNemoEngine_API_Update+0x2bfa>
 800b2aa:	9906      	ldr	r1, [sp, #24]
 800b2ac:	ed8d 4a95 	vstr	s8, [sp, #596]	@ 0x254
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	edcd 4a96 	vstr	s9, [sp, #600]	@ 0x258
 800b2b6:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 800b2ba:	464b      	mov	r3, r9
 800b2bc:	704a      	strb	r2, [r1, #1]
 800b2be:	f7fd bf22 	b.w	8009106 <iNemoEngine_API_Update+0x22ae>
 800b2c2:	2208      	movs	r2, #8
 800b2c4:	9203      	str	r2, [sp, #12]
 800b2c6:	2205      	movs	r2, #5
 800b2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f7ff bbb3 	b.w	800aa36 <iNemoEngine_API_Update+0x3bde>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f7fd bf04 	b.w	80090de <iNemoEngine_API_Update+0x2286>
 800b2d6:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 800b2da:	2b27      	cmp	r3, #39	@ 0x27
 800b2dc:	d838      	bhi.n	800b350 <iNemoEngine_API_Update+0x44f8>
 800b2de:	ed8d 4a95 	vstr	s8, [sp, #596]	@ 0x254
 800b2e2:	edcd 4a96 	vstr	s9, [sp, #600]	@ 0x258
 800b2e6:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 800b2ea:	9906      	ldr	r1, [sp, #24]
 800b2ec:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	@ 0x1a8
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2f6:	bf14      	ite	ne
 800b2f8:	b29b      	uxthne	r3, r3
 800b2fa:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
 800b2fe:	2201      	movs	r2, #1
 800b300:	f8a1 31a8 	strh.w	r3, [r1, #424]	@ 0x1a8
 800b304:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 800b308:	464b      	mov	r3, r9
 800b30a:	f7fd befc 	b.w	8009106 <iNemoEngine_API_Update+0x22ae>
 800b30e:	9906      	ldr	r1, [sp, #24]
 800b310:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 800b314:	f891 31a3 	ldrb.w	r3, [r1, #419]	@ 0x1a3
 800b318:	ed8d ea95 	vstr	s28, [sp, #596]	@ 0x254
 800b31c:	3301      	adds	r3, #1
 800b31e:	f881 31a3 	strb.w	r3, [r1, #419]	@ 0x1a3
 800b322:	784b      	ldrb	r3, [r1, #1]
 800b324:	edcd ea96 	vstr	s29, [sp, #600]	@ 0x258
 800b328:	f240 1201 	movw	r2, #257	@ 0x101
 800b32c:	edcd ba97 	vstr	s23, [sp, #604]	@ 0x25c
 800b330:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 800b334:	b13b      	cbz	r3, 800b346 <iNemoEngine_API_Update+0x44ee>
 800b336:	2300      	movs	r3, #0
 800b338:	ed81 ea6f 	vstr	s28, [r1, #444]	@ 0x1bc
 800b33c:	edc1 ea70 	vstr	s29, [r1, #448]	@ 0x1c0
 800b340:	edc1 ba71 	vstr	s23, [r1, #452]	@ 0x1c4
 800b344:	704b      	strb	r3, [r1, #1]
 800b346:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b34a:	2301      	movs	r3, #1
 800b34c:	f7fd bedb 	b.w	8009106 <iNemoEngine_API_Update+0x22ae>
 800b350:	ed8d ea95 	vstr	s28, [sp, #596]	@ 0x254
 800b354:	edcd ea96 	vstr	s29, [sp, #600]	@ 0x258
 800b358:	edcd ba97 	vstr	s23, [sp, #604]	@ 0x25c
 800b35c:	e7c5      	b.n	800b2ea <iNemoEngine_API_Update+0x4492>
 800b35e:	eef0 7a47 	vmov.f32	s15, s14
 800b362:	e5bf      	b.n	800aee4 <iNemoEngine_API_Update+0x408c>
 800b364:	eef0 7a47 	vmov.f32	s15, s14
 800b368:	f7fd b86f 	b.w	800844a <iNemoEngine_API_Update+0x15f2>
 800b36c:	eef0 7a47 	vmov.f32	s15, s14
 800b370:	e563      	b.n	800ae3a <iNemoEngine_API_Update+0x3fe2>
 800b372:	eef0 7a47 	vmov.f32	s15, s14
 800b376:	f7fd b846 	b.w	8008406 <iNemoEngine_API_Update+0x15ae>
 800b37a:	eef0 7a47 	vmov.f32	s15, s14
 800b37e:	f7fe b96c 	b.w	800965a <iNemoEngine_API_Update+0x2802>
 800b382:	eef0 7a47 	vmov.f32	s15, s14
 800b386:	e4f2      	b.n	800ad6e <iNemoEngine_API_Update+0x3f16>
 800b388:	eef0 7a47 	vmov.f32	s15, s14
 800b38c:	e533      	b.n	800adf6 <iNemoEngine_API_Update+0x3f9e>
 800b38e:	eef0 7a47 	vmov.f32	s15, s14
 800b392:	f7fe b9a6 	b.w	80096e2 <iNemoEngine_API_Update+0x288a>
 800b396:	f503 63f3 	add.w	r3, r3, #1944	@ 0x798
 800b39a:	9315      	str	r3, [sp, #84]	@ 0x54
 800b39c:	f7fc b886 	b.w	80074ac <iNemoEngine_API_Update+0x654>
 800b3a0:	f505 6597 	add.w	r5, r5, #1208	@ 0x4b8
 800b3a4:	f7fe be2c 	b.w	800a000 <iNemoEngine_API_Update+0x31a8>
 800b3a8:	40a00000 	.word	0x40a00000
 800b3ac:	3e999998 	.word	0x3e999998
 800b3b0:	3f99999a 	.word	0x3f99999a
 800b3b4:	3cf5c28f 	.word	0x3cf5c28f
 800b3b8:	3c75c28f 	.word	0x3c75c28f
 800b3bc:	42855556 	.word	0x42855556
 800b3c0:	3f866666 	.word	0x3f866666
 800b3c4:	3d4ccccd 	.word	0x3d4ccccd
 800b3c8:	3dcccccd 	.word	0x3dcccccd
 800b3cc:	42200000 	.word	0x42200000
 800b3d0:	40555555 	.word	0x40555555
 800b3d4:	3c23d70a 	.word	0x3c23d70a
 800b3d8:	3d088889 	.word	0x3d088889
 800b3dc:	3d0d3dcb 	.word	0x3d0d3dcb
 800b3e0:	3dccccd0 	.word	0x3dccccd0
 800b3e4:	3f8ccccd 	.word	0x3f8ccccd
 800b3e8:	3e4ccccd 	.word	0x3e4ccccd
 800b3ec:	00000000 	.word	0x00000000
 800b3f0:	eef0 7a47 	vmov.f32	s15, s14
 800b3f4:	f7fe b997 	b.w	8009726 <iNemoEngine_API_Update+0x28ce>
 800b3f8:	eef0 7a47 	vmov.f32	s15, s14
 800b3fc:	f7fe b94f 	b.w	800969e <iNemoEngine_API_Update+0x2846>
 800b400:	eef0 7a47 	vmov.f32	s15, s14
 800b404:	e4d5      	b.n	800adb2 <iNemoEngine_API_Update+0x3f5a>
 800b406:	eef0 7a47 	vmov.f32	s15, s14
 800b40a:	f7fd b884 	b.w	8008516 <iNemoEngine_API_Update+0x16be>
 800b40e:	eef0 7a47 	vmov.f32	s15, s14
 800b412:	e5cd      	b.n	800afb0 <iNemoEngine_API_Update+0x4158>
 800b414:	eef0 7a47 	vmov.f32	s15, s14
 800b418:	e586      	b.n	800af28 <iNemoEngine_API_Update+0x40d0>
 800b41a:	eef0 7a47 	vmov.f32	s15, s14
 800b41e:	f7fd b836 	b.w	800848e <iNemoEngine_API_Update+0x1636>
 800b422:	eef0 7a47 	vmov.f32	s15, s14
 800b426:	f7fd b854 	b.w	80084d2 <iNemoEngine_API_Update+0x167a>
 800b42a:	eef0 7a47 	vmov.f32	s15, s14
 800b42e:	e59d      	b.n	800af6c <iNemoEngine_API_Update+0x4114>
 800b430:	eef0 7a47 	vmov.f32	s15, s14
 800b434:	f7fe b8ef 	b.w	8009616 <iNemoEngine_API_Update+0x27be>
 800b438:	9906      	ldr	r1, [sp, #24]
 800b43a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800b43e:	f8c1 324c 	str.w	r3, [r1, #588]	@ 0x24c
 800b442:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
 800b446:	f8c1 329c 	str.w	r3, [r1, #668]	@ 0x29c
 800b44a:	f7fe ba9a 	b.w	8009982 <iNemoEngine_API_Update+0x2b2a>
 800b44e:	9906      	ldr	r1, [sp, #24]
 800b450:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	@ 0x1a6
 800b454:	3301      	adds	r3, #1
 800b456:	f8a1 31a6 	strh.w	r3, [r1, #422]	@ 0x1a6
 800b45a:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800b45e:	460b      	mov	r3, r1
 800b460:	f7ff ba49 	b.w	800a8f6 <iNemoEngine_API_Update+0x3a9e>
 800b464:	2a00      	cmp	r2, #0
 800b466:	f73d afa4 	bgt.w	80093b2 <iNemoEngine_API_Update+0x255a>
 800b46a:	eddd 5a83 	vldr	s11, [sp, #524]	@ 0x20c
 800b46e:	ed9d 7a84 	vldr	s14, [sp, #528]	@ 0x210
 800b472:	eddd 7a85 	vldr	s15, [sp, #532]	@ 0x214
 800b476:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 800b47a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800b47e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b482:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b486:	edcd 5a83 	vstr	s11, [sp, #524]	@ 0x20c
 800b48a:	ed8d 7a84 	vstr	s14, [sp, #528]	@ 0x210
 800b48e:	edcd 7a85 	vstr	s15, [sp, #532]	@ 0x214
 800b492:	f7fd bb24 	b.w	8008ade <iNemoEngine_API_Update+0x1c86>
 800b496:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b49a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800b49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a2:	f57f ae11 	bpl.w	800b0c8 <iNemoEngine_API_Update+0x4270>
 800b4a6:	ed1f 6a32 	vldr	s12, [pc, #-200]	@ 800b3e0 <iNemoEngine_API_Update+0x4588>
 800b4aa:	ed5f 8a32 	vldr	s17, [pc, #-200]	@ 800b3e4 <iNemoEngine_API_Update+0x458c>
 800b4ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b4b6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b4ba:	eee7 8a86 	vfma.f32	s17, s15, s12
 800b4be:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b4c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	f6ff ae0f 	blt.w	800b0ec <iNemoEngine_API_Update+0x4294>
 800b4ce:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b4d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4da:	f57f ae0f 	bpl.w	800b0fc <iNemoEngine_API_Update+0x42a4>
 800b4de:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b4e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4e6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b4ea:	eef7 8a08 	vmov.f32	s17, #120	@ 0x3fc00000  1.5
 800b4ee:	eee7 8a86 	vfma.f32	s17, s15, s12
 800b4f2:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 800b4f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4fe:	f6ff ae0f 	blt.w	800b120 <iNemoEngine_API_Update+0x42c8>
 800b502:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 800b506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b50a:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 800b3e8 <iNemoEngine_API_Update+0x4590>
 800b50e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b512:	eef0 8a08 	vmov.f32	s17, #8	@ 0x40400000  3.0
 800b516:	eee7 8a87 	vfma.f32	s17, s15, s14
 800b51a:	e601      	b.n	800b120 <iNemoEngine_API_Update+0x42c8>
 800b51c:	eef1 8a04 	vmov.f32	s17, #20	@ 0x40a00000  5.0
 800b520:	e5fe      	b.n	800b120 <iNemoEngine_API_Update+0x42c8>
 800b522:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b526:	e5fb      	b.n	800b120 <iNemoEngine_API_Update+0x42c8>
 800b528:	ed1f 8a50 	vldr	s16, [pc, #-320]	@ 800b3ec <iNemoEngine_API_Update+0x4594>
 800b52c:	f7fb bdeb 	b.w	8007106 <iNemoEngine_API_Update+0x2ae>

0800b530 <MotionFX_initialize>:
 800b530:	4a4c      	ldr	r2, [pc, #304]	@ (800b664 <MotionFX_initialize+0x134>)
 800b532:	6813      	ldr	r3, [r2, #0]
 800b534:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 800b538:	f023 0301 	bic.w	r3, r3, #1
 800b53c:	b530      	push	{r4, r5, lr}
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 800b544:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 800b548:	400b      	ands	r3, r1
 800b54a:	f24c 2240 	movw	r2, #49728	@ 0xc240
 800b54e:	4293      	cmp	r3, r2
 800b550:	b085      	sub	sp, #20
 800b552:	4604      	mov	r4, r0
 800b554:	d013      	beq.n	800b57e <MotionFX_initialize+0x4e>
 800b556:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 800b55a:	f24c 2270 	movw	r2, #49776	@ 0xc270
 800b55e:	4019      	ands	r1, r3
 800b560:	4291      	cmp	r1, r2
 800b562:	d00c      	beq.n	800b57e <MotionFX_initialize+0x4e>
 800b564:	4a40      	ldr	r2, [pc, #256]	@ (800b668 <MotionFX_initialize+0x138>)
 800b566:	2301      	movs	r3, #1
 800b568:	6093      	str	r3, [r2, #8]
 800b56a:	6893      	ldr	r3, [r2, #8]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1fc      	bne.n	800b56a <MotionFX_initialize+0x3a>
 800b570:	4b3e      	ldr	r3, [pc, #248]	@ (800b66c <MotionFX_initialize+0x13c>)
 800b572:	6013      	str	r3, [r2, #0]
 800b574:	6812      	ldr	r2, [r2, #0]
 800b576:	4b3e      	ldr	r3, [pc, #248]	@ (800b670 <MotionFX_initialize+0x140>)
 800b578:	429a      	cmp	r2, r3
 800b57a:	d02c      	beq.n	800b5d6 <MotionFX_initialize+0xa6>
 800b57c:	e7fe      	b.n	800b57c <MotionFX_initialize+0x4c>
 800b57e:	4b3d      	ldr	r3, [pc, #244]	@ (800b674 <MotionFX_initialize+0x144>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1ee      	bne.n	800b564 <MotionFX_initialize+0x34>
 800b586:	4a3c      	ldr	r2, [pc, #240]	@ (800b678 <MotionFX_initialize+0x148>)
 800b588:	6813      	ldr	r3, [r2, #0]
 800b58a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b58e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800b592:	d056      	beq.n	800b642 <MotionFX_initialize+0x112>
 800b594:	6813      	ldr	r3, [r2, #0]
 800b596:	f240 4183 	movw	r1, #1155	@ 0x483
 800b59a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b59e:	428b      	cmp	r3, r1
 800b5a0:	d04f      	beq.n	800b642 <MotionFX_initialize+0x112>
 800b5a2:	6813      	ldr	r3, [r2, #0]
 800b5a4:	f240 4285 	movw	r2, #1157	@ 0x485
 800b5a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d048      	beq.n	800b642 <MotionFX_initialize+0x112>
 800b5b0:	4b32      	ldr	r3, [pc, #200]	@ (800b67c <MotionFX_initialize+0x14c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5b8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b5bc:	d1d2      	bne.n	800b564 <MotionFX_initialize+0x34>
 800b5be:	4a30      	ldr	r2, [pc, #192]	@ (800b680 <MotionFX_initialize+0x150>)
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	6093      	str	r3, [r2, #8]
 800b5c4:	6893      	ldr	r3, [r2, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1fc      	bne.n	800b5c4 <MotionFX_initialize+0x94>
 800b5ca:	4b28      	ldr	r3, [pc, #160]	@ (800b66c <MotionFX_initialize+0x13c>)
 800b5cc:	6013      	str	r3, [r2, #0]
 800b5ce:	6812      	ldr	r2, [r2, #0]
 800b5d0:	4b27      	ldr	r3, [pc, #156]	@ (800b670 <MotionFX_initialize+0x140>)
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d1d2      	bne.n	800b57c <MotionFX_initialize+0x4c>
 800b5d6:	4b2b      	ldr	r3, [pc, #172]	@ (800b684 <MotionFX_initialize+0x154>)
 800b5d8:	4a2b      	ldr	r2, [pc, #172]	@ (800b688 <MotionFX_initialize+0x158>)
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	2501      	movs	r5, #1
 800b5de:	4620      	mov	r0, r4
 800b5e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800b5e4:	f882 53c4 	strb.w	r5, [r2, #964]	@ 0x3c4
 800b5e8:	f7fb f946 	bl	8006878 <MFX_emptyAttitude>
 800b5ec:	a901      	add	r1, sp, #4
 800b5ee:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 800b5f2:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 800b5f6:	f7f9 ff03 	bl	8005400 <updateOrientation>
 800b5fa:	a903      	add	r1, sp, #12
 800b5fc:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 800b600:	f7f9 fefe 	bl	8005400 <updateOrientation>
 800b604:	a902      	add	r1, sp, #8
 800b606:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800b60a:	f7f9 fef9 	bl	8005400 <updateOrientation>
 800b60e:	4b1f      	ldr	r3, [pc, #124]	@ (800b68c <MotionFX_initialize+0x15c>)
 800b610:	491f      	ldr	r1, [pc, #124]	@ (800b690 <MotionFX_initialize+0x160>)
 800b612:	6363      	str	r3, [r4, #52]	@ 0x34
 800b614:	4b1f      	ldr	r3, [pc, #124]	@ (800b694 <MotionFX_initialize+0x164>)
 800b616:	4a20      	ldr	r2, [pc, #128]	@ (800b698 <MotionFX_initialize+0x168>)
 800b618:	62a1      	str	r1, [r4, #40]	@ 0x28
 800b61a:	61e3      	str	r3, [r4, #28]
 800b61c:	491f      	ldr	r1, [pc, #124]	@ (800b69c <MotionFX_initialize+0x16c>)
 800b61e:	61a2      	str	r2, [r4, #24]
 800b620:	2300      	movs	r3, #0
 800b622:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 800b626:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b62a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 800b62e:	f240 1301 	movw	r3, #257	@ 0x101
 800b632:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800b634:	6221      	str	r1, [r4, #32]
 800b636:	80a2      	strh	r2, [r4, #4]
 800b638:	f8a4 300d 	strh.w	r3, [r4, #13]
 800b63c:	73e5      	strb	r5, [r4, #15]
 800b63e:	b005      	add	sp, #20
 800b640:	bd30      	pop	{r4, r5, pc}
 800b642:	4a17      	ldr	r2, [pc, #92]	@ (800b6a0 <MotionFX_initialize+0x170>)
 800b644:	2301      	movs	r3, #1
 800b646:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800b64a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1fb      	bne.n	800b64a <MotionFX_initialize+0x11a>
 800b652:	4b06      	ldr	r3, [pc, #24]	@ (800b66c <MotionFX_initialize+0x13c>)
 800b654:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800b658:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800b65c:	4b04      	ldr	r3, [pc, #16]	@ (800b670 <MotionFX_initialize+0x140>)
 800b65e:	429a      	cmp	r2, r3
 800b660:	d0b9      	beq.n	800b5d6 <MotionFX_initialize+0xa6>
 800b662:	e78b      	b.n	800b57c <MotionFX_initialize+0x4c>
 800b664:	e0002000 	.word	0xe0002000
 800b668:	40023000 	.word	0x40023000
 800b66c:	f407a5c2 	.word	0xf407a5c2
 800b670:	b5e8b5cd 	.word	0xb5e8b5cd
 800b674:	e0042000 	.word	0xe0042000
 800b678:	5c001000 	.word	0x5c001000
 800b67c:	50081000 	.word	0x50081000
 800b680:	4c004000 	.word	0x4c004000
 800b684:	00756e65 	.word	0x00756e65
 800b688:	20000204 	.word	0x20000204
 800b68c:	3f2ac083 	.word	0x3f2ac083
 800b690:	3f666666 	.word	0x3f666666
 800b694:	3a378034 	.word	0x3a378034
 800b698:	3a51b717 	.word	0x3a51b717
 800b69c:	3b378034 	.word	0x3b378034
 800b6a0:	58024000 	.word	0x58024000

0800b6a4 <MotionFX_enable_6X>:
 800b6a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e0 <MotionFX_enable_6X+0x3c>)
 800b6a6:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 800b6aa:	b903      	cbnz	r3, 800b6ae <MotionFX_enable_6X+0xa>
 800b6ac:	4770      	bx	lr
 800b6ae:	2900      	cmp	r1, #0
 800b6b0:	d0fc      	beq.n	800b6ac <MotionFX_enable_6X+0x8>
 800b6b2:	b530      	push	{r4, r5, lr}
 800b6b4:	1d05      	adds	r5, r0, #4
 800b6b6:	b099      	sub	sp, #100	@ 0x64
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	225c      	movs	r2, #92	@ 0x5c
 800b6be:	a801      	add	r0, sp, #4
 800b6c0:	f001 fa85 	bl	800cbce <memcpy>
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f7fb f8d7 	bl	8006878 <MFX_emptyAttitude>
 800b6ca:	225c      	movs	r2, #92	@ 0x5c
 800b6cc:	a901      	add	r1, sp, #4
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f001 fa7d 	bl	800cbce <memcpy>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800b6da:	7363      	strb	r3, [r4, #13]
 800b6dc:	b019      	add	sp, #100	@ 0x64
 800b6de:	bd30      	pop	{r4, r5, pc}
 800b6e0:	20000204 	.word	0x20000204

0800b6e4 <MotionFX_update>:
 800b6e4:	b430      	push	{r4, r5}
 800b6e6:	4c06      	ldr	r4, [pc, #24]	@ (800b700 <MotionFX_update+0x1c>)
 800b6e8:	9d02      	ldr	r5, [sp, #8]
 800b6ea:	f894 43c4 	ldrb.w	r4, [r4, #964]	@ 0x3c4
 800b6ee:	b90c      	cbnz	r4, 800b6f4 <MotionFX_update+0x10>
 800b6f0:	bc30      	pop	{r4, r5}
 800b6f2:	4770      	bx	lr
 800b6f4:	ed93 0a00 	vldr	s0, [r3]
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	bc30      	pop	{r4, r5}
 800b6fc:	f7fb bbac 	b.w	8006e58 <iNemoEngine_API_Update>
 800b700:	20000204 	.word	0x20000204

0800b704 <MotionFX_propagate>:
 800b704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b708:	ed2d 8b06 	vpush	{d8-d10}
 800b70c:	4ca2      	ldr	r4, [pc, #648]	@ (800b998 <MotionFX_propagate+0x294>)
 800b70e:	f894 63c4 	ldrb.w	r6, [r4, #964]	@ 0x3c4
 800b712:	b0a1      	sub	sp, #132	@ 0x84
 800b714:	b926      	cbnz	r6, 800b720 <MotionFX_propagate+0x1c>
 800b716:	b021      	add	sp, #132	@ 0x84
 800b718:	ecbd 8b06 	vpop	{d8-d10}
 800b71c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b720:	4694      	mov	ip, r2
 800b722:	4604      	mov	r4, r0
 800b724:	460d      	mov	r5, r1
 800b726:	68d0      	ldr	r0, [r2, #12]
 800b728:	6911      	ldr	r1, [r2, #16]
 800b72a:	6952      	ldr	r2, [r2, #20]
 800b72c:	edd3 9a00 	vldr	s19, [r3]
 800b730:	ab13      	add	r3, sp, #76	@ 0x4c
 800b732:	c307      	stmia	r3!, {r0, r1, r2}
 800b734:	f8dc 0000 	ldr.w	r0, [ip]
 800b738:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b73c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800b740:	ab10      	add	r3, sp, #64	@ 0x40
 800b742:	c307      	stmia	r3!, {r0, r1, r2}
 800b744:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800b748:	f8dc 101c 	ldr.w	r1, [ip, #28]
 800b74c:	f8dc 2020 	ldr.w	r2, [ip, #32]
 800b750:	ab16      	add	r3, sp, #88	@ 0x58
 800b752:	f104 073a 	add.w	r7, r4, #58	@ 0x3a
 800b756:	c307      	stmia	r3!, {r0, r1, r2}
 800b758:	4639      	mov	r1, r7
 800b75a:	a803      	add	r0, sp, #12
 800b75c:	aa13      	add	r2, sp, #76	@ 0x4c
 800b75e:	f7f9 fcb3 	bl	80050c8 <rotVect>
 800b762:	aa16      	add	r2, sp, #88	@ 0x58
 800b764:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 800b768:	a806      	add	r0, sp, #24
 800b76a:	f7f9 fcad 	bl	80050c8 <rotVect>
 800b76e:	f8d4 394c 	ldr.w	r3, [r4, #2380]	@ 0x94c
 800b772:	2b09      	cmp	r3, #9
 800b774:	d829      	bhi.n	800b7ca <MotionFX_propagate+0xc6>
 800b776:	eddd 8a04 	vldr	s17, [sp, #16]
 800b77a:	ed9d 9a03 	vldr	s18, [sp, #12]
 800b77e:	ed9d 8a05 	vldr	s16, [sp, #20]
 800b782:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800b786:	eee9 7a09 	vfma.f32	s15, s18, s18
 800b78a:	eee8 7a08 	vfma.f32	s15, s16, s16
 800b78e:	ee17 0a90 	vmov	r0, s15
 800b792:	f7f4 fed9 	bl	8000548 <__aeabi_f2d>
 800b796:	ec41 0b10 	vmov	d0, r0, r1
 800b79a:	f004 fcdd 	bl	8010158 <sqrt>
 800b79e:	ec51 0b10 	vmov	r0, r1, d0
 800b7a2:	f7f5 fa21 	bl	8000be8 <__aeabi_d2f>
 800b7a6:	ee07 0a90 	vmov	s15, r0
 800b7aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7ae:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800b7b2:	ee29 9a27 	vmul.f32	s18, s18, s15
 800b7b6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b7ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b7be:	ed8d 9a03 	vstr	s18, [sp, #12]
 800b7c2:	edcd 8a04 	vstr	s17, [sp, #16]
 800b7c6:	ed8d 8a05 	vstr	s16, [sp, #20]
 800b7ca:	7923      	ldrb	r3, [r4, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80ce 	beq.w	800b96e <MotionFX_propagate+0x26a>
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e2:	f604 135c 	addw	r3, r4, #2396	@ 0x95c
 800b7e6:	f504 6613 	add.w	r6, r4, #2352	@ 0x930
 800b7ea:	edd3 7a00 	vldr	s15, [r3]
 800b7ee:	eddd 8a06 	vldr	s17, [sp, #24]
 800b7f2:	ed9d 6a07 	vldr	s12, [sp, #28]
 800b7f6:	eddd 6a08 	vldr	s13, [sp, #32]
 800b7fa:	ed9f 8a68 	vldr	s16, [pc, #416]	@ 800b99c <MotionFX_propagate+0x298>
 800b7fe:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800b9a0 <MotionFX_propagate+0x29c>
 800b802:	eee7 7a28 	vfma.f32	s15, s14, s17
 800b806:	ee26 9a08 	vmul.f32	s18, s12, s16
 800b80a:	edc3 7a00 	vstr	s15, [r3]
 800b80e:	f504 6316 	add.w	r3, r4, #2400	@ 0x960
 800b812:	edd3 7a00 	vldr	s15, [r3]
 800b816:	ed8d 9a07 	vstr	s18, [sp, #28]
 800b81a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b81e:	ee68 8a88 	vmul.f32	s17, s17, s16
 800b822:	edc3 7a00 	vstr	s15, [r3]
 800b826:	f604 1364 	addw	r3, r4, #2404	@ 0x964
 800b82a:	edd3 7a00 	vldr	s15, [r3]
 800b82e:	edcd 8a06 	vstr	s17, [sp, #24]
 800b832:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b836:	ee26 8a88 	vmul.f32	s16, s13, s16
 800b83a:	edc3 7a00 	vstr	s15, [r3]
 800b83e:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 800b842:	edd3 7a00 	vldr	s15, [r3]
 800b846:	ed8d 8a08 	vstr	s16, [sp, #32]
 800b84a:	f504 6314 	add.w	r3, r4, #2368	@ 0x940
 800b84e:	ed93 7a00 	vldr	s14, [r3]
 800b852:	ee39 9a67 	vsub.f32	s18, s18, s15
 800b856:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800b85a:	ee69 7a09 	vmul.f32	s15, s18, s18
 800b85e:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 800b862:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800b866:	ed93 7a00 	vldr	s14, [r3]
 800b86a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800b86e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b872:	eee8 7a08 	vfma.f32	s15, s16, s16
 800b876:	ee29 0a80 	vmul.f32	s0, s19, s0
 800b87a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800b87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b882:	dd79      	ble.n	800b978 <MotionFX_propagate+0x274>
 800b884:	eeb1 aae7 	vsqrt.f32	s20, s15
 800b888:	ee6a 9a00 	vmul.f32	s19, s20, s0
 800b88c:	eeb0 0a69 	vmov.f32	s0, s19
 800b890:	f004 fd08 	bl	80102a4 <sinf>
 800b894:	eeb0 7a40 	vmov.f32	s14, s0
 800b898:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 800b89c:	eeb0 0a69 	vmov.f32	s0, s19
 800b8a0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b8a4:	ee29 9a27 	vmul.f32	s18, s18, s15
 800b8a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b8ac:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 800b8b0:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 800b8b4:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 800b8b8:	f004 fca8 	bl	801020c <cosf>
 800b8bc:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 800b8c0:	a809      	add	r0, sp, #36	@ 0x24
 800b8c2:	f604 1838 	addw	r8, r4, #2360	@ 0x938
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	f7f9 fe1b 	bl	8005504 <qmult>
 800b8ce:	edd8 6a00 	vldr	s13, [r8]
 800b8d2:	edd6 5a00 	vldr	s11, [r6]
 800b8d6:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	@ 0x950
 800b8da:	f604 1934 	addw	r9, r4, #2356	@ 0x934
 800b8de:	ed99 6a00 	vldr	s12, [r9]
 800b8e2:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	eee6 7a06 	vfma.f32	s15, s12, s12
 800b8ec:	f604 173c 	addw	r7, r4, #2364	@ 0x93c
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	ed97 7a00 	vldr	s14, [r7]
 800b8f6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800b8fa:	aa13      	add	r2, sp, #76	@ 0x4c
 800b8fc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 800b900:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b904:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800b908:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800b90c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b910:	ee27 6a86 	vmul.f32	s12, s15, s12
 800b914:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b91c:	edc6 5a00 	vstr	s11, [r6]
 800b920:	ed89 6a00 	vstr	s12, [r9]
 800b924:	edc8 6a00 	vstr	s13, [r8]
 800b928:	ed87 7a00 	vstr	s14, [r7]
 800b92c:	f8a4 3950 	strh.w	r3, [r4, #2384]	@ 0x950
 800b930:	f7f9 fbca 	bl	80050c8 <rotVect>
 800b934:	6833      	ldr	r3, [r6, #0]
 800b936:	60eb      	str	r3, [r5, #12]
 800b938:	f8d9 3000 	ldr.w	r3, [r9]
 800b93c:	f8d8 2000 	ldr.w	r2, [r8]
 800b940:	612b      	str	r3, [r5, #16]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	61ab      	str	r3, [r5, #24]
 800b946:	616a      	str	r2, [r5, #20]
 800b948:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800b94c:	f105 0328 	add.w	r3, r5, #40	@ 0x28
 800b950:	e9cd 3200 	strd	r3, r2, [sp]
 800b954:	4601      	mov	r1, r0
 800b956:	f105 031c 	add.w	r3, r5, #28
 800b95a:	462a      	mov	r2, r5
 800b95c:	f105 000c 	add.w	r0, r5, #12
 800b960:	f7fa fec0 	bl	80066e4 <output_update>
 800b964:	b021      	add	sp, #132	@ 0x84
 800b966:	ecbd 8b06 	vpop	{d8-d10}
 800b96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b96e:	2301      	movs	r3, #1
 800b970:	7123      	strb	r3, [r4, #4]
 800b972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b976:	e734      	b.n	800b7e2 <MotionFX_propagate+0xde>
 800b978:	ee68 8a80 	vmul.f32	s17, s17, s0
 800b97c:	ee29 9a00 	vmul.f32	s18, s18, s0
 800b980:	ee28 8a00 	vmul.f32	s16, s16, s0
 800b984:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800b988:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 800b98c:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 800b990:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 800b994:	930c      	str	r3, [sp, #48]	@ 0x30
 800b996:	e793      	b.n	800b8c0 <MotionFX_propagate+0x1bc>
 800b998:	20000204 	.word	0x20000204
 800b99c:	3c8efa35 	.word	0x3c8efa35
 800b9a0:	38d1b718 	.word	0x38d1b718

0800b9a4 <__cvt>:
 800b9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a8:	ec57 6b10 	vmov	r6, r7, d0
 800b9ac:	2f00      	cmp	r7, #0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	463b      	mov	r3, r7
 800b9b4:	bfbb      	ittet	lt
 800b9b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b9ba:	461f      	movlt	r7, r3
 800b9bc:	2300      	movge	r3, #0
 800b9be:	232d      	movlt	r3, #45	@ 0x2d
 800b9c0:	700b      	strb	r3, [r1, #0]
 800b9c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b9c8:	4691      	mov	r9, r2
 800b9ca:	f023 0820 	bic.w	r8, r3, #32
 800b9ce:	bfbc      	itt	lt
 800b9d0:	4632      	movlt	r2, r6
 800b9d2:	4616      	movlt	r6, r2
 800b9d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9d8:	d005      	beq.n	800b9e6 <__cvt+0x42>
 800b9da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b9de:	d100      	bne.n	800b9e2 <__cvt+0x3e>
 800b9e0:	3401      	adds	r4, #1
 800b9e2:	2102      	movs	r1, #2
 800b9e4:	e000      	b.n	800b9e8 <__cvt+0x44>
 800b9e6:	2103      	movs	r1, #3
 800b9e8:	ab03      	add	r3, sp, #12
 800b9ea:	9301      	str	r3, [sp, #4]
 800b9ec:	ab02      	add	r3, sp, #8
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	ec47 6b10 	vmov	d0, r6, r7
 800b9f4:	4653      	mov	r3, sl
 800b9f6:	4622      	mov	r2, r4
 800b9f8:	f001 f986 	bl	800cd08 <_dtoa_r>
 800b9fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ba00:	4605      	mov	r5, r0
 800ba02:	d119      	bne.n	800ba38 <__cvt+0x94>
 800ba04:	f019 0f01 	tst.w	r9, #1
 800ba08:	d00e      	beq.n	800ba28 <__cvt+0x84>
 800ba0a:	eb00 0904 	add.w	r9, r0, r4
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2300      	movs	r3, #0
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f5 f857 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba1a:	b108      	cbz	r0, 800ba20 <__cvt+0x7c>
 800ba1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba20:	2230      	movs	r2, #48	@ 0x30
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	454b      	cmp	r3, r9
 800ba26:	d31e      	bcc.n	800ba66 <__cvt+0xc2>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba2c:	1b5b      	subs	r3, r3, r5
 800ba2e:	4628      	mov	r0, r5
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	b004      	add	sp, #16
 800ba34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba3c:	eb00 0904 	add.w	r9, r0, r4
 800ba40:	d1e5      	bne.n	800ba0e <__cvt+0x6a>
 800ba42:	7803      	ldrb	r3, [r0, #0]
 800ba44:	2b30      	cmp	r3, #48	@ 0x30
 800ba46:	d10a      	bne.n	800ba5e <__cvt+0xba>
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4639      	mov	r1, r7
 800ba50:	f7f5 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba54:	b918      	cbnz	r0, 800ba5e <__cvt+0xba>
 800ba56:	f1c4 0401 	rsb	r4, r4, #1
 800ba5a:	f8ca 4000 	str.w	r4, [sl]
 800ba5e:	f8da 3000 	ldr.w	r3, [sl]
 800ba62:	4499      	add	r9, r3
 800ba64:	e7d3      	b.n	800ba0e <__cvt+0x6a>
 800ba66:	1c59      	adds	r1, r3, #1
 800ba68:	9103      	str	r1, [sp, #12]
 800ba6a:	701a      	strb	r2, [r3, #0]
 800ba6c:	e7d9      	b.n	800ba22 <__cvt+0x7e>

0800ba6e <__exponent>:
 800ba6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba70:	2900      	cmp	r1, #0
 800ba72:	bfba      	itte	lt
 800ba74:	4249      	neglt	r1, r1
 800ba76:	232d      	movlt	r3, #45	@ 0x2d
 800ba78:	232b      	movge	r3, #43	@ 0x2b
 800ba7a:	2909      	cmp	r1, #9
 800ba7c:	7002      	strb	r2, [r0, #0]
 800ba7e:	7043      	strb	r3, [r0, #1]
 800ba80:	dd29      	ble.n	800bad6 <__exponent+0x68>
 800ba82:	f10d 0307 	add.w	r3, sp, #7
 800ba86:	461d      	mov	r5, r3
 800ba88:	270a      	movs	r7, #10
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba90:	fb07 1416 	mls	r4, r7, r6, r1
 800ba94:	3430      	adds	r4, #48	@ 0x30
 800ba96:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	2c63      	cmp	r4, #99	@ 0x63
 800ba9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800baa2:	4631      	mov	r1, r6
 800baa4:	dcf1      	bgt.n	800ba8a <__exponent+0x1c>
 800baa6:	3130      	adds	r1, #48	@ 0x30
 800baa8:	1e94      	subs	r4, r2, #2
 800baaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800baae:	1c41      	adds	r1, r0, #1
 800bab0:	4623      	mov	r3, r4
 800bab2:	42ab      	cmp	r3, r5
 800bab4:	d30a      	bcc.n	800bacc <__exponent+0x5e>
 800bab6:	f10d 0309 	add.w	r3, sp, #9
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	42ac      	cmp	r4, r5
 800babe:	bf88      	it	hi
 800bac0:	2300      	movhi	r3, #0
 800bac2:	3302      	adds	r3, #2
 800bac4:	4403      	add	r3, r0
 800bac6:	1a18      	subs	r0, r3, r0
 800bac8:	b003      	add	sp, #12
 800baca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bacc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bad0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bad4:	e7ed      	b.n	800bab2 <__exponent+0x44>
 800bad6:	2330      	movs	r3, #48	@ 0x30
 800bad8:	3130      	adds	r1, #48	@ 0x30
 800bada:	7083      	strb	r3, [r0, #2]
 800badc:	70c1      	strb	r1, [r0, #3]
 800bade:	1d03      	adds	r3, r0, #4
 800bae0:	e7f1      	b.n	800bac6 <__exponent+0x58>
	...

0800bae4 <_printf_float>:
 800bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	b08d      	sub	sp, #52	@ 0x34
 800baea:	460c      	mov	r4, r1
 800baec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800baf0:	4616      	mov	r6, r2
 800baf2:	461f      	mov	r7, r3
 800baf4:	4605      	mov	r5, r0
 800baf6:	f000 fff3 	bl	800cae0 <_localeconv_r>
 800bafa:	6803      	ldr	r3, [r0, #0]
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7f4 fbb6 	bl	8000270 <strlen>
 800bb04:	2300      	movs	r3, #0
 800bb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb08:	f8d8 3000 	ldr.w	r3, [r8]
 800bb0c:	9005      	str	r0, [sp, #20]
 800bb0e:	3307      	adds	r3, #7
 800bb10:	f023 0307 	bic.w	r3, r3, #7
 800bb14:	f103 0208 	add.w	r2, r3, #8
 800bb18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb1c:	f8d4 b000 	ldr.w	fp, [r4]
 800bb20:	f8c8 2000 	str.w	r2, [r8]
 800bb24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb2c:	9307      	str	r3, [sp, #28]
 800bb2e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb3a:	4b9c      	ldr	r3, [pc, #624]	@ (800bdac <_printf_float+0x2c8>)
 800bb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb40:	f7f4 fff4 	bl	8000b2c <__aeabi_dcmpun>
 800bb44:	bb70      	cbnz	r0, 800bba4 <_printf_float+0xc0>
 800bb46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb4a:	4b98      	ldr	r3, [pc, #608]	@ (800bdac <_printf_float+0x2c8>)
 800bb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb50:	f7f4 ffce 	bl	8000af0 <__aeabi_dcmple>
 800bb54:	bb30      	cbnz	r0, 800bba4 <_printf_float+0xc0>
 800bb56:	2200      	movs	r2, #0
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	f7f4 ffbd 	bl	8000adc <__aeabi_dcmplt>
 800bb62:	b110      	cbz	r0, 800bb6a <_printf_float+0x86>
 800bb64:	232d      	movs	r3, #45	@ 0x2d
 800bb66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb6a:	4a91      	ldr	r2, [pc, #580]	@ (800bdb0 <_printf_float+0x2cc>)
 800bb6c:	4b91      	ldr	r3, [pc, #580]	@ (800bdb4 <_printf_float+0x2d0>)
 800bb6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb72:	bf94      	ite	ls
 800bb74:	4690      	movls	r8, r2
 800bb76:	4698      	movhi	r8, r3
 800bb78:	2303      	movs	r3, #3
 800bb7a:	6123      	str	r3, [r4, #16]
 800bb7c:	f02b 0304 	bic.w	r3, fp, #4
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	f04f 0900 	mov.w	r9, #0
 800bb86:	9700      	str	r7, [sp, #0]
 800bb88:	4633      	mov	r3, r6
 800bb8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f000 f9d2 	bl	800bf38 <_printf_common>
 800bb94:	3001      	adds	r0, #1
 800bb96:	f040 808d 	bne.w	800bcb4 <_printf_float+0x1d0>
 800bb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9e:	b00d      	add	sp, #52	@ 0x34
 800bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba4:	4642      	mov	r2, r8
 800bba6:	464b      	mov	r3, r9
 800bba8:	4640      	mov	r0, r8
 800bbaa:	4649      	mov	r1, r9
 800bbac:	f7f4 ffbe 	bl	8000b2c <__aeabi_dcmpun>
 800bbb0:	b140      	cbz	r0, 800bbc4 <_printf_float+0xe0>
 800bbb2:	464b      	mov	r3, r9
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	bfbc      	itt	lt
 800bbb8:	232d      	movlt	r3, #45	@ 0x2d
 800bbba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bbbe:	4a7e      	ldr	r2, [pc, #504]	@ (800bdb8 <_printf_float+0x2d4>)
 800bbc0:	4b7e      	ldr	r3, [pc, #504]	@ (800bdbc <_printf_float+0x2d8>)
 800bbc2:	e7d4      	b.n	800bb6e <_printf_float+0x8a>
 800bbc4:	6863      	ldr	r3, [r4, #4]
 800bbc6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bbca:	9206      	str	r2, [sp, #24]
 800bbcc:	1c5a      	adds	r2, r3, #1
 800bbce:	d13b      	bne.n	800bc48 <_printf_float+0x164>
 800bbd0:	2306      	movs	r3, #6
 800bbd2:	6063      	str	r3, [r4, #4]
 800bbd4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bbd8:	2300      	movs	r3, #0
 800bbda:	6022      	str	r2, [r4, #0]
 800bbdc:	9303      	str	r3, [sp, #12]
 800bbde:	ab0a      	add	r3, sp, #40	@ 0x28
 800bbe0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bbe4:	ab09      	add	r3, sp, #36	@ 0x24
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	6861      	ldr	r1, [r4, #4]
 800bbea:	ec49 8b10 	vmov	d0, r8, r9
 800bbee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f7ff fed6 	bl	800b9a4 <__cvt>
 800bbf8:	9b06      	ldr	r3, [sp, #24]
 800bbfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbfc:	2b47      	cmp	r3, #71	@ 0x47
 800bbfe:	4680      	mov	r8, r0
 800bc00:	d129      	bne.n	800bc56 <_printf_float+0x172>
 800bc02:	1cc8      	adds	r0, r1, #3
 800bc04:	db02      	blt.n	800bc0c <_printf_float+0x128>
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	4299      	cmp	r1, r3
 800bc0a:	dd41      	ble.n	800bc90 <_printf_float+0x1ac>
 800bc0c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bc10:	fa5f fa8a 	uxtb.w	sl, sl
 800bc14:	3901      	subs	r1, #1
 800bc16:	4652      	mov	r2, sl
 800bc18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc1e:	f7ff ff26 	bl	800ba6e <__exponent>
 800bc22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc24:	1813      	adds	r3, r2, r0
 800bc26:	2a01      	cmp	r2, #1
 800bc28:	4681      	mov	r9, r0
 800bc2a:	6123      	str	r3, [r4, #16]
 800bc2c:	dc02      	bgt.n	800bc34 <_printf_float+0x150>
 800bc2e:	6822      	ldr	r2, [r4, #0]
 800bc30:	07d2      	lsls	r2, r2, #31
 800bc32:	d501      	bpl.n	800bc38 <_printf_float+0x154>
 800bc34:	3301      	adds	r3, #1
 800bc36:	6123      	str	r3, [r4, #16]
 800bc38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0a2      	beq.n	800bb86 <_printf_float+0xa2>
 800bc40:	232d      	movs	r3, #45	@ 0x2d
 800bc42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc46:	e79e      	b.n	800bb86 <_printf_float+0xa2>
 800bc48:	9a06      	ldr	r2, [sp, #24]
 800bc4a:	2a47      	cmp	r2, #71	@ 0x47
 800bc4c:	d1c2      	bne.n	800bbd4 <_printf_float+0xf0>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1c0      	bne.n	800bbd4 <_printf_float+0xf0>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e7bd      	b.n	800bbd2 <_printf_float+0xee>
 800bc56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc5a:	d9db      	bls.n	800bc14 <_printf_float+0x130>
 800bc5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc60:	d118      	bne.n	800bc94 <_printf_float+0x1b0>
 800bc62:	2900      	cmp	r1, #0
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	dd0b      	ble.n	800bc80 <_printf_float+0x19c>
 800bc68:	6121      	str	r1, [r4, #16]
 800bc6a:	b913      	cbnz	r3, 800bc72 <_printf_float+0x18e>
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	07d0      	lsls	r0, r2, #31
 800bc70:	d502      	bpl.n	800bc78 <_printf_float+0x194>
 800bc72:	3301      	adds	r3, #1
 800bc74:	440b      	add	r3, r1
 800bc76:	6123      	str	r3, [r4, #16]
 800bc78:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc7a:	f04f 0900 	mov.w	r9, #0
 800bc7e:	e7db      	b.n	800bc38 <_printf_float+0x154>
 800bc80:	b913      	cbnz	r3, 800bc88 <_printf_float+0x1a4>
 800bc82:	6822      	ldr	r2, [r4, #0]
 800bc84:	07d2      	lsls	r2, r2, #31
 800bc86:	d501      	bpl.n	800bc8c <_printf_float+0x1a8>
 800bc88:	3302      	adds	r3, #2
 800bc8a:	e7f4      	b.n	800bc76 <_printf_float+0x192>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e7f2      	b.n	800bc76 <_printf_float+0x192>
 800bc90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc96:	4299      	cmp	r1, r3
 800bc98:	db05      	blt.n	800bca6 <_printf_float+0x1c2>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	6121      	str	r1, [r4, #16]
 800bc9e:	07d8      	lsls	r0, r3, #31
 800bca0:	d5ea      	bpl.n	800bc78 <_printf_float+0x194>
 800bca2:	1c4b      	adds	r3, r1, #1
 800bca4:	e7e7      	b.n	800bc76 <_printf_float+0x192>
 800bca6:	2900      	cmp	r1, #0
 800bca8:	bfd4      	ite	le
 800bcaa:	f1c1 0202 	rsble	r2, r1, #2
 800bcae:	2201      	movgt	r2, #1
 800bcb0:	4413      	add	r3, r2
 800bcb2:	e7e0      	b.n	800bc76 <_printf_float+0x192>
 800bcb4:	6823      	ldr	r3, [r4, #0]
 800bcb6:	055a      	lsls	r2, r3, #21
 800bcb8:	d407      	bmi.n	800bcca <_printf_float+0x1e6>
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	4642      	mov	r2, r8
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b8      	blx	r7
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d12b      	bne.n	800bd20 <_printf_float+0x23c>
 800bcc8:	e767      	b.n	800bb9a <_printf_float+0xb6>
 800bcca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcce:	f240 80dd 	bls.w	800be8c <_printf_float+0x3a8>
 800bcd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f7f4 fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d033      	beq.n	800bd4a <_printf_float+0x266>
 800bce2:	4a37      	ldr	r2, [pc, #220]	@ (800bdc0 <_printf_float+0x2dc>)
 800bce4:	2301      	movs	r3, #1
 800bce6:	4631      	mov	r1, r6
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b8      	blx	r7
 800bcec:	3001      	adds	r0, #1
 800bcee:	f43f af54 	beq.w	800bb9a <_printf_float+0xb6>
 800bcf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bcf6:	4543      	cmp	r3, r8
 800bcf8:	db02      	blt.n	800bd00 <_printf_float+0x21c>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	07d8      	lsls	r0, r3, #31
 800bcfe:	d50f      	bpl.n	800bd20 <_printf_float+0x23c>
 800bd00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd04:	4631      	mov	r1, r6
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b8      	blx	r7
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	f43f af45 	beq.w	800bb9a <_printf_float+0xb6>
 800bd10:	f04f 0900 	mov.w	r9, #0
 800bd14:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd18:	f104 0a1a 	add.w	sl, r4, #26
 800bd1c:	45c8      	cmp	r8, r9
 800bd1e:	dc09      	bgt.n	800bd34 <_printf_float+0x250>
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	079b      	lsls	r3, r3, #30
 800bd24:	f100 8103 	bmi.w	800bf2e <_printf_float+0x44a>
 800bd28:	68e0      	ldr	r0, [r4, #12]
 800bd2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd2c:	4298      	cmp	r0, r3
 800bd2e:	bfb8      	it	lt
 800bd30:	4618      	movlt	r0, r3
 800bd32:	e734      	b.n	800bb9e <_printf_float+0xba>
 800bd34:	2301      	movs	r3, #1
 800bd36:	4652      	mov	r2, sl
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f43f af2b 	beq.w	800bb9a <_printf_float+0xb6>
 800bd44:	f109 0901 	add.w	r9, r9, #1
 800bd48:	e7e8      	b.n	800bd1c <_printf_float+0x238>
 800bd4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	dc39      	bgt.n	800bdc4 <_printf_float+0x2e0>
 800bd50:	4a1b      	ldr	r2, [pc, #108]	@ (800bdc0 <_printf_float+0x2dc>)
 800bd52:	2301      	movs	r3, #1
 800bd54:	4631      	mov	r1, r6
 800bd56:	4628      	mov	r0, r5
 800bd58:	47b8      	blx	r7
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	f43f af1d 	beq.w	800bb9a <_printf_float+0xb6>
 800bd60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd64:	ea59 0303 	orrs.w	r3, r9, r3
 800bd68:	d102      	bne.n	800bd70 <_printf_float+0x28c>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	07d9      	lsls	r1, r3, #31
 800bd6e:	d5d7      	bpl.n	800bd20 <_printf_float+0x23c>
 800bd70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd74:	4631      	mov	r1, r6
 800bd76:	4628      	mov	r0, r5
 800bd78:	47b8      	blx	r7
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	f43f af0d 	beq.w	800bb9a <_printf_float+0xb6>
 800bd80:	f04f 0a00 	mov.w	sl, #0
 800bd84:	f104 0b1a 	add.w	fp, r4, #26
 800bd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd8a:	425b      	negs	r3, r3
 800bd8c:	4553      	cmp	r3, sl
 800bd8e:	dc01      	bgt.n	800bd94 <_printf_float+0x2b0>
 800bd90:	464b      	mov	r3, r9
 800bd92:	e793      	b.n	800bcbc <_printf_float+0x1d8>
 800bd94:	2301      	movs	r3, #1
 800bd96:	465a      	mov	r2, fp
 800bd98:	4631      	mov	r1, r6
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	47b8      	blx	r7
 800bd9e:	3001      	adds	r0, #1
 800bda0:	f43f aefb 	beq.w	800bb9a <_printf_float+0xb6>
 800bda4:	f10a 0a01 	add.w	sl, sl, #1
 800bda8:	e7ee      	b.n	800bd88 <_printf_float+0x2a4>
 800bdaa:	bf00      	nop
 800bdac:	7fefffff 	.word	0x7fefffff
 800bdb0:	08011dfc 	.word	0x08011dfc
 800bdb4:	08011e00 	.word	0x08011e00
 800bdb8:	08011e04 	.word	0x08011e04
 800bdbc:	08011e08 	.word	0x08011e08
 800bdc0:	08011e0c 	.word	0x08011e0c
 800bdc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bdca:	4553      	cmp	r3, sl
 800bdcc:	bfa8      	it	ge
 800bdce:	4653      	movge	r3, sl
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	4699      	mov	r9, r3
 800bdd4:	dc36      	bgt.n	800be44 <_printf_float+0x360>
 800bdd6:	f04f 0b00 	mov.w	fp, #0
 800bdda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdde:	f104 021a 	add.w	r2, r4, #26
 800bde2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bde4:	9306      	str	r3, [sp, #24]
 800bde6:	eba3 0309 	sub.w	r3, r3, r9
 800bdea:	455b      	cmp	r3, fp
 800bdec:	dc31      	bgt.n	800be52 <_printf_float+0x36e>
 800bdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf0:	459a      	cmp	sl, r3
 800bdf2:	dc3a      	bgt.n	800be6a <_printf_float+0x386>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	07da      	lsls	r2, r3, #31
 800bdf8:	d437      	bmi.n	800be6a <_printf_float+0x386>
 800bdfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdfc:	ebaa 0903 	sub.w	r9, sl, r3
 800be00:	9b06      	ldr	r3, [sp, #24]
 800be02:	ebaa 0303 	sub.w	r3, sl, r3
 800be06:	4599      	cmp	r9, r3
 800be08:	bfa8      	it	ge
 800be0a:	4699      	movge	r9, r3
 800be0c:	f1b9 0f00 	cmp.w	r9, #0
 800be10:	dc33      	bgt.n	800be7a <_printf_float+0x396>
 800be12:	f04f 0800 	mov.w	r8, #0
 800be16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be1a:	f104 0b1a 	add.w	fp, r4, #26
 800be1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be20:	ebaa 0303 	sub.w	r3, sl, r3
 800be24:	eba3 0309 	sub.w	r3, r3, r9
 800be28:	4543      	cmp	r3, r8
 800be2a:	f77f af79 	ble.w	800bd20 <_printf_float+0x23c>
 800be2e:	2301      	movs	r3, #1
 800be30:	465a      	mov	r2, fp
 800be32:	4631      	mov	r1, r6
 800be34:	4628      	mov	r0, r5
 800be36:	47b8      	blx	r7
 800be38:	3001      	adds	r0, #1
 800be3a:	f43f aeae 	beq.w	800bb9a <_printf_float+0xb6>
 800be3e:	f108 0801 	add.w	r8, r8, #1
 800be42:	e7ec      	b.n	800be1e <_printf_float+0x33a>
 800be44:	4642      	mov	r2, r8
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	d1c2      	bne.n	800bdd6 <_printf_float+0x2f2>
 800be50:	e6a3      	b.n	800bb9a <_printf_float+0xb6>
 800be52:	2301      	movs	r3, #1
 800be54:	4631      	mov	r1, r6
 800be56:	4628      	mov	r0, r5
 800be58:	9206      	str	r2, [sp, #24]
 800be5a:	47b8      	blx	r7
 800be5c:	3001      	adds	r0, #1
 800be5e:	f43f ae9c 	beq.w	800bb9a <_printf_float+0xb6>
 800be62:	9a06      	ldr	r2, [sp, #24]
 800be64:	f10b 0b01 	add.w	fp, fp, #1
 800be68:	e7bb      	b.n	800bde2 <_printf_float+0x2fe>
 800be6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	d1c0      	bne.n	800bdfa <_printf_float+0x316>
 800be78:	e68f      	b.n	800bb9a <_printf_float+0xb6>
 800be7a:	9a06      	ldr	r2, [sp, #24]
 800be7c:	464b      	mov	r3, r9
 800be7e:	4442      	add	r2, r8
 800be80:	4631      	mov	r1, r6
 800be82:	4628      	mov	r0, r5
 800be84:	47b8      	blx	r7
 800be86:	3001      	adds	r0, #1
 800be88:	d1c3      	bne.n	800be12 <_printf_float+0x32e>
 800be8a:	e686      	b.n	800bb9a <_printf_float+0xb6>
 800be8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be90:	f1ba 0f01 	cmp.w	sl, #1
 800be94:	dc01      	bgt.n	800be9a <_printf_float+0x3b6>
 800be96:	07db      	lsls	r3, r3, #31
 800be98:	d536      	bpl.n	800bf08 <_printf_float+0x424>
 800be9a:	2301      	movs	r3, #1
 800be9c:	4642      	mov	r2, r8
 800be9e:	4631      	mov	r1, r6
 800bea0:	4628      	mov	r0, r5
 800bea2:	47b8      	blx	r7
 800bea4:	3001      	adds	r0, #1
 800bea6:	f43f ae78 	beq.w	800bb9a <_printf_float+0xb6>
 800beaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beae:	4631      	mov	r1, r6
 800beb0:	4628      	mov	r0, r5
 800beb2:	47b8      	blx	r7
 800beb4:	3001      	adds	r0, #1
 800beb6:	f43f ae70 	beq.w	800bb9a <_printf_float+0xb6>
 800beba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bebe:	2200      	movs	r2, #0
 800bec0:	2300      	movs	r3, #0
 800bec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bec6:	f7f4 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 800beca:	b9c0      	cbnz	r0, 800befe <_printf_float+0x41a>
 800becc:	4653      	mov	r3, sl
 800bece:	f108 0201 	add.w	r2, r8, #1
 800bed2:	4631      	mov	r1, r6
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b8      	blx	r7
 800bed8:	3001      	adds	r0, #1
 800beda:	d10c      	bne.n	800bef6 <_printf_float+0x412>
 800bedc:	e65d      	b.n	800bb9a <_printf_float+0xb6>
 800bede:	2301      	movs	r3, #1
 800bee0:	465a      	mov	r2, fp
 800bee2:	4631      	mov	r1, r6
 800bee4:	4628      	mov	r0, r5
 800bee6:	47b8      	blx	r7
 800bee8:	3001      	adds	r0, #1
 800beea:	f43f ae56 	beq.w	800bb9a <_printf_float+0xb6>
 800beee:	f108 0801 	add.w	r8, r8, #1
 800bef2:	45d0      	cmp	r8, sl
 800bef4:	dbf3      	blt.n	800bede <_printf_float+0x3fa>
 800bef6:	464b      	mov	r3, r9
 800bef8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800befc:	e6df      	b.n	800bcbe <_printf_float+0x1da>
 800befe:	f04f 0800 	mov.w	r8, #0
 800bf02:	f104 0b1a 	add.w	fp, r4, #26
 800bf06:	e7f4      	b.n	800bef2 <_printf_float+0x40e>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	4642      	mov	r2, r8
 800bf0c:	e7e1      	b.n	800bed2 <_printf_float+0x3ee>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	464a      	mov	r2, r9
 800bf12:	4631      	mov	r1, r6
 800bf14:	4628      	mov	r0, r5
 800bf16:	47b8      	blx	r7
 800bf18:	3001      	adds	r0, #1
 800bf1a:	f43f ae3e 	beq.w	800bb9a <_printf_float+0xb6>
 800bf1e:	f108 0801 	add.w	r8, r8, #1
 800bf22:	68e3      	ldr	r3, [r4, #12]
 800bf24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf26:	1a5b      	subs	r3, r3, r1
 800bf28:	4543      	cmp	r3, r8
 800bf2a:	dcf0      	bgt.n	800bf0e <_printf_float+0x42a>
 800bf2c:	e6fc      	b.n	800bd28 <_printf_float+0x244>
 800bf2e:	f04f 0800 	mov.w	r8, #0
 800bf32:	f104 0919 	add.w	r9, r4, #25
 800bf36:	e7f4      	b.n	800bf22 <_printf_float+0x43e>

0800bf38 <_printf_common>:
 800bf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	4616      	mov	r6, r2
 800bf3e:	4698      	mov	r8, r3
 800bf40:	688a      	ldr	r2, [r1, #8]
 800bf42:	690b      	ldr	r3, [r1, #16]
 800bf44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	bfb8      	it	lt
 800bf4c:	4613      	movlt	r3, r2
 800bf4e:	6033      	str	r3, [r6, #0]
 800bf50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf54:	4607      	mov	r7, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	b10a      	cbz	r2, 800bf5e <_printf_common+0x26>
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	6033      	str	r3, [r6, #0]
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	0699      	lsls	r1, r3, #26
 800bf62:	bf42      	ittt	mi
 800bf64:	6833      	ldrmi	r3, [r6, #0]
 800bf66:	3302      	addmi	r3, #2
 800bf68:	6033      	strmi	r3, [r6, #0]
 800bf6a:	6825      	ldr	r5, [r4, #0]
 800bf6c:	f015 0506 	ands.w	r5, r5, #6
 800bf70:	d106      	bne.n	800bf80 <_printf_common+0x48>
 800bf72:	f104 0a19 	add.w	sl, r4, #25
 800bf76:	68e3      	ldr	r3, [r4, #12]
 800bf78:	6832      	ldr	r2, [r6, #0]
 800bf7a:	1a9b      	subs	r3, r3, r2
 800bf7c:	42ab      	cmp	r3, r5
 800bf7e:	dc26      	bgt.n	800bfce <_printf_common+0x96>
 800bf80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf84:	6822      	ldr	r2, [r4, #0]
 800bf86:	3b00      	subs	r3, #0
 800bf88:	bf18      	it	ne
 800bf8a:	2301      	movne	r3, #1
 800bf8c:	0692      	lsls	r2, r2, #26
 800bf8e:	d42b      	bmi.n	800bfe8 <_printf_common+0xb0>
 800bf90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf94:	4641      	mov	r1, r8
 800bf96:	4638      	mov	r0, r7
 800bf98:	47c8      	blx	r9
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d01e      	beq.n	800bfdc <_printf_common+0xa4>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	6922      	ldr	r2, [r4, #16]
 800bfa2:	f003 0306 	and.w	r3, r3, #6
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	bf02      	ittt	eq
 800bfaa:	68e5      	ldreq	r5, [r4, #12]
 800bfac:	6833      	ldreq	r3, [r6, #0]
 800bfae:	1aed      	subeq	r5, r5, r3
 800bfb0:	68a3      	ldr	r3, [r4, #8]
 800bfb2:	bf0c      	ite	eq
 800bfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfb8:	2500      	movne	r5, #0
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	bfc4      	itt	gt
 800bfbe:	1a9b      	subgt	r3, r3, r2
 800bfc0:	18ed      	addgt	r5, r5, r3
 800bfc2:	2600      	movs	r6, #0
 800bfc4:	341a      	adds	r4, #26
 800bfc6:	42b5      	cmp	r5, r6
 800bfc8:	d11a      	bne.n	800c000 <_printf_common+0xc8>
 800bfca:	2000      	movs	r0, #0
 800bfcc:	e008      	b.n	800bfe0 <_printf_common+0xa8>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4652      	mov	r2, sl
 800bfd2:	4641      	mov	r1, r8
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	47c8      	blx	r9
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d103      	bne.n	800bfe4 <_printf_common+0xac>
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe4:	3501      	adds	r5, #1
 800bfe6:	e7c6      	b.n	800bf76 <_printf_common+0x3e>
 800bfe8:	18e1      	adds	r1, r4, r3
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	2030      	movs	r0, #48	@ 0x30
 800bfee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bff2:	4422      	add	r2, r4
 800bff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bffc:	3302      	adds	r3, #2
 800bffe:	e7c7      	b.n	800bf90 <_printf_common+0x58>
 800c000:	2301      	movs	r3, #1
 800c002:	4622      	mov	r2, r4
 800c004:	4641      	mov	r1, r8
 800c006:	4638      	mov	r0, r7
 800c008:	47c8      	blx	r9
 800c00a:	3001      	adds	r0, #1
 800c00c:	d0e6      	beq.n	800bfdc <_printf_common+0xa4>
 800c00e:	3601      	adds	r6, #1
 800c010:	e7d9      	b.n	800bfc6 <_printf_common+0x8e>
	...

0800c014 <_printf_i>:
 800c014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	7e0f      	ldrb	r7, [r1, #24]
 800c01a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c01c:	2f78      	cmp	r7, #120	@ 0x78
 800c01e:	4691      	mov	r9, r2
 800c020:	4680      	mov	r8, r0
 800c022:	460c      	mov	r4, r1
 800c024:	469a      	mov	sl, r3
 800c026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c02a:	d807      	bhi.n	800c03c <_printf_i+0x28>
 800c02c:	2f62      	cmp	r7, #98	@ 0x62
 800c02e:	d80a      	bhi.n	800c046 <_printf_i+0x32>
 800c030:	2f00      	cmp	r7, #0
 800c032:	f000 80d2 	beq.w	800c1da <_printf_i+0x1c6>
 800c036:	2f58      	cmp	r7, #88	@ 0x58
 800c038:	f000 80b9 	beq.w	800c1ae <_printf_i+0x19a>
 800c03c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c044:	e03a      	b.n	800c0bc <_printf_i+0xa8>
 800c046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c04a:	2b15      	cmp	r3, #21
 800c04c:	d8f6      	bhi.n	800c03c <_printf_i+0x28>
 800c04e:	a101      	add	r1, pc, #4	@ (adr r1, 800c054 <_printf_i+0x40>)
 800c050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c054:	0800c0ad 	.word	0x0800c0ad
 800c058:	0800c0c1 	.word	0x0800c0c1
 800c05c:	0800c03d 	.word	0x0800c03d
 800c060:	0800c03d 	.word	0x0800c03d
 800c064:	0800c03d 	.word	0x0800c03d
 800c068:	0800c03d 	.word	0x0800c03d
 800c06c:	0800c0c1 	.word	0x0800c0c1
 800c070:	0800c03d 	.word	0x0800c03d
 800c074:	0800c03d 	.word	0x0800c03d
 800c078:	0800c03d 	.word	0x0800c03d
 800c07c:	0800c03d 	.word	0x0800c03d
 800c080:	0800c1c1 	.word	0x0800c1c1
 800c084:	0800c0eb 	.word	0x0800c0eb
 800c088:	0800c17b 	.word	0x0800c17b
 800c08c:	0800c03d 	.word	0x0800c03d
 800c090:	0800c03d 	.word	0x0800c03d
 800c094:	0800c1e3 	.word	0x0800c1e3
 800c098:	0800c03d 	.word	0x0800c03d
 800c09c:	0800c0eb 	.word	0x0800c0eb
 800c0a0:	0800c03d 	.word	0x0800c03d
 800c0a4:	0800c03d 	.word	0x0800c03d
 800c0a8:	0800c183 	.word	0x0800c183
 800c0ac:	6833      	ldr	r3, [r6, #0]
 800c0ae:	1d1a      	adds	r2, r3, #4
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6032      	str	r2, [r6, #0]
 800c0b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e09d      	b.n	800c1fc <_printf_i+0x1e8>
 800c0c0:	6833      	ldr	r3, [r6, #0]
 800c0c2:	6820      	ldr	r0, [r4, #0]
 800c0c4:	1d19      	adds	r1, r3, #4
 800c0c6:	6031      	str	r1, [r6, #0]
 800c0c8:	0606      	lsls	r6, r0, #24
 800c0ca:	d501      	bpl.n	800c0d0 <_printf_i+0xbc>
 800c0cc:	681d      	ldr	r5, [r3, #0]
 800c0ce:	e003      	b.n	800c0d8 <_printf_i+0xc4>
 800c0d0:	0645      	lsls	r5, r0, #25
 800c0d2:	d5fb      	bpl.n	800c0cc <_printf_i+0xb8>
 800c0d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0d8:	2d00      	cmp	r5, #0
 800c0da:	da03      	bge.n	800c0e4 <_printf_i+0xd0>
 800c0dc:	232d      	movs	r3, #45	@ 0x2d
 800c0de:	426d      	negs	r5, r5
 800c0e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0e4:	4859      	ldr	r0, [pc, #356]	@ (800c24c <_printf_i+0x238>)
 800c0e6:	230a      	movs	r3, #10
 800c0e8:	e011      	b.n	800c10e <_printf_i+0xfa>
 800c0ea:	6821      	ldr	r1, [r4, #0]
 800c0ec:	6833      	ldr	r3, [r6, #0]
 800c0ee:	0608      	lsls	r0, r1, #24
 800c0f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0f4:	d402      	bmi.n	800c0fc <_printf_i+0xe8>
 800c0f6:	0649      	lsls	r1, r1, #25
 800c0f8:	bf48      	it	mi
 800c0fa:	b2ad      	uxthmi	r5, r5
 800c0fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0fe:	4853      	ldr	r0, [pc, #332]	@ (800c24c <_printf_i+0x238>)
 800c100:	6033      	str	r3, [r6, #0]
 800c102:	bf14      	ite	ne
 800c104:	230a      	movne	r3, #10
 800c106:	2308      	moveq	r3, #8
 800c108:	2100      	movs	r1, #0
 800c10a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c10e:	6866      	ldr	r6, [r4, #4]
 800c110:	60a6      	str	r6, [r4, #8]
 800c112:	2e00      	cmp	r6, #0
 800c114:	bfa2      	ittt	ge
 800c116:	6821      	ldrge	r1, [r4, #0]
 800c118:	f021 0104 	bicge.w	r1, r1, #4
 800c11c:	6021      	strge	r1, [r4, #0]
 800c11e:	b90d      	cbnz	r5, 800c124 <_printf_i+0x110>
 800c120:	2e00      	cmp	r6, #0
 800c122:	d04b      	beq.n	800c1bc <_printf_i+0x1a8>
 800c124:	4616      	mov	r6, r2
 800c126:	fbb5 f1f3 	udiv	r1, r5, r3
 800c12a:	fb03 5711 	mls	r7, r3, r1, r5
 800c12e:	5dc7      	ldrb	r7, [r0, r7]
 800c130:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c134:	462f      	mov	r7, r5
 800c136:	42bb      	cmp	r3, r7
 800c138:	460d      	mov	r5, r1
 800c13a:	d9f4      	bls.n	800c126 <_printf_i+0x112>
 800c13c:	2b08      	cmp	r3, #8
 800c13e:	d10b      	bne.n	800c158 <_printf_i+0x144>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	07df      	lsls	r7, r3, #31
 800c144:	d508      	bpl.n	800c158 <_printf_i+0x144>
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	6861      	ldr	r1, [r4, #4]
 800c14a:	4299      	cmp	r1, r3
 800c14c:	bfde      	ittt	le
 800c14e:	2330      	movle	r3, #48	@ 0x30
 800c150:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c154:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c158:	1b92      	subs	r2, r2, r6
 800c15a:	6122      	str	r2, [r4, #16]
 800c15c:	f8cd a000 	str.w	sl, [sp]
 800c160:	464b      	mov	r3, r9
 800c162:	aa03      	add	r2, sp, #12
 800c164:	4621      	mov	r1, r4
 800c166:	4640      	mov	r0, r8
 800c168:	f7ff fee6 	bl	800bf38 <_printf_common>
 800c16c:	3001      	adds	r0, #1
 800c16e:	d14a      	bne.n	800c206 <_printf_i+0x1f2>
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	b004      	add	sp, #16
 800c176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17a:	6823      	ldr	r3, [r4, #0]
 800c17c:	f043 0320 	orr.w	r3, r3, #32
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	4833      	ldr	r0, [pc, #204]	@ (800c250 <_printf_i+0x23c>)
 800c184:	2778      	movs	r7, #120	@ 0x78
 800c186:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	6831      	ldr	r1, [r6, #0]
 800c18e:	061f      	lsls	r7, r3, #24
 800c190:	f851 5b04 	ldr.w	r5, [r1], #4
 800c194:	d402      	bmi.n	800c19c <_printf_i+0x188>
 800c196:	065f      	lsls	r7, r3, #25
 800c198:	bf48      	it	mi
 800c19a:	b2ad      	uxthmi	r5, r5
 800c19c:	6031      	str	r1, [r6, #0]
 800c19e:	07d9      	lsls	r1, r3, #31
 800c1a0:	bf44      	itt	mi
 800c1a2:	f043 0320 	orrmi.w	r3, r3, #32
 800c1a6:	6023      	strmi	r3, [r4, #0]
 800c1a8:	b11d      	cbz	r5, 800c1b2 <_printf_i+0x19e>
 800c1aa:	2310      	movs	r3, #16
 800c1ac:	e7ac      	b.n	800c108 <_printf_i+0xf4>
 800c1ae:	4827      	ldr	r0, [pc, #156]	@ (800c24c <_printf_i+0x238>)
 800c1b0:	e7e9      	b.n	800c186 <_printf_i+0x172>
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	f023 0320 	bic.w	r3, r3, #32
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	e7f6      	b.n	800c1aa <_printf_i+0x196>
 800c1bc:	4616      	mov	r6, r2
 800c1be:	e7bd      	b.n	800c13c <_printf_i+0x128>
 800c1c0:	6833      	ldr	r3, [r6, #0]
 800c1c2:	6825      	ldr	r5, [r4, #0]
 800c1c4:	6961      	ldr	r1, [r4, #20]
 800c1c6:	1d18      	adds	r0, r3, #4
 800c1c8:	6030      	str	r0, [r6, #0]
 800c1ca:	062e      	lsls	r6, r5, #24
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	d501      	bpl.n	800c1d4 <_printf_i+0x1c0>
 800c1d0:	6019      	str	r1, [r3, #0]
 800c1d2:	e002      	b.n	800c1da <_printf_i+0x1c6>
 800c1d4:	0668      	lsls	r0, r5, #25
 800c1d6:	d5fb      	bpl.n	800c1d0 <_printf_i+0x1bc>
 800c1d8:	8019      	strh	r1, [r3, #0]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	6123      	str	r3, [r4, #16]
 800c1de:	4616      	mov	r6, r2
 800c1e0:	e7bc      	b.n	800c15c <_printf_i+0x148>
 800c1e2:	6833      	ldr	r3, [r6, #0]
 800c1e4:	1d1a      	adds	r2, r3, #4
 800c1e6:	6032      	str	r2, [r6, #0]
 800c1e8:	681e      	ldr	r6, [r3, #0]
 800c1ea:	6862      	ldr	r2, [r4, #4]
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f7f3 ffee 	bl	80001d0 <memchr>
 800c1f4:	b108      	cbz	r0, 800c1fa <_printf_i+0x1e6>
 800c1f6:	1b80      	subs	r0, r0, r6
 800c1f8:	6060      	str	r0, [r4, #4]
 800c1fa:	6863      	ldr	r3, [r4, #4]
 800c1fc:	6123      	str	r3, [r4, #16]
 800c1fe:	2300      	movs	r3, #0
 800c200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c204:	e7aa      	b.n	800c15c <_printf_i+0x148>
 800c206:	6923      	ldr	r3, [r4, #16]
 800c208:	4632      	mov	r2, r6
 800c20a:	4649      	mov	r1, r9
 800c20c:	4640      	mov	r0, r8
 800c20e:	47d0      	blx	sl
 800c210:	3001      	adds	r0, #1
 800c212:	d0ad      	beq.n	800c170 <_printf_i+0x15c>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	079b      	lsls	r3, r3, #30
 800c218:	d413      	bmi.n	800c242 <_printf_i+0x22e>
 800c21a:	68e0      	ldr	r0, [r4, #12]
 800c21c:	9b03      	ldr	r3, [sp, #12]
 800c21e:	4298      	cmp	r0, r3
 800c220:	bfb8      	it	lt
 800c222:	4618      	movlt	r0, r3
 800c224:	e7a6      	b.n	800c174 <_printf_i+0x160>
 800c226:	2301      	movs	r3, #1
 800c228:	4632      	mov	r2, r6
 800c22a:	4649      	mov	r1, r9
 800c22c:	4640      	mov	r0, r8
 800c22e:	47d0      	blx	sl
 800c230:	3001      	adds	r0, #1
 800c232:	d09d      	beq.n	800c170 <_printf_i+0x15c>
 800c234:	3501      	adds	r5, #1
 800c236:	68e3      	ldr	r3, [r4, #12]
 800c238:	9903      	ldr	r1, [sp, #12]
 800c23a:	1a5b      	subs	r3, r3, r1
 800c23c:	42ab      	cmp	r3, r5
 800c23e:	dcf2      	bgt.n	800c226 <_printf_i+0x212>
 800c240:	e7eb      	b.n	800c21a <_printf_i+0x206>
 800c242:	2500      	movs	r5, #0
 800c244:	f104 0619 	add.w	r6, r4, #25
 800c248:	e7f5      	b.n	800c236 <_printf_i+0x222>
 800c24a:	bf00      	nop
 800c24c:	08011e0e 	.word	0x08011e0e
 800c250:	08011e1f 	.word	0x08011e1f

0800c254 <_scanf_float>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	b087      	sub	sp, #28
 800c25a:	4617      	mov	r7, r2
 800c25c:	9303      	str	r3, [sp, #12]
 800c25e:	688b      	ldr	r3, [r1, #8]
 800c260:	1e5a      	subs	r2, r3, #1
 800c262:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c266:	bf81      	itttt	hi
 800c268:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c26c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c270:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c274:	608b      	strhi	r3, [r1, #8]
 800c276:	680b      	ldr	r3, [r1, #0]
 800c278:	460a      	mov	r2, r1
 800c27a:	f04f 0500 	mov.w	r5, #0
 800c27e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c282:	f842 3b1c 	str.w	r3, [r2], #28
 800c286:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c28a:	4680      	mov	r8, r0
 800c28c:	460c      	mov	r4, r1
 800c28e:	bf98      	it	ls
 800c290:	f04f 0b00 	movls.w	fp, #0
 800c294:	9201      	str	r2, [sp, #4]
 800c296:	4616      	mov	r6, r2
 800c298:	46aa      	mov	sl, r5
 800c29a:	46a9      	mov	r9, r5
 800c29c:	9502      	str	r5, [sp, #8]
 800c29e:	68a2      	ldr	r2, [r4, #8]
 800c2a0:	b152      	cbz	r2, 800c2b8 <_scanf_float+0x64>
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	2b4e      	cmp	r3, #78	@ 0x4e
 800c2a8:	d864      	bhi.n	800c374 <_scanf_float+0x120>
 800c2aa:	2b40      	cmp	r3, #64	@ 0x40
 800c2ac:	d83c      	bhi.n	800c328 <_scanf_float+0xd4>
 800c2ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c2b2:	b2c8      	uxtb	r0, r1
 800c2b4:	280e      	cmp	r0, #14
 800c2b6:	d93a      	bls.n	800c32e <_scanf_float+0xda>
 800c2b8:	f1b9 0f00 	cmp.w	r9, #0
 800c2bc:	d003      	beq.n	800c2c6 <_scanf_float+0x72>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2ca:	f1ba 0f01 	cmp.w	sl, #1
 800c2ce:	f200 8117 	bhi.w	800c500 <_scanf_float+0x2ac>
 800c2d2:	9b01      	ldr	r3, [sp, #4]
 800c2d4:	429e      	cmp	r6, r3
 800c2d6:	f200 8108 	bhi.w	800c4ea <_scanf_float+0x296>
 800c2da:	2001      	movs	r0, #1
 800c2dc:	b007      	add	sp, #28
 800c2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c2e6:	2a0d      	cmp	r2, #13
 800c2e8:	d8e6      	bhi.n	800c2b8 <_scanf_float+0x64>
 800c2ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c2f0 <_scanf_float+0x9c>)
 800c2ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c2f0:	0800c437 	.word	0x0800c437
 800c2f4:	0800c2b9 	.word	0x0800c2b9
 800c2f8:	0800c2b9 	.word	0x0800c2b9
 800c2fc:	0800c2b9 	.word	0x0800c2b9
 800c300:	0800c497 	.word	0x0800c497
 800c304:	0800c46f 	.word	0x0800c46f
 800c308:	0800c2b9 	.word	0x0800c2b9
 800c30c:	0800c2b9 	.word	0x0800c2b9
 800c310:	0800c445 	.word	0x0800c445
 800c314:	0800c2b9 	.word	0x0800c2b9
 800c318:	0800c2b9 	.word	0x0800c2b9
 800c31c:	0800c2b9 	.word	0x0800c2b9
 800c320:	0800c2b9 	.word	0x0800c2b9
 800c324:	0800c3fd 	.word	0x0800c3fd
 800c328:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c32c:	e7db      	b.n	800c2e6 <_scanf_float+0x92>
 800c32e:	290e      	cmp	r1, #14
 800c330:	d8c2      	bhi.n	800c2b8 <_scanf_float+0x64>
 800c332:	a001      	add	r0, pc, #4	@ (adr r0, 800c338 <_scanf_float+0xe4>)
 800c334:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c338:	0800c3ed 	.word	0x0800c3ed
 800c33c:	0800c2b9 	.word	0x0800c2b9
 800c340:	0800c3ed 	.word	0x0800c3ed
 800c344:	0800c483 	.word	0x0800c483
 800c348:	0800c2b9 	.word	0x0800c2b9
 800c34c:	0800c395 	.word	0x0800c395
 800c350:	0800c3d3 	.word	0x0800c3d3
 800c354:	0800c3d3 	.word	0x0800c3d3
 800c358:	0800c3d3 	.word	0x0800c3d3
 800c35c:	0800c3d3 	.word	0x0800c3d3
 800c360:	0800c3d3 	.word	0x0800c3d3
 800c364:	0800c3d3 	.word	0x0800c3d3
 800c368:	0800c3d3 	.word	0x0800c3d3
 800c36c:	0800c3d3 	.word	0x0800c3d3
 800c370:	0800c3d3 	.word	0x0800c3d3
 800c374:	2b6e      	cmp	r3, #110	@ 0x6e
 800c376:	d809      	bhi.n	800c38c <_scanf_float+0x138>
 800c378:	2b60      	cmp	r3, #96	@ 0x60
 800c37a:	d8b2      	bhi.n	800c2e2 <_scanf_float+0x8e>
 800c37c:	2b54      	cmp	r3, #84	@ 0x54
 800c37e:	d07b      	beq.n	800c478 <_scanf_float+0x224>
 800c380:	2b59      	cmp	r3, #89	@ 0x59
 800c382:	d199      	bne.n	800c2b8 <_scanf_float+0x64>
 800c384:	2d07      	cmp	r5, #7
 800c386:	d197      	bne.n	800c2b8 <_scanf_float+0x64>
 800c388:	2508      	movs	r5, #8
 800c38a:	e02c      	b.n	800c3e6 <_scanf_float+0x192>
 800c38c:	2b74      	cmp	r3, #116	@ 0x74
 800c38e:	d073      	beq.n	800c478 <_scanf_float+0x224>
 800c390:	2b79      	cmp	r3, #121	@ 0x79
 800c392:	e7f6      	b.n	800c382 <_scanf_float+0x12e>
 800c394:	6821      	ldr	r1, [r4, #0]
 800c396:	05c8      	lsls	r0, r1, #23
 800c398:	d51b      	bpl.n	800c3d2 <_scanf_float+0x17e>
 800c39a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c39e:	6021      	str	r1, [r4, #0]
 800c3a0:	f109 0901 	add.w	r9, r9, #1
 800c3a4:	f1bb 0f00 	cmp.w	fp, #0
 800c3a8:	d003      	beq.n	800c3b2 <_scanf_float+0x15e>
 800c3aa:	3201      	adds	r2, #1
 800c3ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3b0:	60a2      	str	r2, [r4, #8]
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	60a3      	str	r3, [r4, #8]
 800c3b8:	6923      	ldr	r3, [r4, #16]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	607b      	str	r3, [r7, #4]
 800c3c6:	f340 8087 	ble.w	800c4d8 <_scanf_float+0x284>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	603b      	str	r3, [r7, #0]
 800c3d0:	e765      	b.n	800c29e <_scanf_float+0x4a>
 800c3d2:	eb1a 0105 	adds.w	r1, sl, r5
 800c3d6:	f47f af6f 	bne.w	800c2b8 <_scanf_float+0x64>
 800c3da:	6822      	ldr	r2, [r4, #0]
 800c3dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c3e0:	6022      	str	r2, [r4, #0]
 800c3e2:	460d      	mov	r5, r1
 800c3e4:	468a      	mov	sl, r1
 800c3e6:	f806 3b01 	strb.w	r3, [r6], #1
 800c3ea:	e7e2      	b.n	800c3b2 <_scanf_float+0x15e>
 800c3ec:	6822      	ldr	r2, [r4, #0]
 800c3ee:	0610      	lsls	r0, r2, #24
 800c3f0:	f57f af62 	bpl.w	800c2b8 <_scanf_float+0x64>
 800c3f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3f8:	6022      	str	r2, [r4, #0]
 800c3fa:	e7f4      	b.n	800c3e6 <_scanf_float+0x192>
 800c3fc:	f1ba 0f00 	cmp.w	sl, #0
 800c400:	d10e      	bne.n	800c420 <_scanf_float+0x1cc>
 800c402:	f1b9 0f00 	cmp.w	r9, #0
 800c406:	d10e      	bne.n	800c426 <_scanf_float+0x1d2>
 800c408:	6822      	ldr	r2, [r4, #0]
 800c40a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c40e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c412:	d108      	bne.n	800c426 <_scanf_float+0x1d2>
 800c414:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c418:	6022      	str	r2, [r4, #0]
 800c41a:	f04f 0a01 	mov.w	sl, #1
 800c41e:	e7e2      	b.n	800c3e6 <_scanf_float+0x192>
 800c420:	f1ba 0f02 	cmp.w	sl, #2
 800c424:	d055      	beq.n	800c4d2 <_scanf_float+0x27e>
 800c426:	2d01      	cmp	r5, #1
 800c428:	d002      	beq.n	800c430 <_scanf_float+0x1dc>
 800c42a:	2d04      	cmp	r5, #4
 800c42c:	f47f af44 	bne.w	800c2b8 <_scanf_float+0x64>
 800c430:	3501      	adds	r5, #1
 800c432:	b2ed      	uxtb	r5, r5
 800c434:	e7d7      	b.n	800c3e6 <_scanf_float+0x192>
 800c436:	f1ba 0f01 	cmp.w	sl, #1
 800c43a:	f47f af3d 	bne.w	800c2b8 <_scanf_float+0x64>
 800c43e:	f04f 0a02 	mov.w	sl, #2
 800c442:	e7d0      	b.n	800c3e6 <_scanf_float+0x192>
 800c444:	b97d      	cbnz	r5, 800c466 <_scanf_float+0x212>
 800c446:	f1b9 0f00 	cmp.w	r9, #0
 800c44a:	f47f af38 	bne.w	800c2be <_scanf_float+0x6a>
 800c44e:	6822      	ldr	r2, [r4, #0]
 800c450:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c454:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c458:	f040 8108 	bne.w	800c66c <_scanf_float+0x418>
 800c45c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c460:	6022      	str	r2, [r4, #0]
 800c462:	2501      	movs	r5, #1
 800c464:	e7bf      	b.n	800c3e6 <_scanf_float+0x192>
 800c466:	2d03      	cmp	r5, #3
 800c468:	d0e2      	beq.n	800c430 <_scanf_float+0x1dc>
 800c46a:	2d05      	cmp	r5, #5
 800c46c:	e7de      	b.n	800c42c <_scanf_float+0x1d8>
 800c46e:	2d02      	cmp	r5, #2
 800c470:	f47f af22 	bne.w	800c2b8 <_scanf_float+0x64>
 800c474:	2503      	movs	r5, #3
 800c476:	e7b6      	b.n	800c3e6 <_scanf_float+0x192>
 800c478:	2d06      	cmp	r5, #6
 800c47a:	f47f af1d 	bne.w	800c2b8 <_scanf_float+0x64>
 800c47e:	2507      	movs	r5, #7
 800c480:	e7b1      	b.n	800c3e6 <_scanf_float+0x192>
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	0591      	lsls	r1, r2, #22
 800c486:	f57f af17 	bpl.w	800c2b8 <_scanf_float+0x64>
 800c48a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c48e:	6022      	str	r2, [r4, #0]
 800c490:	f8cd 9008 	str.w	r9, [sp, #8]
 800c494:	e7a7      	b.n	800c3e6 <_scanf_float+0x192>
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c49c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c4a0:	d006      	beq.n	800c4b0 <_scanf_float+0x25c>
 800c4a2:	0550      	lsls	r0, r2, #21
 800c4a4:	f57f af08 	bpl.w	800c2b8 <_scanf_float+0x64>
 800c4a8:	f1b9 0f00 	cmp.w	r9, #0
 800c4ac:	f000 80de 	beq.w	800c66c <_scanf_float+0x418>
 800c4b0:	0591      	lsls	r1, r2, #22
 800c4b2:	bf58      	it	pl
 800c4b4:	9902      	ldrpl	r1, [sp, #8]
 800c4b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c4ba:	bf58      	it	pl
 800c4bc:	eba9 0101 	subpl.w	r1, r9, r1
 800c4c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c4c4:	bf58      	it	pl
 800c4c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c4ca:	6022      	str	r2, [r4, #0]
 800c4cc:	f04f 0900 	mov.w	r9, #0
 800c4d0:	e789      	b.n	800c3e6 <_scanf_float+0x192>
 800c4d2:	f04f 0a03 	mov.w	sl, #3
 800c4d6:	e786      	b.n	800c3e6 <_scanf_float+0x192>
 800c4d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c4dc:	4639      	mov	r1, r7
 800c4de:	4640      	mov	r0, r8
 800c4e0:	4798      	blx	r3
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	f43f aedb 	beq.w	800c29e <_scanf_float+0x4a>
 800c4e8:	e6e6      	b.n	800c2b8 <_scanf_float+0x64>
 800c4ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4f2:	463a      	mov	r2, r7
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	4798      	blx	r3
 800c4f8:	6923      	ldr	r3, [r4, #16]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	6123      	str	r3, [r4, #16]
 800c4fe:	e6e8      	b.n	800c2d2 <_scanf_float+0x7e>
 800c500:	1e6b      	subs	r3, r5, #1
 800c502:	2b06      	cmp	r3, #6
 800c504:	d824      	bhi.n	800c550 <_scanf_float+0x2fc>
 800c506:	2d02      	cmp	r5, #2
 800c508:	d836      	bhi.n	800c578 <_scanf_float+0x324>
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	429e      	cmp	r6, r3
 800c50e:	f67f aee4 	bls.w	800c2da <_scanf_float+0x86>
 800c512:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c516:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c51a:	463a      	mov	r2, r7
 800c51c:	4640      	mov	r0, r8
 800c51e:	4798      	blx	r3
 800c520:	6923      	ldr	r3, [r4, #16]
 800c522:	3b01      	subs	r3, #1
 800c524:	6123      	str	r3, [r4, #16]
 800c526:	e7f0      	b.n	800c50a <_scanf_float+0x2b6>
 800c528:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c52c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c530:	463a      	mov	r2, r7
 800c532:	4640      	mov	r0, r8
 800c534:	4798      	blx	r3
 800c536:	6923      	ldr	r3, [r4, #16]
 800c538:	3b01      	subs	r3, #1
 800c53a:	6123      	str	r3, [r4, #16]
 800c53c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c540:	fa5f fa8a 	uxtb.w	sl, sl
 800c544:	f1ba 0f02 	cmp.w	sl, #2
 800c548:	d1ee      	bne.n	800c528 <_scanf_float+0x2d4>
 800c54a:	3d03      	subs	r5, #3
 800c54c:	b2ed      	uxtb	r5, r5
 800c54e:	1b76      	subs	r6, r6, r5
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	05da      	lsls	r2, r3, #23
 800c554:	d530      	bpl.n	800c5b8 <_scanf_float+0x364>
 800c556:	055b      	lsls	r3, r3, #21
 800c558:	d511      	bpl.n	800c57e <_scanf_float+0x32a>
 800c55a:	9b01      	ldr	r3, [sp, #4]
 800c55c:	429e      	cmp	r6, r3
 800c55e:	f67f aebc 	bls.w	800c2da <_scanf_float+0x86>
 800c562:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c566:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c56a:	463a      	mov	r2, r7
 800c56c:	4640      	mov	r0, r8
 800c56e:	4798      	blx	r3
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	3b01      	subs	r3, #1
 800c574:	6123      	str	r3, [r4, #16]
 800c576:	e7f0      	b.n	800c55a <_scanf_float+0x306>
 800c578:	46aa      	mov	sl, r5
 800c57a:	46b3      	mov	fp, r6
 800c57c:	e7de      	b.n	800c53c <_scanf_float+0x2e8>
 800c57e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c582:	6923      	ldr	r3, [r4, #16]
 800c584:	2965      	cmp	r1, #101	@ 0x65
 800c586:	f103 33ff 	add.w	r3, r3, #4294967295
 800c58a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c58e:	6123      	str	r3, [r4, #16]
 800c590:	d00c      	beq.n	800c5ac <_scanf_float+0x358>
 800c592:	2945      	cmp	r1, #69	@ 0x45
 800c594:	d00a      	beq.n	800c5ac <_scanf_float+0x358>
 800c596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c59a:	463a      	mov	r2, r7
 800c59c:	4640      	mov	r0, r8
 800c59e:	4798      	blx	r3
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	1eb5      	subs	r5, r6, #2
 800c5aa:	6123      	str	r3, [r4, #16]
 800c5ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5b0:	463a      	mov	r2, r7
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	4798      	blx	r3
 800c5b6:	462e      	mov	r6, r5
 800c5b8:	6822      	ldr	r2, [r4, #0]
 800c5ba:	f012 0210 	ands.w	r2, r2, #16
 800c5be:	d001      	beq.n	800c5c4 <_scanf_float+0x370>
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	e68b      	b.n	800c2dc <_scanf_float+0x88>
 800c5c4:	7032      	strb	r2, [r6, #0]
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c5cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5d0:	d11c      	bne.n	800c60c <_scanf_float+0x3b8>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	454b      	cmp	r3, r9
 800c5d6:	eba3 0209 	sub.w	r2, r3, r9
 800c5da:	d123      	bne.n	800c624 <_scanf_float+0x3d0>
 800c5dc:	9901      	ldr	r1, [sp, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	4640      	mov	r0, r8
 800c5e2:	f002 fd09 	bl	800eff8 <_strtod_r>
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	6821      	ldr	r1, [r4, #0]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f011 0f02 	tst.w	r1, #2
 800c5f0:	ec57 6b10 	vmov	r6, r7, d0
 800c5f4:	f103 0204 	add.w	r2, r3, #4
 800c5f8:	d01f      	beq.n	800c63a <_scanf_float+0x3e6>
 800c5fa:	9903      	ldr	r1, [sp, #12]
 800c5fc:	600a      	str	r2, [r1, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	e9c3 6700 	strd	r6, r7, [r3]
 800c604:	68e3      	ldr	r3, [r4, #12]
 800c606:	3301      	adds	r3, #1
 800c608:	60e3      	str	r3, [r4, #12]
 800c60a:	e7d9      	b.n	800c5c0 <_scanf_float+0x36c>
 800c60c:	9b04      	ldr	r3, [sp, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0e4      	beq.n	800c5dc <_scanf_float+0x388>
 800c612:	9905      	ldr	r1, [sp, #20]
 800c614:	230a      	movs	r3, #10
 800c616:	3101      	adds	r1, #1
 800c618:	4640      	mov	r0, r8
 800c61a:	f002 fd6d 	bl	800f0f8 <_strtol_r>
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	9e05      	ldr	r6, [sp, #20]
 800c622:	1ac2      	subs	r2, r0, r3
 800c624:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c628:	429e      	cmp	r6, r3
 800c62a:	bf28      	it	cs
 800c62c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c630:	4910      	ldr	r1, [pc, #64]	@ (800c674 <_scanf_float+0x420>)
 800c632:	4630      	mov	r0, r6
 800c634:	f000 f954 	bl	800c8e0 <siprintf>
 800c638:	e7d0      	b.n	800c5dc <_scanf_float+0x388>
 800c63a:	f011 0f04 	tst.w	r1, #4
 800c63e:	9903      	ldr	r1, [sp, #12]
 800c640:	600a      	str	r2, [r1, #0]
 800c642:	d1dc      	bne.n	800c5fe <_scanf_float+0x3aa>
 800c644:	681d      	ldr	r5, [r3, #0]
 800c646:	4632      	mov	r2, r6
 800c648:	463b      	mov	r3, r7
 800c64a:	4630      	mov	r0, r6
 800c64c:	4639      	mov	r1, r7
 800c64e:	f7f4 fa6d 	bl	8000b2c <__aeabi_dcmpun>
 800c652:	b128      	cbz	r0, 800c660 <_scanf_float+0x40c>
 800c654:	4808      	ldr	r0, [pc, #32]	@ (800c678 <_scanf_float+0x424>)
 800c656:	f000 fac9 	bl	800cbec <nanf>
 800c65a:	ed85 0a00 	vstr	s0, [r5]
 800c65e:	e7d1      	b.n	800c604 <_scanf_float+0x3b0>
 800c660:	4630      	mov	r0, r6
 800c662:	4639      	mov	r1, r7
 800c664:	f7f4 fac0 	bl	8000be8 <__aeabi_d2f>
 800c668:	6028      	str	r0, [r5, #0]
 800c66a:	e7cb      	b.n	800c604 <_scanf_float+0x3b0>
 800c66c:	f04f 0900 	mov.w	r9, #0
 800c670:	e629      	b.n	800c2c6 <_scanf_float+0x72>
 800c672:	bf00      	nop
 800c674:	08011e30 	.word	0x08011e30
 800c678:	080121c5 	.word	0x080121c5

0800c67c <std>:
 800c67c:	2300      	movs	r3, #0
 800c67e:	b510      	push	{r4, lr}
 800c680:	4604      	mov	r4, r0
 800c682:	e9c0 3300 	strd	r3, r3, [r0]
 800c686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c68a:	6083      	str	r3, [r0, #8]
 800c68c:	8181      	strh	r1, [r0, #12]
 800c68e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c690:	81c2      	strh	r2, [r0, #14]
 800c692:	6183      	str	r3, [r0, #24]
 800c694:	4619      	mov	r1, r3
 800c696:	2208      	movs	r2, #8
 800c698:	305c      	adds	r0, #92	@ 0x5c
 800c69a:	f000 fa19 	bl	800cad0 <memset>
 800c69e:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d4 <std+0x58>)
 800c6a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d8 <std+0x5c>)
 800c6a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c6dc <std+0x60>)
 800c6a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e0 <std+0x64>)
 800c6ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e4 <std+0x68>)
 800c6b0:	6224      	str	r4, [r4, #32]
 800c6b2:	429c      	cmp	r4, r3
 800c6b4:	d006      	beq.n	800c6c4 <std+0x48>
 800c6b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6ba:	4294      	cmp	r4, r2
 800c6bc:	d002      	beq.n	800c6c4 <std+0x48>
 800c6be:	33d0      	adds	r3, #208	@ 0xd0
 800c6c0:	429c      	cmp	r4, r3
 800c6c2:	d105      	bne.n	800c6d0 <std+0x54>
 800c6c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6cc:	f000 ba7c 	b.w	800cbc8 <__retarget_lock_init_recursive>
 800c6d0:	bd10      	pop	{r4, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0800c921 	.word	0x0800c921
 800c6d8:	0800c943 	.word	0x0800c943
 800c6dc:	0800c97b 	.word	0x0800c97b
 800c6e0:	0800c99f 	.word	0x0800c99f
 800c6e4:	20001580 	.word	0x20001580

0800c6e8 <stdio_exit_handler>:
 800c6e8:	4a02      	ldr	r2, [pc, #8]	@ (800c6f4 <stdio_exit_handler+0xc>)
 800c6ea:	4903      	ldr	r1, [pc, #12]	@ (800c6f8 <stdio_exit_handler+0x10>)
 800c6ec:	4803      	ldr	r0, [pc, #12]	@ (800c6fc <stdio_exit_handler+0x14>)
 800c6ee:	f000 b869 	b.w	800c7c4 <_fwalk_sglue>
 800c6f2:	bf00      	nop
 800c6f4:	2000000c 	.word	0x2000000c
 800c6f8:	0800f739 	.word	0x0800f739
 800c6fc:	2000001c 	.word	0x2000001c

0800c700 <cleanup_stdio>:
 800c700:	6841      	ldr	r1, [r0, #4]
 800c702:	4b0c      	ldr	r3, [pc, #48]	@ (800c734 <cleanup_stdio+0x34>)
 800c704:	4299      	cmp	r1, r3
 800c706:	b510      	push	{r4, lr}
 800c708:	4604      	mov	r4, r0
 800c70a:	d001      	beq.n	800c710 <cleanup_stdio+0x10>
 800c70c:	f003 f814 	bl	800f738 <_fflush_r>
 800c710:	68a1      	ldr	r1, [r4, #8]
 800c712:	4b09      	ldr	r3, [pc, #36]	@ (800c738 <cleanup_stdio+0x38>)
 800c714:	4299      	cmp	r1, r3
 800c716:	d002      	beq.n	800c71e <cleanup_stdio+0x1e>
 800c718:	4620      	mov	r0, r4
 800c71a:	f003 f80d 	bl	800f738 <_fflush_r>
 800c71e:	68e1      	ldr	r1, [r4, #12]
 800c720:	4b06      	ldr	r3, [pc, #24]	@ (800c73c <cleanup_stdio+0x3c>)
 800c722:	4299      	cmp	r1, r3
 800c724:	d004      	beq.n	800c730 <cleanup_stdio+0x30>
 800c726:	4620      	mov	r0, r4
 800c728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c72c:	f003 b804 	b.w	800f738 <_fflush_r>
 800c730:	bd10      	pop	{r4, pc}
 800c732:	bf00      	nop
 800c734:	20001580 	.word	0x20001580
 800c738:	200015e8 	.word	0x200015e8
 800c73c:	20001650 	.word	0x20001650

0800c740 <global_stdio_init.part.0>:
 800c740:	b510      	push	{r4, lr}
 800c742:	4b0b      	ldr	r3, [pc, #44]	@ (800c770 <global_stdio_init.part.0+0x30>)
 800c744:	4c0b      	ldr	r4, [pc, #44]	@ (800c774 <global_stdio_init.part.0+0x34>)
 800c746:	4a0c      	ldr	r2, [pc, #48]	@ (800c778 <global_stdio_init.part.0+0x38>)
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	4620      	mov	r0, r4
 800c74c:	2200      	movs	r2, #0
 800c74e:	2104      	movs	r1, #4
 800c750:	f7ff ff94 	bl	800c67c <std>
 800c754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c758:	2201      	movs	r2, #1
 800c75a:	2109      	movs	r1, #9
 800c75c:	f7ff ff8e 	bl	800c67c <std>
 800c760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c764:	2202      	movs	r2, #2
 800c766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c76a:	2112      	movs	r1, #18
 800c76c:	f7ff bf86 	b.w	800c67c <std>
 800c770:	200016b8 	.word	0x200016b8
 800c774:	20001580 	.word	0x20001580
 800c778:	0800c6e9 	.word	0x0800c6e9

0800c77c <__sfp_lock_acquire>:
 800c77c:	4801      	ldr	r0, [pc, #4]	@ (800c784 <__sfp_lock_acquire+0x8>)
 800c77e:	f000 ba24 	b.w	800cbca <__retarget_lock_acquire_recursive>
 800c782:	bf00      	nop
 800c784:	200016c1 	.word	0x200016c1

0800c788 <__sfp_lock_release>:
 800c788:	4801      	ldr	r0, [pc, #4]	@ (800c790 <__sfp_lock_release+0x8>)
 800c78a:	f000 ba1f 	b.w	800cbcc <__retarget_lock_release_recursive>
 800c78e:	bf00      	nop
 800c790:	200016c1 	.word	0x200016c1

0800c794 <__sinit>:
 800c794:	b510      	push	{r4, lr}
 800c796:	4604      	mov	r4, r0
 800c798:	f7ff fff0 	bl	800c77c <__sfp_lock_acquire>
 800c79c:	6a23      	ldr	r3, [r4, #32]
 800c79e:	b11b      	cbz	r3, 800c7a8 <__sinit+0x14>
 800c7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7a4:	f7ff bff0 	b.w	800c788 <__sfp_lock_release>
 800c7a8:	4b04      	ldr	r3, [pc, #16]	@ (800c7bc <__sinit+0x28>)
 800c7aa:	6223      	str	r3, [r4, #32]
 800c7ac:	4b04      	ldr	r3, [pc, #16]	@ (800c7c0 <__sinit+0x2c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1f5      	bne.n	800c7a0 <__sinit+0xc>
 800c7b4:	f7ff ffc4 	bl	800c740 <global_stdio_init.part.0>
 800c7b8:	e7f2      	b.n	800c7a0 <__sinit+0xc>
 800c7ba:	bf00      	nop
 800c7bc:	0800c701 	.word	0x0800c701
 800c7c0:	200016b8 	.word	0x200016b8

0800c7c4 <_fwalk_sglue>:
 800c7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	4688      	mov	r8, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	2600      	movs	r6, #0
 800c7d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c7d8:	d505      	bpl.n	800c7e6 <_fwalk_sglue+0x22>
 800c7da:	6824      	ldr	r4, [r4, #0]
 800c7dc:	2c00      	cmp	r4, #0
 800c7de:	d1f7      	bne.n	800c7d0 <_fwalk_sglue+0xc>
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d907      	bls.n	800c7fc <_fwalk_sglue+0x38>
 800c7ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	d003      	beq.n	800c7fc <_fwalk_sglue+0x38>
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	47c0      	blx	r8
 800c7fa:	4306      	orrs	r6, r0
 800c7fc:	3568      	adds	r5, #104	@ 0x68
 800c7fe:	e7e9      	b.n	800c7d4 <_fwalk_sglue+0x10>

0800c800 <iprintf>:
 800c800:	b40f      	push	{r0, r1, r2, r3}
 800c802:	b507      	push	{r0, r1, r2, lr}
 800c804:	4906      	ldr	r1, [pc, #24]	@ (800c820 <iprintf+0x20>)
 800c806:	ab04      	add	r3, sp, #16
 800c808:	6808      	ldr	r0, [r1, #0]
 800c80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c80e:	6881      	ldr	r1, [r0, #8]
 800c810:	9301      	str	r3, [sp, #4]
 800c812:	f002 fdf5 	bl	800f400 <_vfiprintf_r>
 800c816:	b003      	add	sp, #12
 800c818:	f85d eb04 	ldr.w	lr, [sp], #4
 800c81c:	b004      	add	sp, #16
 800c81e:	4770      	bx	lr
 800c820:	20000018 	.word	0x20000018

0800c824 <_puts_r>:
 800c824:	6a03      	ldr	r3, [r0, #32]
 800c826:	b570      	push	{r4, r5, r6, lr}
 800c828:	6884      	ldr	r4, [r0, #8]
 800c82a:	4605      	mov	r5, r0
 800c82c:	460e      	mov	r6, r1
 800c82e:	b90b      	cbnz	r3, 800c834 <_puts_r+0x10>
 800c830:	f7ff ffb0 	bl	800c794 <__sinit>
 800c834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c836:	07db      	lsls	r3, r3, #31
 800c838:	d405      	bmi.n	800c846 <_puts_r+0x22>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	0598      	lsls	r0, r3, #22
 800c83e:	d402      	bmi.n	800c846 <_puts_r+0x22>
 800c840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c842:	f000 f9c2 	bl	800cbca <__retarget_lock_acquire_recursive>
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	0719      	lsls	r1, r3, #28
 800c84a:	d502      	bpl.n	800c852 <_puts_r+0x2e>
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d135      	bne.n	800c8be <_puts_r+0x9a>
 800c852:	4621      	mov	r1, r4
 800c854:	4628      	mov	r0, r5
 800c856:	f000 f8e5 	bl	800ca24 <__swsetup_r>
 800c85a:	b380      	cbz	r0, 800c8be <_puts_r+0x9a>
 800c85c:	f04f 35ff 	mov.w	r5, #4294967295
 800c860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c862:	07da      	lsls	r2, r3, #31
 800c864:	d405      	bmi.n	800c872 <_puts_r+0x4e>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	059b      	lsls	r3, r3, #22
 800c86a:	d402      	bmi.n	800c872 <_puts_r+0x4e>
 800c86c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c86e:	f000 f9ad 	bl	800cbcc <__retarget_lock_release_recursive>
 800c872:	4628      	mov	r0, r5
 800c874:	bd70      	pop	{r4, r5, r6, pc}
 800c876:	2b00      	cmp	r3, #0
 800c878:	da04      	bge.n	800c884 <_puts_r+0x60>
 800c87a:	69a2      	ldr	r2, [r4, #24]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	dc17      	bgt.n	800c8b0 <_puts_r+0x8c>
 800c880:	290a      	cmp	r1, #10
 800c882:	d015      	beq.n	800c8b0 <_puts_r+0x8c>
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	6022      	str	r2, [r4, #0]
 800c88a:	7019      	strb	r1, [r3, #0]
 800c88c:	68a3      	ldr	r3, [r4, #8]
 800c88e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c892:	3b01      	subs	r3, #1
 800c894:	60a3      	str	r3, [r4, #8]
 800c896:	2900      	cmp	r1, #0
 800c898:	d1ed      	bne.n	800c876 <_puts_r+0x52>
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	da11      	bge.n	800c8c2 <_puts_r+0x9e>
 800c89e:	4622      	mov	r2, r4
 800c8a0:	210a      	movs	r1, #10
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	f000 f87f 	bl	800c9a6 <__swbuf_r>
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	d0d7      	beq.n	800c85c <_puts_r+0x38>
 800c8ac:	250a      	movs	r5, #10
 800c8ae:	e7d7      	b.n	800c860 <_puts_r+0x3c>
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f000 f877 	bl	800c9a6 <__swbuf_r>
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	d1e7      	bne.n	800c88c <_puts_r+0x68>
 800c8bc:	e7ce      	b.n	800c85c <_puts_r+0x38>
 800c8be:	3e01      	subs	r6, #1
 800c8c0:	e7e4      	b.n	800c88c <_puts_r+0x68>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	1c5a      	adds	r2, r3, #1
 800c8c6:	6022      	str	r2, [r4, #0]
 800c8c8:	220a      	movs	r2, #10
 800c8ca:	701a      	strb	r2, [r3, #0]
 800c8cc:	e7ee      	b.n	800c8ac <_puts_r+0x88>
	...

0800c8d0 <puts>:
 800c8d0:	4b02      	ldr	r3, [pc, #8]	@ (800c8dc <puts+0xc>)
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	6818      	ldr	r0, [r3, #0]
 800c8d6:	f7ff bfa5 	b.w	800c824 <_puts_r>
 800c8da:	bf00      	nop
 800c8dc:	20000018 	.word	0x20000018

0800c8e0 <siprintf>:
 800c8e0:	b40e      	push	{r1, r2, r3}
 800c8e2:	b500      	push	{lr}
 800c8e4:	b09c      	sub	sp, #112	@ 0x70
 800c8e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c8e8:	9002      	str	r0, [sp, #8]
 800c8ea:	9006      	str	r0, [sp, #24]
 800c8ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c8f0:	4809      	ldr	r0, [pc, #36]	@ (800c918 <siprintf+0x38>)
 800c8f2:	9107      	str	r1, [sp, #28]
 800c8f4:	9104      	str	r1, [sp, #16]
 800c8f6:	4909      	ldr	r1, [pc, #36]	@ (800c91c <siprintf+0x3c>)
 800c8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8fc:	9105      	str	r1, [sp, #20]
 800c8fe:	6800      	ldr	r0, [r0, #0]
 800c900:	9301      	str	r3, [sp, #4]
 800c902:	a902      	add	r1, sp, #8
 800c904:	f002 fc56 	bl	800f1b4 <_svfiprintf_r>
 800c908:	9b02      	ldr	r3, [sp, #8]
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
 800c90e:	b01c      	add	sp, #112	@ 0x70
 800c910:	f85d eb04 	ldr.w	lr, [sp], #4
 800c914:	b003      	add	sp, #12
 800c916:	4770      	bx	lr
 800c918:	20000018 	.word	0x20000018
 800c91c:	ffff0208 	.word	0xffff0208

0800c920 <__sread>:
 800c920:	b510      	push	{r4, lr}
 800c922:	460c      	mov	r4, r1
 800c924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c928:	f000 f900 	bl	800cb2c <_read_r>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	bfab      	itete	ge
 800c930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c932:	89a3      	ldrhlt	r3, [r4, #12]
 800c934:	181b      	addge	r3, r3, r0
 800c936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c93a:	bfac      	ite	ge
 800c93c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c93e:	81a3      	strhlt	r3, [r4, #12]
 800c940:	bd10      	pop	{r4, pc}

0800c942 <__swrite>:
 800c942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c946:	461f      	mov	r7, r3
 800c948:	898b      	ldrh	r3, [r1, #12]
 800c94a:	05db      	lsls	r3, r3, #23
 800c94c:	4605      	mov	r5, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	4616      	mov	r6, r2
 800c952:	d505      	bpl.n	800c960 <__swrite+0x1e>
 800c954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c958:	2302      	movs	r3, #2
 800c95a:	2200      	movs	r2, #0
 800c95c:	f000 f8d4 	bl	800cb08 <_lseek_r>
 800c960:	89a3      	ldrh	r3, [r4, #12]
 800c962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c96a:	81a3      	strh	r3, [r4, #12]
 800c96c:	4632      	mov	r2, r6
 800c96e:	463b      	mov	r3, r7
 800c970:	4628      	mov	r0, r5
 800c972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c976:	f000 b8eb 	b.w	800cb50 <_write_r>

0800c97a <__sseek>:
 800c97a:	b510      	push	{r4, lr}
 800c97c:	460c      	mov	r4, r1
 800c97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c982:	f000 f8c1 	bl	800cb08 <_lseek_r>
 800c986:	1c43      	adds	r3, r0, #1
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	bf15      	itete	ne
 800c98c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c98e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c996:	81a3      	strheq	r3, [r4, #12]
 800c998:	bf18      	it	ne
 800c99a:	81a3      	strhne	r3, [r4, #12]
 800c99c:	bd10      	pop	{r4, pc}

0800c99e <__sclose>:
 800c99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a2:	f000 b8a1 	b.w	800cae8 <_close_r>

0800c9a6 <__swbuf_r>:
 800c9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a8:	460e      	mov	r6, r1
 800c9aa:	4614      	mov	r4, r2
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	b118      	cbz	r0, 800c9b8 <__swbuf_r+0x12>
 800c9b0:	6a03      	ldr	r3, [r0, #32]
 800c9b2:	b90b      	cbnz	r3, 800c9b8 <__swbuf_r+0x12>
 800c9b4:	f7ff feee 	bl	800c794 <__sinit>
 800c9b8:	69a3      	ldr	r3, [r4, #24]
 800c9ba:	60a3      	str	r3, [r4, #8]
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	071a      	lsls	r2, r3, #28
 800c9c0:	d501      	bpl.n	800c9c6 <__swbuf_r+0x20>
 800c9c2:	6923      	ldr	r3, [r4, #16]
 800c9c4:	b943      	cbnz	r3, 800c9d8 <__swbuf_r+0x32>
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f000 f82b 	bl	800ca24 <__swsetup_r>
 800c9ce:	b118      	cbz	r0, 800c9d8 <__swbuf_r+0x32>
 800c9d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	6922      	ldr	r2, [r4, #16]
 800c9dc:	1a98      	subs	r0, r3, r2
 800c9de:	6963      	ldr	r3, [r4, #20]
 800c9e0:	b2f6      	uxtb	r6, r6
 800c9e2:	4283      	cmp	r3, r0
 800c9e4:	4637      	mov	r7, r6
 800c9e6:	dc05      	bgt.n	800c9f4 <__swbuf_r+0x4e>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f002 fea4 	bl	800f738 <_fflush_r>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d1ed      	bne.n	800c9d0 <__swbuf_r+0x2a>
 800c9f4:	68a3      	ldr	r3, [r4, #8]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	60a3      	str	r3, [r4, #8]
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	6022      	str	r2, [r4, #0]
 800ca00:	701e      	strb	r6, [r3, #0]
 800ca02:	6962      	ldr	r2, [r4, #20]
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d004      	beq.n	800ca14 <__swbuf_r+0x6e>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	07db      	lsls	r3, r3, #31
 800ca0e:	d5e1      	bpl.n	800c9d4 <__swbuf_r+0x2e>
 800ca10:	2e0a      	cmp	r6, #10
 800ca12:	d1df      	bne.n	800c9d4 <__swbuf_r+0x2e>
 800ca14:	4621      	mov	r1, r4
 800ca16:	4628      	mov	r0, r5
 800ca18:	f002 fe8e 	bl	800f738 <_fflush_r>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d0d9      	beq.n	800c9d4 <__swbuf_r+0x2e>
 800ca20:	e7d6      	b.n	800c9d0 <__swbuf_r+0x2a>
	...

0800ca24 <__swsetup_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4b29      	ldr	r3, [pc, #164]	@ (800cacc <__swsetup_r+0xa8>)
 800ca28:	4605      	mov	r5, r0
 800ca2a:	6818      	ldr	r0, [r3, #0]
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	b118      	cbz	r0, 800ca38 <__swsetup_r+0x14>
 800ca30:	6a03      	ldr	r3, [r0, #32]
 800ca32:	b90b      	cbnz	r3, 800ca38 <__swsetup_r+0x14>
 800ca34:	f7ff feae 	bl	800c794 <__sinit>
 800ca38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca3c:	0719      	lsls	r1, r3, #28
 800ca3e:	d422      	bmi.n	800ca86 <__swsetup_r+0x62>
 800ca40:	06da      	lsls	r2, r3, #27
 800ca42:	d407      	bmi.n	800ca54 <__swsetup_r+0x30>
 800ca44:	2209      	movs	r2, #9
 800ca46:	602a      	str	r2, [r5, #0]
 800ca48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca4c:	81a3      	strh	r3, [r4, #12]
 800ca4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca52:	e033      	b.n	800cabc <__swsetup_r+0x98>
 800ca54:	0758      	lsls	r0, r3, #29
 800ca56:	d512      	bpl.n	800ca7e <__swsetup_r+0x5a>
 800ca58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca5a:	b141      	cbz	r1, 800ca6e <__swsetup_r+0x4a>
 800ca5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca60:	4299      	cmp	r1, r3
 800ca62:	d002      	beq.n	800ca6a <__swsetup_r+0x46>
 800ca64:	4628      	mov	r0, r5
 800ca66:	f000 ff13 	bl	800d890 <_free_r>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca74:	81a3      	strh	r3, [r4, #12]
 800ca76:	2300      	movs	r3, #0
 800ca78:	6063      	str	r3, [r4, #4]
 800ca7a:	6923      	ldr	r3, [r4, #16]
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	f043 0308 	orr.w	r3, r3, #8
 800ca84:	81a3      	strh	r3, [r4, #12]
 800ca86:	6923      	ldr	r3, [r4, #16]
 800ca88:	b94b      	cbnz	r3, 800ca9e <__swsetup_r+0x7a>
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca94:	d003      	beq.n	800ca9e <__swsetup_r+0x7a>
 800ca96:	4621      	mov	r1, r4
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f002 fe9b 	bl	800f7d4 <__smakebuf_r>
 800ca9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caa2:	f013 0201 	ands.w	r2, r3, #1
 800caa6:	d00a      	beq.n	800cabe <__swsetup_r+0x9a>
 800caa8:	2200      	movs	r2, #0
 800caaa:	60a2      	str	r2, [r4, #8]
 800caac:	6962      	ldr	r2, [r4, #20]
 800caae:	4252      	negs	r2, r2
 800cab0:	61a2      	str	r2, [r4, #24]
 800cab2:	6922      	ldr	r2, [r4, #16]
 800cab4:	b942      	cbnz	r2, 800cac8 <__swsetup_r+0xa4>
 800cab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caba:	d1c5      	bne.n	800ca48 <__swsetup_r+0x24>
 800cabc:	bd38      	pop	{r3, r4, r5, pc}
 800cabe:	0799      	lsls	r1, r3, #30
 800cac0:	bf58      	it	pl
 800cac2:	6962      	ldrpl	r2, [r4, #20]
 800cac4:	60a2      	str	r2, [r4, #8]
 800cac6:	e7f4      	b.n	800cab2 <__swsetup_r+0x8e>
 800cac8:	2000      	movs	r0, #0
 800caca:	e7f7      	b.n	800cabc <__swsetup_r+0x98>
 800cacc:	20000018 	.word	0x20000018

0800cad0 <memset>:
 800cad0:	4402      	add	r2, r0
 800cad2:	4603      	mov	r3, r0
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d100      	bne.n	800cada <memset+0xa>
 800cad8:	4770      	bx	lr
 800cada:	f803 1b01 	strb.w	r1, [r3], #1
 800cade:	e7f9      	b.n	800cad4 <memset+0x4>

0800cae0 <_localeconv_r>:
 800cae0:	4800      	ldr	r0, [pc, #0]	@ (800cae4 <_localeconv_r+0x4>)
 800cae2:	4770      	bx	lr
 800cae4:	20000158 	.word	0x20000158

0800cae8 <_close_r>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	4d06      	ldr	r5, [pc, #24]	@ (800cb04 <_close_r+0x1c>)
 800caec:	2300      	movs	r3, #0
 800caee:	4604      	mov	r4, r0
 800caf0:	4608      	mov	r0, r1
 800caf2:	602b      	str	r3, [r5, #0]
 800caf4:	f7f4 ff4f 	bl	8001996 <_close>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d102      	bne.n	800cb02 <_close_r+0x1a>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b103      	cbz	r3, 800cb02 <_close_r+0x1a>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	200016bc 	.word	0x200016bc

0800cb08 <_lseek_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4d07      	ldr	r5, [pc, #28]	@ (800cb28 <_lseek_r+0x20>)
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	4608      	mov	r0, r1
 800cb10:	4611      	mov	r1, r2
 800cb12:	2200      	movs	r2, #0
 800cb14:	602a      	str	r2, [r5, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	f7f4 ff64 	bl	80019e4 <_lseek>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d102      	bne.n	800cb26 <_lseek_r+0x1e>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	b103      	cbz	r3, 800cb26 <_lseek_r+0x1e>
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	200016bc 	.word	0x200016bc

0800cb2c <_read_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d07      	ldr	r5, [pc, #28]	@ (800cb4c <_read_r+0x20>)
 800cb30:	4604      	mov	r4, r0
 800cb32:	4608      	mov	r0, r1
 800cb34:	4611      	mov	r1, r2
 800cb36:	2200      	movs	r2, #0
 800cb38:	602a      	str	r2, [r5, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f7f4 fef2 	bl	8001924 <_read>
 800cb40:	1c43      	adds	r3, r0, #1
 800cb42:	d102      	bne.n	800cb4a <_read_r+0x1e>
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	b103      	cbz	r3, 800cb4a <_read_r+0x1e>
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	200016bc 	.word	0x200016bc

0800cb50 <_write_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4d07      	ldr	r5, [pc, #28]	@ (800cb70 <_write_r+0x20>)
 800cb54:	4604      	mov	r4, r0
 800cb56:	4608      	mov	r0, r1
 800cb58:	4611      	mov	r1, r2
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	602a      	str	r2, [r5, #0]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	f7f4 fefd 	bl	800195e <_write>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_write_r+0x1e>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_write_r+0x1e>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	200016bc 	.word	0x200016bc

0800cb74 <__errno>:
 800cb74:	4b01      	ldr	r3, [pc, #4]	@ (800cb7c <__errno+0x8>)
 800cb76:	6818      	ldr	r0, [r3, #0]
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	20000018 	.word	0x20000018

0800cb80 <__libc_init_array>:
 800cb80:	b570      	push	{r4, r5, r6, lr}
 800cb82:	4d0d      	ldr	r5, [pc, #52]	@ (800cbb8 <__libc_init_array+0x38>)
 800cb84:	4c0d      	ldr	r4, [pc, #52]	@ (800cbbc <__libc_init_array+0x3c>)
 800cb86:	1b64      	subs	r4, r4, r5
 800cb88:	10a4      	asrs	r4, r4, #2
 800cb8a:	2600      	movs	r6, #0
 800cb8c:	42a6      	cmp	r6, r4
 800cb8e:	d109      	bne.n	800cba4 <__libc_init_array+0x24>
 800cb90:	4d0b      	ldr	r5, [pc, #44]	@ (800cbc0 <__libc_init_array+0x40>)
 800cb92:	4c0c      	ldr	r4, [pc, #48]	@ (800cbc4 <__libc_init_array+0x44>)
 800cb94:	f005 f85e 	bl	8011c54 <_init>
 800cb98:	1b64      	subs	r4, r4, r5
 800cb9a:	10a4      	asrs	r4, r4, #2
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	42a6      	cmp	r6, r4
 800cba0:	d105      	bne.n	800cbae <__libc_init_array+0x2e>
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba8:	4798      	blx	r3
 800cbaa:	3601      	adds	r6, #1
 800cbac:	e7ee      	b.n	800cb8c <__libc_init_array+0xc>
 800cbae:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb2:	4798      	blx	r3
 800cbb4:	3601      	adds	r6, #1
 800cbb6:	e7f2      	b.n	800cb9e <__libc_init_array+0x1e>
 800cbb8:	080126a8 	.word	0x080126a8
 800cbbc:	080126a8 	.word	0x080126a8
 800cbc0:	080126a8 	.word	0x080126a8
 800cbc4:	080126ac 	.word	0x080126ac

0800cbc8 <__retarget_lock_init_recursive>:
 800cbc8:	4770      	bx	lr

0800cbca <__retarget_lock_acquire_recursive>:
 800cbca:	4770      	bx	lr

0800cbcc <__retarget_lock_release_recursive>:
 800cbcc:	4770      	bx	lr

0800cbce <memcpy>:
 800cbce:	440a      	add	r2, r1
 800cbd0:	4291      	cmp	r1, r2
 800cbd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbd6:	d100      	bne.n	800cbda <memcpy+0xc>
 800cbd8:	4770      	bx	lr
 800cbda:	b510      	push	{r4, lr}
 800cbdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbe4:	4291      	cmp	r1, r2
 800cbe6:	d1f9      	bne.n	800cbdc <memcpy+0xe>
 800cbe8:	bd10      	pop	{r4, pc}
	...

0800cbec <nanf>:
 800cbec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cbf4 <nanf+0x8>
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	7fc00000 	.word	0x7fc00000

0800cbf8 <quorem>:
 800cbf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfc:	6903      	ldr	r3, [r0, #16]
 800cbfe:	690c      	ldr	r4, [r1, #16]
 800cc00:	42a3      	cmp	r3, r4
 800cc02:	4607      	mov	r7, r0
 800cc04:	db7e      	blt.n	800cd04 <quorem+0x10c>
 800cc06:	3c01      	subs	r4, #1
 800cc08:	f101 0814 	add.w	r8, r1, #20
 800cc0c:	00a3      	lsls	r3, r4, #2
 800cc0e:	f100 0514 	add.w	r5, r0, #20
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc18:	9301      	str	r3, [sp, #4]
 800cc1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc22:	3301      	adds	r3, #1
 800cc24:	429a      	cmp	r2, r3
 800cc26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc2a:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc2e:	d32e      	bcc.n	800cc8e <quorem+0x96>
 800cc30:	f04f 0a00 	mov.w	sl, #0
 800cc34:	46c4      	mov	ip, r8
 800cc36:	46ae      	mov	lr, r5
 800cc38:	46d3      	mov	fp, sl
 800cc3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc3e:	b298      	uxth	r0, r3
 800cc40:	fb06 a000 	mla	r0, r6, r0, sl
 800cc44:	0c02      	lsrs	r2, r0, #16
 800cc46:	0c1b      	lsrs	r3, r3, #16
 800cc48:	fb06 2303 	mla	r3, r6, r3, r2
 800cc4c:	f8de 2000 	ldr.w	r2, [lr]
 800cc50:	b280      	uxth	r0, r0
 800cc52:	b292      	uxth	r2, r2
 800cc54:	1a12      	subs	r2, r2, r0
 800cc56:	445a      	add	r2, fp
 800cc58:	f8de 0000 	ldr.w	r0, [lr]
 800cc5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc6a:	b292      	uxth	r2, r2
 800cc6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc70:	45e1      	cmp	r9, ip
 800cc72:	f84e 2b04 	str.w	r2, [lr], #4
 800cc76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc7a:	d2de      	bcs.n	800cc3a <quorem+0x42>
 800cc7c:	9b00      	ldr	r3, [sp, #0]
 800cc7e:	58eb      	ldr	r3, [r5, r3]
 800cc80:	b92b      	cbnz	r3, 800cc8e <quorem+0x96>
 800cc82:	9b01      	ldr	r3, [sp, #4]
 800cc84:	3b04      	subs	r3, #4
 800cc86:	429d      	cmp	r5, r3
 800cc88:	461a      	mov	r2, r3
 800cc8a:	d32f      	bcc.n	800ccec <quorem+0xf4>
 800cc8c:	613c      	str	r4, [r7, #16]
 800cc8e:	4638      	mov	r0, r7
 800cc90:	f001 f9c2 	bl	800e018 <__mcmp>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	db25      	blt.n	800cce4 <quorem+0xec>
 800cc98:	4629      	mov	r1, r5
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cca0:	f8d1 c000 	ldr.w	ip, [r1]
 800cca4:	fa1f fe82 	uxth.w	lr, r2
 800cca8:	fa1f f38c 	uxth.w	r3, ip
 800ccac:	eba3 030e 	sub.w	r3, r3, lr
 800ccb0:	4403      	add	r3, r0
 800ccb2:	0c12      	lsrs	r2, r2, #16
 800ccb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ccb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccc2:	45c1      	cmp	r9, r8
 800ccc4:	f841 3b04 	str.w	r3, [r1], #4
 800ccc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cccc:	d2e6      	bcs.n	800cc9c <quorem+0xa4>
 800ccce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccd6:	b922      	cbnz	r2, 800cce2 <quorem+0xea>
 800ccd8:	3b04      	subs	r3, #4
 800ccda:	429d      	cmp	r5, r3
 800ccdc:	461a      	mov	r2, r3
 800ccde:	d30b      	bcc.n	800ccf8 <quorem+0x100>
 800cce0:	613c      	str	r4, [r7, #16]
 800cce2:	3601      	adds	r6, #1
 800cce4:	4630      	mov	r0, r6
 800cce6:	b003      	add	sp, #12
 800cce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccec:	6812      	ldr	r2, [r2, #0]
 800ccee:	3b04      	subs	r3, #4
 800ccf0:	2a00      	cmp	r2, #0
 800ccf2:	d1cb      	bne.n	800cc8c <quorem+0x94>
 800ccf4:	3c01      	subs	r4, #1
 800ccf6:	e7c6      	b.n	800cc86 <quorem+0x8e>
 800ccf8:	6812      	ldr	r2, [r2, #0]
 800ccfa:	3b04      	subs	r3, #4
 800ccfc:	2a00      	cmp	r2, #0
 800ccfe:	d1ef      	bne.n	800cce0 <quorem+0xe8>
 800cd00:	3c01      	subs	r4, #1
 800cd02:	e7ea      	b.n	800ccda <quorem+0xe2>
 800cd04:	2000      	movs	r0, #0
 800cd06:	e7ee      	b.n	800cce6 <quorem+0xee>

0800cd08 <_dtoa_r>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	69c7      	ldr	r7, [r0, #28]
 800cd0e:	b099      	sub	sp, #100	@ 0x64
 800cd10:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cd14:	ec55 4b10 	vmov	r4, r5, d0
 800cd18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cd1a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd1c:	4683      	mov	fp, r0
 800cd1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd22:	b97f      	cbnz	r7, 800cd44 <_dtoa_r+0x3c>
 800cd24:	2010      	movs	r0, #16
 800cd26:	f000 fdfd 	bl	800d924 <malloc>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	f8cb 001c 	str.w	r0, [fp, #28]
 800cd30:	b920      	cbnz	r0, 800cd3c <_dtoa_r+0x34>
 800cd32:	4ba7      	ldr	r3, [pc, #668]	@ (800cfd0 <_dtoa_r+0x2c8>)
 800cd34:	21ef      	movs	r1, #239	@ 0xef
 800cd36:	48a7      	ldr	r0, [pc, #668]	@ (800cfd4 <_dtoa_r+0x2cc>)
 800cd38:	f002 fdee 	bl	800f918 <__assert_func>
 800cd3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cd40:	6007      	str	r7, [r0, #0]
 800cd42:	60c7      	str	r7, [r0, #12]
 800cd44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd48:	6819      	ldr	r1, [r3, #0]
 800cd4a:	b159      	cbz	r1, 800cd64 <_dtoa_r+0x5c>
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	604a      	str	r2, [r1, #4]
 800cd50:	2301      	movs	r3, #1
 800cd52:	4093      	lsls	r3, r2
 800cd54:	608b      	str	r3, [r1, #8]
 800cd56:	4658      	mov	r0, fp
 800cd58:	f000 feda 	bl	800db10 <_Bfree>
 800cd5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd60:	2200      	movs	r2, #0
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	1e2b      	subs	r3, r5, #0
 800cd66:	bfb9      	ittee	lt
 800cd68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd6c:	9303      	strlt	r3, [sp, #12]
 800cd6e:	2300      	movge	r3, #0
 800cd70:	6033      	strge	r3, [r6, #0]
 800cd72:	9f03      	ldr	r7, [sp, #12]
 800cd74:	4b98      	ldr	r3, [pc, #608]	@ (800cfd8 <_dtoa_r+0x2d0>)
 800cd76:	bfbc      	itt	lt
 800cd78:	2201      	movlt	r2, #1
 800cd7a:	6032      	strlt	r2, [r6, #0]
 800cd7c:	43bb      	bics	r3, r7
 800cd7e:	d112      	bne.n	800cda6 <_dtoa_r+0x9e>
 800cd80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd8c:	4323      	orrs	r3, r4
 800cd8e:	f000 854d 	beq.w	800d82c <_dtoa_r+0xb24>
 800cd92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cfec <_dtoa_r+0x2e4>
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 854f 	beq.w	800d83c <_dtoa_r+0xb34>
 800cd9e:	f10a 0303 	add.w	r3, sl, #3
 800cda2:	f000 bd49 	b.w	800d838 <_dtoa_r+0xb30>
 800cda6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	ec51 0b17 	vmov	r0, r1, d7
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cdb6:	f7f3 fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdba:	4680      	mov	r8, r0
 800cdbc:	b158      	cbz	r0, 800cdd6 <_dtoa_r+0xce>
 800cdbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	6013      	str	r3, [r2, #0]
 800cdc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cdc6:	b113      	cbz	r3, 800cdce <_dtoa_r+0xc6>
 800cdc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cdca:	4b84      	ldr	r3, [pc, #528]	@ (800cfdc <_dtoa_r+0x2d4>)
 800cdcc:	6013      	str	r3, [r2, #0]
 800cdce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cff0 <_dtoa_r+0x2e8>
 800cdd2:	f000 bd33 	b.w	800d83c <_dtoa_r+0xb34>
 800cdd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cdda:	aa16      	add	r2, sp, #88	@ 0x58
 800cddc:	a917      	add	r1, sp, #92	@ 0x5c
 800cdde:	4658      	mov	r0, fp
 800cde0:	f001 fa3a 	bl	800e258 <__d2b>
 800cde4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cde8:	4681      	mov	r9, r0
 800cdea:	2e00      	cmp	r6, #0
 800cdec:	d077      	beq.n	800cede <_dtoa_r+0x1d6>
 800cdee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdf0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cdf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ce00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ce04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ce08:	4619      	mov	r1, r3
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4b74      	ldr	r3, [pc, #464]	@ (800cfe0 <_dtoa_r+0x2d8>)
 800ce0e:	f7f3 fa3b 	bl	8000288 <__aeabi_dsub>
 800ce12:	a369      	add	r3, pc, #420	@ (adr r3, 800cfb8 <_dtoa_r+0x2b0>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fbee 	bl	80005f8 <__aeabi_dmul>
 800ce1c:	a368      	add	r3, pc, #416	@ (adr r3, 800cfc0 <_dtoa_r+0x2b8>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	f7f3 fa33 	bl	800028c <__adddf3>
 800ce26:	4604      	mov	r4, r0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	f7f3 fb7a 	bl	8000524 <__aeabi_i2d>
 800ce30:	a365      	add	r3, pc, #404	@ (adr r3, 800cfc8 <_dtoa_r+0x2c0>)
 800ce32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce36:	f7f3 fbdf 	bl	80005f8 <__aeabi_dmul>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	4620      	mov	r0, r4
 800ce40:	4629      	mov	r1, r5
 800ce42:	f7f3 fa23 	bl	800028c <__adddf3>
 800ce46:	4604      	mov	r4, r0
 800ce48:	460d      	mov	r5, r1
 800ce4a:	f7f3 fe85 	bl	8000b58 <__aeabi_d2iz>
 800ce4e:	2200      	movs	r2, #0
 800ce50:	4607      	mov	r7, r0
 800ce52:	2300      	movs	r3, #0
 800ce54:	4620      	mov	r0, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	f7f3 fe40 	bl	8000adc <__aeabi_dcmplt>
 800ce5c:	b140      	cbz	r0, 800ce70 <_dtoa_r+0x168>
 800ce5e:	4638      	mov	r0, r7
 800ce60:	f7f3 fb60 	bl	8000524 <__aeabi_i2d>
 800ce64:	4622      	mov	r2, r4
 800ce66:	462b      	mov	r3, r5
 800ce68:	f7f3 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce6c:	b900      	cbnz	r0, 800ce70 <_dtoa_r+0x168>
 800ce6e:	3f01      	subs	r7, #1
 800ce70:	2f16      	cmp	r7, #22
 800ce72:	d851      	bhi.n	800cf18 <_dtoa_r+0x210>
 800ce74:	4b5b      	ldr	r3, [pc, #364]	@ (800cfe4 <_dtoa_r+0x2dc>)
 800ce76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce82:	f7f3 fe2b 	bl	8000adc <__aeabi_dcmplt>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d048      	beq.n	800cf1c <_dtoa_r+0x214>
 800ce8a:	3f01      	subs	r7, #1
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce92:	1b9b      	subs	r3, r3, r6
 800ce94:	1e5a      	subs	r2, r3, #1
 800ce96:	bf44      	itt	mi
 800ce98:	f1c3 0801 	rsbmi	r8, r3, #1
 800ce9c:	2300      	movmi	r3, #0
 800ce9e:	9208      	str	r2, [sp, #32]
 800cea0:	bf54      	ite	pl
 800cea2:	f04f 0800 	movpl.w	r8, #0
 800cea6:	9308      	strmi	r3, [sp, #32]
 800cea8:	2f00      	cmp	r7, #0
 800ceaa:	db39      	blt.n	800cf20 <_dtoa_r+0x218>
 800ceac:	9b08      	ldr	r3, [sp, #32]
 800ceae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ceb0:	443b      	add	r3, r7
 800ceb2:	9308      	str	r3, [sp, #32]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ceb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceba:	2b09      	cmp	r3, #9
 800cebc:	d864      	bhi.n	800cf88 <_dtoa_r+0x280>
 800cebe:	2b05      	cmp	r3, #5
 800cec0:	bfc4      	itt	gt
 800cec2:	3b04      	subgt	r3, #4
 800cec4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec8:	f1a3 0302 	sub.w	r3, r3, #2
 800cecc:	bfcc      	ite	gt
 800cece:	2400      	movgt	r4, #0
 800ced0:	2401      	movle	r4, #1
 800ced2:	2b03      	cmp	r3, #3
 800ced4:	d863      	bhi.n	800cf9e <_dtoa_r+0x296>
 800ced6:	e8df f003 	tbb	[pc, r3]
 800ceda:	372a      	.short	0x372a
 800cedc:	5535      	.short	0x5535
 800cede:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cee2:	441e      	add	r6, r3
 800cee4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cee8:	2b20      	cmp	r3, #32
 800ceea:	bfc1      	itttt	gt
 800ceec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cef0:	409f      	lslgt	r7, r3
 800cef2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cef6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cefa:	bfd6      	itet	le
 800cefc:	f1c3 0320 	rsble	r3, r3, #32
 800cf00:	ea47 0003 	orrgt.w	r0, r7, r3
 800cf04:	fa04 f003 	lslle.w	r0, r4, r3
 800cf08:	f7f3 fafc 	bl	8000504 <__aeabi_ui2d>
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cf12:	3e01      	subs	r6, #1
 800cf14:	9214      	str	r2, [sp, #80]	@ 0x50
 800cf16:	e777      	b.n	800ce08 <_dtoa_r+0x100>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e7b8      	b.n	800ce8e <_dtoa_r+0x186>
 800cf1c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cf1e:	e7b7      	b.n	800ce90 <_dtoa_r+0x188>
 800cf20:	427b      	negs	r3, r7
 800cf22:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf24:	2300      	movs	r3, #0
 800cf26:	eba8 0807 	sub.w	r8, r8, r7
 800cf2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf2c:	e7c4      	b.n	800ceb8 <_dtoa_r+0x1b0>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	dc35      	bgt.n	800cfa4 <_dtoa_r+0x29c>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	9300      	str	r3, [sp, #0]
 800cf3c:	9307      	str	r3, [sp, #28]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf42:	e00b      	b.n	800cf5c <_dtoa_r+0x254>
 800cf44:	2301      	movs	r3, #1
 800cf46:	e7f3      	b.n	800cf30 <_dtoa_r+0x228>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf4e:	18fb      	adds	r3, r7, r3
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	3301      	adds	r3, #1
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	9307      	str	r3, [sp, #28]
 800cf58:	bfb8      	it	lt
 800cf5a:	2301      	movlt	r3, #1
 800cf5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cf60:	2100      	movs	r1, #0
 800cf62:	2204      	movs	r2, #4
 800cf64:	f102 0514 	add.w	r5, r2, #20
 800cf68:	429d      	cmp	r5, r3
 800cf6a:	d91f      	bls.n	800cfac <_dtoa_r+0x2a4>
 800cf6c:	6041      	str	r1, [r0, #4]
 800cf6e:	4658      	mov	r0, fp
 800cf70:	f000 fd8e 	bl	800da90 <_Balloc>
 800cf74:	4682      	mov	sl, r0
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d13c      	bne.n	800cff4 <_dtoa_r+0x2ec>
 800cf7a:	4b1b      	ldr	r3, [pc, #108]	@ (800cfe8 <_dtoa_r+0x2e0>)
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf82:	e6d8      	b.n	800cd36 <_dtoa_r+0x2e>
 800cf84:	2301      	movs	r3, #1
 800cf86:	e7e0      	b.n	800cf4a <_dtoa_r+0x242>
 800cf88:	2401      	movs	r4, #1
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf90:	f04f 33ff 	mov.w	r3, #4294967295
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	9307      	str	r3, [sp, #28]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2312      	movs	r3, #18
 800cf9c:	e7d0      	b.n	800cf40 <_dtoa_r+0x238>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfa2:	e7f5      	b.n	800cf90 <_dtoa_r+0x288>
 800cfa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	9307      	str	r3, [sp, #28]
 800cfaa:	e7d7      	b.n	800cf5c <_dtoa_r+0x254>
 800cfac:	3101      	adds	r1, #1
 800cfae:	0052      	lsls	r2, r2, #1
 800cfb0:	e7d8      	b.n	800cf64 <_dtoa_r+0x25c>
 800cfb2:	bf00      	nop
 800cfb4:	f3af 8000 	nop.w
 800cfb8:	636f4361 	.word	0x636f4361
 800cfbc:	3fd287a7 	.word	0x3fd287a7
 800cfc0:	8b60c8b3 	.word	0x8b60c8b3
 800cfc4:	3fc68a28 	.word	0x3fc68a28
 800cfc8:	509f79fb 	.word	0x509f79fb
 800cfcc:	3fd34413 	.word	0x3fd34413
 800cfd0:	08011e42 	.word	0x08011e42
 800cfd4:	08011e59 	.word	0x08011e59
 800cfd8:	7ff00000 	.word	0x7ff00000
 800cfdc:	08011e0d 	.word	0x08011e0d
 800cfe0:	3ff80000 	.word	0x3ff80000
 800cfe4:	08011f50 	.word	0x08011f50
 800cfe8:	08011eb1 	.word	0x08011eb1
 800cfec:	08011e3e 	.word	0x08011e3e
 800cff0:	08011e0c 	.word	0x08011e0c
 800cff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cff8:	6018      	str	r0, [r3, #0]
 800cffa:	9b07      	ldr	r3, [sp, #28]
 800cffc:	2b0e      	cmp	r3, #14
 800cffe:	f200 80a4 	bhi.w	800d14a <_dtoa_r+0x442>
 800d002:	2c00      	cmp	r4, #0
 800d004:	f000 80a1 	beq.w	800d14a <_dtoa_r+0x442>
 800d008:	2f00      	cmp	r7, #0
 800d00a:	dd33      	ble.n	800d074 <_dtoa_r+0x36c>
 800d00c:	4bad      	ldr	r3, [pc, #692]	@ (800d2c4 <_dtoa_r+0x5bc>)
 800d00e:	f007 020f 	and.w	r2, r7, #15
 800d012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d016:	ed93 7b00 	vldr	d7, [r3]
 800d01a:	05f8      	lsls	r0, r7, #23
 800d01c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d020:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d024:	d516      	bpl.n	800d054 <_dtoa_r+0x34c>
 800d026:	4ba8      	ldr	r3, [pc, #672]	@ (800d2c8 <_dtoa_r+0x5c0>)
 800d028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d02c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d030:	f7f3 fc0c 	bl	800084c <__aeabi_ddiv>
 800d034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d038:	f004 040f 	and.w	r4, r4, #15
 800d03c:	2603      	movs	r6, #3
 800d03e:	4da2      	ldr	r5, [pc, #648]	@ (800d2c8 <_dtoa_r+0x5c0>)
 800d040:	b954      	cbnz	r4, 800d058 <_dtoa_r+0x350>
 800d042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d04a:	f7f3 fbff 	bl	800084c <__aeabi_ddiv>
 800d04e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d052:	e028      	b.n	800d0a6 <_dtoa_r+0x39e>
 800d054:	2602      	movs	r6, #2
 800d056:	e7f2      	b.n	800d03e <_dtoa_r+0x336>
 800d058:	07e1      	lsls	r1, r4, #31
 800d05a:	d508      	bpl.n	800d06e <_dtoa_r+0x366>
 800d05c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d060:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d064:	f7f3 fac8 	bl	80005f8 <__aeabi_dmul>
 800d068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d06c:	3601      	adds	r6, #1
 800d06e:	1064      	asrs	r4, r4, #1
 800d070:	3508      	adds	r5, #8
 800d072:	e7e5      	b.n	800d040 <_dtoa_r+0x338>
 800d074:	f000 80d2 	beq.w	800d21c <_dtoa_r+0x514>
 800d078:	427c      	negs	r4, r7
 800d07a:	4b92      	ldr	r3, [pc, #584]	@ (800d2c4 <_dtoa_r+0x5bc>)
 800d07c:	4d92      	ldr	r5, [pc, #584]	@ (800d2c8 <_dtoa_r+0x5c0>)
 800d07e:	f004 020f 	and.w	r2, r4, #15
 800d082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d08e:	f7f3 fab3 	bl	80005f8 <__aeabi_dmul>
 800d092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d096:	1124      	asrs	r4, r4, #4
 800d098:	2300      	movs	r3, #0
 800d09a:	2602      	movs	r6, #2
 800d09c:	2c00      	cmp	r4, #0
 800d09e:	f040 80b2 	bne.w	800d206 <_dtoa_r+0x4fe>
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1d3      	bne.n	800d04e <_dtoa_r+0x346>
 800d0a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d0a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f000 80b7 	beq.w	800d220 <_dtoa_r+0x518>
 800d0b2:	4b86      	ldr	r3, [pc, #536]	@ (800d2cc <_dtoa_r+0x5c4>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7f3 fd0f 	bl	8000adc <__aeabi_dcmplt>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	f000 80ae 	beq.w	800d220 <_dtoa_r+0x518>
 800d0c4:	9b07      	ldr	r3, [sp, #28]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f000 80aa 	beq.w	800d220 <_dtoa_r+0x518>
 800d0cc:	9b00      	ldr	r3, [sp, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	dd37      	ble.n	800d142 <_dtoa_r+0x43a>
 800d0d2:	1e7b      	subs	r3, r7, #1
 800d0d4:	9304      	str	r3, [sp, #16]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	4b7d      	ldr	r3, [pc, #500]	@ (800d2d0 <_dtoa_r+0x5c8>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	4629      	mov	r1, r5
 800d0de:	f7f3 fa8b 	bl	80005f8 <__aeabi_dmul>
 800d0e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0e6:	9c00      	ldr	r4, [sp, #0]
 800d0e8:	3601      	adds	r6, #1
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7f3 fa1a 	bl	8000524 <__aeabi_i2d>
 800d0f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0f4:	f7f3 fa80 	bl	80005f8 <__aeabi_dmul>
 800d0f8:	4b76      	ldr	r3, [pc, #472]	@ (800d2d4 <_dtoa_r+0x5cc>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f7f3 f8c6 	bl	800028c <__adddf3>
 800d100:	4605      	mov	r5, r0
 800d102:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d106:	2c00      	cmp	r4, #0
 800d108:	f040 808d 	bne.w	800d226 <_dtoa_r+0x51e>
 800d10c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d110:	4b71      	ldr	r3, [pc, #452]	@ (800d2d8 <_dtoa_r+0x5d0>)
 800d112:	2200      	movs	r2, #0
 800d114:	f7f3 f8b8 	bl	8000288 <__aeabi_dsub>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d120:	462a      	mov	r2, r5
 800d122:	4633      	mov	r3, r6
 800d124:	f7f3 fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 800d128:	2800      	cmp	r0, #0
 800d12a:	f040 828b 	bne.w	800d644 <_dtoa_r+0x93c>
 800d12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d132:	462a      	mov	r2, r5
 800d134:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d138:	f7f3 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	f040 8128 	bne.w	800d392 <_dtoa_r+0x68a>
 800d142:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d146:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d14a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f2c0 815a 	blt.w	800d406 <_dtoa_r+0x6fe>
 800d152:	2f0e      	cmp	r7, #14
 800d154:	f300 8157 	bgt.w	800d406 <_dtoa_r+0x6fe>
 800d158:	4b5a      	ldr	r3, [pc, #360]	@ (800d2c4 <_dtoa_r+0x5bc>)
 800d15a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d15e:	ed93 7b00 	vldr	d7, [r3]
 800d162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d164:	2b00      	cmp	r3, #0
 800d166:	ed8d 7b00 	vstr	d7, [sp]
 800d16a:	da03      	bge.n	800d174 <_dtoa_r+0x46c>
 800d16c:	9b07      	ldr	r3, [sp, #28]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f340 8101 	ble.w	800d376 <_dtoa_r+0x66e>
 800d174:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d178:	4656      	mov	r6, sl
 800d17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d17e:	4620      	mov	r0, r4
 800d180:	4629      	mov	r1, r5
 800d182:	f7f3 fb63 	bl	800084c <__aeabi_ddiv>
 800d186:	f7f3 fce7 	bl	8000b58 <__aeabi_d2iz>
 800d18a:	4680      	mov	r8, r0
 800d18c:	f7f3 f9ca 	bl	8000524 <__aeabi_i2d>
 800d190:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d194:	f7f3 fa30 	bl	80005f8 <__aeabi_dmul>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4620      	mov	r0, r4
 800d19e:	4629      	mov	r1, r5
 800d1a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d1a4:	f7f3 f870 	bl	8000288 <__aeabi_dsub>
 800d1a8:	f806 4b01 	strb.w	r4, [r6], #1
 800d1ac:	9d07      	ldr	r5, [sp, #28]
 800d1ae:	eba6 040a 	sub.w	r4, r6, sl
 800d1b2:	42a5      	cmp	r5, r4
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	f040 8117 	bne.w	800d3ea <_dtoa_r+0x6e2>
 800d1bc:	f7f3 f866 	bl	800028c <__adddf3>
 800d1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	460d      	mov	r5, r1
 800d1c8:	f7f3 fca6 	bl	8000b18 <__aeabi_dcmpgt>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f040 80f9 	bne.w	800d3c4 <_dtoa_r+0x6bc>
 800d1d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	4629      	mov	r1, r5
 800d1da:	f7f3 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1de:	b118      	cbz	r0, 800d1e8 <_dtoa_r+0x4e0>
 800d1e0:	f018 0f01 	tst.w	r8, #1
 800d1e4:	f040 80ee 	bne.w	800d3c4 <_dtoa_r+0x6bc>
 800d1e8:	4649      	mov	r1, r9
 800d1ea:	4658      	mov	r0, fp
 800d1ec:	f000 fc90 	bl	800db10 <_Bfree>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	7033      	strb	r3, [r6, #0]
 800d1f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1f6:	3701      	adds	r7, #1
 800d1f8:	601f      	str	r7, [r3, #0]
 800d1fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 831d 	beq.w	800d83c <_dtoa_r+0xb34>
 800d202:	601e      	str	r6, [r3, #0]
 800d204:	e31a      	b.n	800d83c <_dtoa_r+0xb34>
 800d206:	07e2      	lsls	r2, r4, #31
 800d208:	d505      	bpl.n	800d216 <_dtoa_r+0x50e>
 800d20a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d20e:	f7f3 f9f3 	bl	80005f8 <__aeabi_dmul>
 800d212:	3601      	adds	r6, #1
 800d214:	2301      	movs	r3, #1
 800d216:	1064      	asrs	r4, r4, #1
 800d218:	3508      	adds	r5, #8
 800d21a:	e73f      	b.n	800d09c <_dtoa_r+0x394>
 800d21c:	2602      	movs	r6, #2
 800d21e:	e742      	b.n	800d0a6 <_dtoa_r+0x39e>
 800d220:	9c07      	ldr	r4, [sp, #28]
 800d222:	9704      	str	r7, [sp, #16]
 800d224:	e761      	b.n	800d0ea <_dtoa_r+0x3e2>
 800d226:	4b27      	ldr	r3, [pc, #156]	@ (800d2c4 <_dtoa_r+0x5bc>)
 800d228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d22a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d22e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d232:	4454      	add	r4, sl
 800d234:	2900      	cmp	r1, #0
 800d236:	d053      	beq.n	800d2e0 <_dtoa_r+0x5d8>
 800d238:	4928      	ldr	r1, [pc, #160]	@ (800d2dc <_dtoa_r+0x5d4>)
 800d23a:	2000      	movs	r0, #0
 800d23c:	f7f3 fb06 	bl	800084c <__aeabi_ddiv>
 800d240:	4633      	mov	r3, r6
 800d242:	462a      	mov	r2, r5
 800d244:	f7f3 f820 	bl	8000288 <__aeabi_dsub>
 800d248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d24c:	4656      	mov	r6, sl
 800d24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d252:	f7f3 fc81 	bl	8000b58 <__aeabi_d2iz>
 800d256:	4605      	mov	r5, r0
 800d258:	f7f3 f964 	bl	8000524 <__aeabi_i2d>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d264:	f7f3 f810 	bl	8000288 <__aeabi_dsub>
 800d268:	3530      	adds	r5, #48	@ 0x30
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d272:	f806 5b01 	strb.w	r5, [r6], #1
 800d276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d27a:	f7f3 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d171      	bne.n	800d366 <_dtoa_r+0x65e>
 800d282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d286:	4911      	ldr	r1, [pc, #68]	@ (800d2cc <_dtoa_r+0x5c4>)
 800d288:	2000      	movs	r0, #0
 800d28a:	f7f2 fffd 	bl	8000288 <__aeabi_dsub>
 800d28e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d292:	f7f3 fc23 	bl	8000adc <__aeabi_dcmplt>
 800d296:	2800      	cmp	r0, #0
 800d298:	f040 8095 	bne.w	800d3c6 <_dtoa_r+0x6be>
 800d29c:	42a6      	cmp	r6, r4
 800d29e:	f43f af50 	beq.w	800d142 <_dtoa_r+0x43a>
 800d2a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d0 <_dtoa_r+0x5c8>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f7f3 f9a5 	bl	80005f8 <__aeabi_dmul>
 800d2ae:	4b08      	ldr	r3, [pc, #32]	@ (800d2d0 <_dtoa_r+0x5c8>)
 800d2b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ba:	f7f3 f99d 	bl	80005f8 <__aeabi_dmul>
 800d2be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2c2:	e7c4      	b.n	800d24e <_dtoa_r+0x546>
 800d2c4:	08011f50 	.word	0x08011f50
 800d2c8:	08011f28 	.word	0x08011f28
 800d2cc:	3ff00000 	.word	0x3ff00000
 800d2d0:	40240000 	.word	0x40240000
 800d2d4:	401c0000 	.word	0x401c0000
 800d2d8:	40140000 	.word	0x40140000
 800d2dc:	3fe00000 	.word	0x3fe00000
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	f7f3 f988 	bl	80005f8 <__aeabi_dmul>
 800d2e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800d2ee:	4656      	mov	r6, sl
 800d2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2f4:	f7f3 fc30 	bl	8000b58 <__aeabi_d2iz>
 800d2f8:	4605      	mov	r5, r0
 800d2fa:	f7f3 f913 	bl	8000524 <__aeabi_i2d>
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d306:	f7f2 ffbf 	bl	8000288 <__aeabi_dsub>
 800d30a:	3530      	adds	r5, #48	@ 0x30
 800d30c:	f806 5b01 	strb.w	r5, [r6], #1
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	42a6      	cmp	r6, r4
 800d316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d31a:	f04f 0200 	mov.w	r2, #0
 800d31e:	d124      	bne.n	800d36a <_dtoa_r+0x662>
 800d320:	4bac      	ldr	r3, [pc, #688]	@ (800d5d4 <_dtoa_r+0x8cc>)
 800d322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d326:	f7f2 ffb1 	bl	800028c <__adddf3>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d332:	f7f3 fbf1 	bl	8000b18 <__aeabi_dcmpgt>
 800d336:	2800      	cmp	r0, #0
 800d338:	d145      	bne.n	800d3c6 <_dtoa_r+0x6be>
 800d33a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d33e:	49a5      	ldr	r1, [pc, #660]	@ (800d5d4 <_dtoa_r+0x8cc>)
 800d340:	2000      	movs	r0, #0
 800d342:	f7f2 ffa1 	bl	8000288 <__aeabi_dsub>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d34e:	f7f3 fbc5 	bl	8000adc <__aeabi_dcmplt>
 800d352:	2800      	cmp	r0, #0
 800d354:	f43f aef5 	beq.w	800d142 <_dtoa_r+0x43a>
 800d358:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d35a:	1e73      	subs	r3, r6, #1
 800d35c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d35e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d362:	2b30      	cmp	r3, #48	@ 0x30
 800d364:	d0f8      	beq.n	800d358 <_dtoa_r+0x650>
 800d366:	9f04      	ldr	r7, [sp, #16]
 800d368:	e73e      	b.n	800d1e8 <_dtoa_r+0x4e0>
 800d36a:	4b9b      	ldr	r3, [pc, #620]	@ (800d5d8 <_dtoa_r+0x8d0>)
 800d36c:	f7f3 f944 	bl	80005f8 <__aeabi_dmul>
 800d370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d374:	e7bc      	b.n	800d2f0 <_dtoa_r+0x5e8>
 800d376:	d10c      	bne.n	800d392 <_dtoa_r+0x68a>
 800d378:	4b98      	ldr	r3, [pc, #608]	@ (800d5dc <_dtoa_r+0x8d4>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d380:	f7f3 f93a 	bl	80005f8 <__aeabi_dmul>
 800d384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d388:	f7f3 fbbc 	bl	8000b04 <__aeabi_dcmpge>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	f000 8157 	beq.w	800d640 <_dtoa_r+0x938>
 800d392:	2400      	movs	r4, #0
 800d394:	4625      	mov	r5, r4
 800d396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d398:	43db      	mvns	r3, r3
 800d39a:	9304      	str	r3, [sp, #16]
 800d39c:	4656      	mov	r6, sl
 800d39e:	2700      	movs	r7, #0
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	4658      	mov	r0, fp
 800d3a4:	f000 fbb4 	bl	800db10 <_Bfree>
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	d0dc      	beq.n	800d366 <_dtoa_r+0x65e>
 800d3ac:	b12f      	cbz	r7, 800d3ba <_dtoa_r+0x6b2>
 800d3ae:	42af      	cmp	r7, r5
 800d3b0:	d003      	beq.n	800d3ba <_dtoa_r+0x6b2>
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	4658      	mov	r0, fp
 800d3b6:	f000 fbab 	bl	800db10 <_Bfree>
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4658      	mov	r0, fp
 800d3be:	f000 fba7 	bl	800db10 <_Bfree>
 800d3c2:	e7d0      	b.n	800d366 <_dtoa_r+0x65e>
 800d3c4:	9704      	str	r7, [sp, #16]
 800d3c6:	4633      	mov	r3, r6
 800d3c8:	461e      	mov	r6, r3
 800d3ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3ce:	2a39      	cmp	r2, #57	@ 0x39
 800d3d0:	d107      	bne.n	800d3e2 <_dtoa_r+0x6da>
 800d3d2:	459a      	cmp	sl, r3
 800d3d4:	d1f8      	bne.n	800d3c8 <_dtoa_r+0x6c0>
 800d3d6:	9a04      	ldr	r2, [sp, #16]
 800d3d8:	3201      	adds	r2, #1
 800d3da:	9204      	str	r2, [sp, #16]
 800d3dc:	2230      	movs	r2, #48	@ 0x30
 800d3de:	f88a 2000 	strb.w	r2, [sl]
 800d3e2:	781a      	ldrb	r2, [r3, #0]
 800d3e4:	3201      	adds	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
 800d3e8:	e7bd      	b.n	800d366 <_dtoa_r+0x65e>
 800d3ea:	4b7b      	ldr	r3, [pc, #492]	@ (800d5d8 <_dtoa_r+0x8d0>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f7f3 f903 	bl	80005f8 <__aeabi_dmul>
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	460d      	mov	r5, r1
 800d3fa:	f7f3 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	f43f aebb 	beq.w	800d17a <_dtoa_r+0x472>
 800d404:	e6f0      	b.n	800d1e8 <_dtoa_r+0x4e0>
 800d406:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d408:	2a00      	cmp	r2, #0
 800d40a:	f000 80db 	beq.w	800d5c4 <_dtoa_r+0x8bc>
 800d40e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d410:	2a01      	cmp	r2, #1
 800d412:	f300 80bf 	bgt.w	800d594 <_dtoa_r+0x88c>
 800d416:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d418:	2a00      	cmp	r2, #0
 800d41a:	f000 80b7 	beq.w	800d58c <_dtoa_r+0x884>
 800d41e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d422:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d424:	4646      	mov	r6, r8
 800d426:	9a08      	ldr	r2, [sp, #32]
 800d428:	2101      	movs	r1, #1
 800d42a:	441a      	add	r2, r3
 800d42c:	4658      	mov	r0, fp
 800d42e:	4498      	add	r8, r3
 800d430:	9208      	str	r2, [sp, #32]
 800d432:	f000 fc6b 	bl	800dd0c <__i2b>
 800d436:	4605      	mov	r5, r0
 800d438:	b15e      	cbz	r6, 800d452 <_dtoa_r+0x74a>
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dd08      	ble.n	800d452 <_dtoa_r+0x74a>
 800d440:	42b3      	cmp	r3, r6
 800d442:	9a08      	ldr	r2, [sp, #32]
 800d444:	bfa8      	it	ge
 800d446:	4633      	movge	r3, r6
 800d448:	eba8 0803 	sub.w	r8, r8, r3
 800d44c:	1af6      	subs	r6, r6, r3
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	9308      	str	r3, [sp, #32]
 800d452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d454:	b1f3      	cbz	r3, 800d494 <_dtoa_r+0x78c>
 800d456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 80b7 	beq.w	800d5cc <_dtoa_r+0x8c4>
 800d45e:	b18c      	cbz	r4, 800d484 <_dtoa_r+0x77c>
 800d460:	4629      	mov	r1, r5
 800d462:	4622      	mov	r2, r4
 800d464:	4658      	mov	r0, fp
 800d466:	f000 fd11 	bl	800de8c <__pow5mult>
 800d46a:	464a      	mov	r2, r9
 800d46c:	4601      	mov	r1, r0
 800d46e:	4605      	mov	r5, r0
 800d470:	4658      	mov	r0, fp
 800d472:	f000 fc61 	bl	800dd38 <__multiply>
 800d476:	4649      	mov	r1, r9
 800d478:	9004      	str	r0, [sp, #16]
 800d47a:	4658      	mov	r0, fp
 800d47c:	f000 fb48 	bl	800db10 <_Bfree>
 800d480:	9b04      	ldr	r3, [sp, #16]
 800d482:	4699      	mov	r9, r3
 800d484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d486:	1b1a      	subs	r2, r3, r4
 800d488:	d004      	beq.n	800d494 <_dtoa_r+0x78c>
 800d48a:	4649      	mov	r1, r9
 800d48c:	4658      	mov	r0, fp
 800d48e:	f000 fcfd 	bl	800de8c <__pow5mult>
 800d492:	4681      	mov	r9, r0
 800d494:	2101      	movs	r1, #1
 800d496:	4658      	mov	r0, fp
 800d498:	f000 fc38 	bl	800dd0c <__i2b>
 800d49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d49e:	4604      	mov	r4, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 81cf 	beq.w	800d844 <_dtoa_r+0xb3c>
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	4601      	mov	r1, r0
 800d4aa:	4658      	mov	r0, fp
 800d4ac:	f000 fcee 	bl	800de8c <__pow5mult>
 800d4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	f300 8095 	bgt.w	800d5e4 <_dtoa_r+0x8dc>
 800d4ba:	9b02      	ldr	r3, [sp, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f040 8087 	bne.w	800d5d0 <_dtoa_r+0x8c8>
 800d4c2:	9b03      	ldr	r3, [sp, #12]
 800d4c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f040 8089 	bne.w	800d5e0 <_dtoa_r+0x8d8>
 800d4ce:	9b03      	ldr	r3, [sp, #12]
 800d4d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d4d4:	0d1b      	lsrs	r3, r3, #20
 800d4d6:	051b      	lsls	r3, r3, #20
 800d4d8:	b12b      	cbz	r3, 800d4e6 <_dtoa_r+0x7de>
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	9308      	str	r3, [sp, #32]
 800d4e0:	f108 0801 	add.w	r8, r8, #1
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 81b0 	beq.w	800d850 <_dtoa_r+0xb48>
 800d4f0:	6923      	ldr	r3, [r4, #16]
 800d4f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4f6:	6918      	ldr	r0, [r3, #16]
 800d4f8:	f000 fbbc 	bl	800dc74 <__hi0bits>
 800d4fc:	f1c0 0020 	rsb	r0, r0, #32
 800d500:	9b08      	ldr	r3, [sp, #32]
 800d502:	4418      	add	r0, r3
 800d504:	f010 001f 	ands.w	r0, r0, #31
 800d508:	d077      	beq.n	800d5fa <_dtoa_r+0x8f2>
 800d50a:	f1c0 0320 	rsb	r3, r0, #32
 800d50e:	2b04      	cmp	r3, #4
 800d510:	dd6b      	ble.n	800d5ea <_dtoa_r+0x8e2>
 800d512:	9b08      	ldr	r3, [sp, #32]
 800d514:	f1c0 001c 	rsb	r0, r0, #28
 800d518:	4403      	add	r3, r0
 800d51a:	4480      	add	r8, r0
 800d51c:	4406      	add	r6, r0
 800d51e:	9308      	str	r3, [sp, #32]
 800d520:	f1b8 0f00 	cmp.w	r8, #0
 800d524:	dd05      	ble.n	800d532 <_dtoa_r+0x82a>
 800d526:	4649      	mov	r1, r9
 800d528:	4642      	mov	r2, r8
 800d52a:	4658      	mov	r0, fp
 800d52c:	f000 fd08 	bl	800df40 <__lshift>
 800d530:	4681      	mov	r9, r0
 800d532:	9b08      	ldr	r3, [sp, #32]
 800d534:	2b00      	cmp	r3, #0
 800d536:	dd05      	ble.n	800d544 <_dtoa_r+0x83c>
 800d538:	4621      	mov	r1, r4
 800d53a:	461a      	mov	r2, r3
 800d53c:	4658      	mov	r0, fp
 800d53e:	f000 fcff 	bl	800df40 <__lshift>
 800d542:	4604      	mov	r4, r0
 800d544:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d546:	2b00      	cmp	r3, #0
 800d548:	d059      	beq.n	800d5fe <_dtoa_r+0x8f6>
 800d54a:	4621      	mov	r1, r4
 800d54c:	4648      	mov	r0, r9
 800d54e:	f000 fd63 	bl	800e018 <__mcmp>
 800d552:	2800      	cmp	r0, #0
 800d554:	da53      	bge.n	800d5fe <_dtoa_r+0x8f6>
 800d556:	1e7b      	subs	r3, r7, #1
 800d558:	9304      	str	r3, [sp, #16]
 800d55a:	4649      	mov	r1, r9
 800d55c:	2300      	movs	r3, #0
 800d55e:	220a      	movs	r2, #10
 800d560:	4658      	mov	r0, fp
 800d562:	f000 faf7 	bl	800db54 <__multadd>
 800d566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d568:	4681      	mov	r9, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f000 8172 	beq.w	800d854 <_dtoa_r+0xb4c>
 800d570:	2300      	movs	r3, #0
 800d572:	4629      	mov	r1, r5
 800d574:	220a      	movs	r2, #10
 800d576:	4658      	mov	r0, fp
 800d578:	f000 faec 	bl	800db54 <__multadd>
 800d57c:	9b00      	ldr	r3, [sp, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	4605      	mov	r5, r0
 800d582:	dc67      	bgt.n	800d654 <_dtoa_r+0x94c>
 800d584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d586:	2b02      	cmp	r3, #2
 800d588:	dc41      	bgt.n	800d60e <_dtoa_r+0x906>
 800d58a:	e063      	b.n	800d654 <_dtoa_r+0x94c>
 800d58c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d58e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d592:	e746      	b.n	800d422 <_dtoa_r+0x71a>
 800d594:	9b07      	ldr	r3, [sp, #28]
 800d596:	1e5c      	subs	r4, r3, #1
 800d598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d59a:	42a3      	cmp	r3, r4
 800d59c:	bfbf      	itttt	lt
 800d59e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d5a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d5a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d5a4:	1ae3      	sublt	r3, r4, r3
 800d5a6:	bfb4      	ite	lt
 800d5a8:	18d2      	addlt	r2, r2, r3
 800d5aa:	1b1c      	subge	r4, r3, r4
 800d5ac:	9b07      	ldr	r3, [sp, #28]
 800d5ae:	bfbc      	itt	lt
 800d5b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d5b2:	2400      	movlt	r4, #0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	bfb5      	itete	lt
 800d5b8:	eba8 0603 	sublt.w	r6, r8, r3
 800d5bc:	9b07      	ldrge	r3, [sp, #28]
 800d5be:	2300      	movlt	r3, #0
 800d5c0:	4646      	movge	r6, r8
 800d5c2:	e730      	b.n	800d426 <_dtoa_r+0x71e>
 800d5c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d5c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d5c8:	4646      	mov	r6, r8
 800d5ca:	e735      	b.n	800d438 <_dtoa_r+0x730>
 800d5cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5ce:	e75c      	b.n	800d48a <_dtoa_r+0x782>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	e788      	b.n	800d4e6 <_dtoa_r+0x7de>
 800d5d4:	3fe00000 	.word	0x3fe00000
 800d5d8:	40240000 	.word	0x40240000
 800d5dc:	40140000 	.word	0x40140000
 800d5e0:	9b02      	ldr	r3, [sp, #8]
 800d5e2:	e780      	b.n	800d4e6 <_dtoa_r+0x7de>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5e8:	e782      	b.n	800d4f0 <_dtoa_r+0x7e8>
 800d5ea:	d099      	beq.n	800d520 <_dtoa_r+0x818>
 800d5ec:	9a08      	ldr	r2, [sp, #32]
 800d5ee:	331c      	adds	r3, #28
 800d5f0:	441a      	add	r2, r3
 800d5f2:	4498      	add	r8, r3
 800d5f4:	441e      	add	r6, r3
 800d5f6:	9208      	str	r2, [sp, #32]
 800d5f8:	e792      	b.n	800d520 <_dtoa_r+0x818>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	e7f6      	b.n	800d5ec <_dtoa_r+0x8e4>
 800d5fe:	9b07      	ldr	r3, [sp, #28]
 800d600:	9704      	str	r7, [sp, #16]
 800d602:	2b00      	cmp	r3, #0
 800d604:	dc20      	bgt.n	800d648 <_dtoa_r+0x940>
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	dd1e      	ble.n	800d64c <_dtoa_r+0x944>
 800d60e:	9b00      	ldr	r3, [sp, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	f47f aec0 	bne.w	800d396 <_dtoa_r+0x68e>
 800d616:	4621      	mov	r1, r4
 800d618:	2205      	movs	r2, #5
 800d61a:	4658      	mov	r0, fp
 800d61c:	f000 fa9a 	bl	800db54 <__multadd>
 800d620:	4601      	mov	r1, r0
 800d622:	4604      	mov	r4, r0
 800d624:	4648      	mov	r0, r9
 800d626:	f000 fcf7 	bl	800e018 <__mcmp>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	f77f aeb3 	ble.w	800d396 <_dtoa_r+0x68e>
 800d630:	4656      	mov	r6, sl
 800d632:	2331      	movs	r3, #49	@ 0x31
 800d634:	f806 3b01 	strb.w	r3, [r6], #1
 800d638:	9b04      	ldr	r3, [sp, #16]
 800d63a:	3301      	adds	r3, #1
 800d63c:	9304      	str	r3, [sp, #16]
 800d63e:	e6ae      	b.n	800d39e <_dtoa_r+0x696>
 800d640:	9c07      	ldr	r4, [sp, #28]
 800d642:	9704      	str	r7, [sp, #16]
 800d644:	4625      	mov	r5, r4
 800d646:	e7f3      	b.n	800d630 <_dtoa_r+0x928>
 800d648:	9b07      	ldr	r3, [sp, #28]
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 8104 	beq.w	800d85c <_dtoa_r+0xb54>
 800d654:	2e00      	cmp	r6, #0
 800d656:	dd05      	ble.n	800d664 <_dtoa_r+0x95c>
 800d658:	4629      	mov	r1, r5
 800d65a:	4632      	mov	r2, r6
 800d65c:	4658      	mov	r0, fp
 800d65e:	f000 fc6f 	bl	800df40 <__lshift>
 800d662:	4605      	mov	r5, r0
 800d664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d666:	2b00      	cmp	r3, #0
 800d668:	d05a      	beq.n	800d720 <_dtoa_r+0xa18>
 800d66a:	6869      	ldr	r1, [r5, #4]
 800d66c:	4658      	mov	r0, fp
 800d66e:	f000 fa0f 	bl	800da90 <_Balloc>
 800d672:	4606      	mov	r6, r0
 800d674:	b928      	cbnz	r0, 800d682 <_dtoa_r+0x97a>
 800d676:	4b84      	ldr	r3, [pc, #528]	@ (800d888 <_dtoa_r+0xb80>)
 800d678:	4602      	mov	r2, r0
 800d67a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d67e:	f7ff bb5a 	b.w	800cd36 <_dtoa_r+0x2e>
 800d682:	692a      	ldr	r2, [r5, #16]
 800d684:	3202      	adds	r2, #2
 800d686:	0092      	lsls	r2, r2, #2
 800d688:	f105 010c 	add.w	r1, r5, #12
 800d68c:	300c      	adds	r0, #12
 800d68e:	f7ff fa9e 	bl	800cbce <memcpy>
 800d692:	2201      	movs	r2, #1
 800d694:	4631      	mov	r1, r6
 800d696:	4658      	mov	r0, fp
 800d698:	f000 fc52 	bl	800df40 <__lshift>
 800d69c:	f10a 0301 	add.w	r3, sl, #1
 800d6a0:	9307      	str	r3, [sp, #28]
 800d6a2:	9b00      	ldr	r3, [sp, #0]
 800d6a4:	4453      	add	r3, sl
 800d6a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6a8:	9b02      	ldr	r3, [sp, #8]
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	462f      	mov	r7, r5
 800d6b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	9b07      	ldr	r3, [sp, #28]
 800d6b6:	4621      	mov	r1, r4
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	4648      	mov	r0, r9
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	f7ff fa9b 	bl	800cbf8 <quorem>
 800d6c2:	4639      	mov	r1, r7
 800d6c4:	9002      	str	r0, [sp, #8]
 800d6c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d6ca:	4648      	mov	r0, r9
 800d6cc:	f000 fca4 	bl	800e018 <__mcmp>
 800d6d0:	462a      	mov	r2, r5
 800d6d2:	9008      	str	r0, [sp, #32]
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	4658      	mov	r0, fp
 800d6d8:	f000 fcba 	bl	800e050 <__mdiff>
 800d6dc:	68c2      	ldr	r2, [r0, #12]
 800d6de:	4606      	mov	r6, r0
 800d6e0:	bb02      	cbnz	r2, 800d724 <_dtoa_r+0xa1c>
 800d6e2:	4601      	mov	r1, r0
 800d6e4:	4648      	mov	r0, r9
 800d6e6:	f000 fc97 	bl	800e018 <__mcmp>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	4658      	mov	r0, fp
 800d6f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6f2:	f000 fa0d 	bl	800db10 <_Bfree>
 800d6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6fa:	9e07      	ldr	r6, [sp, #28]
 800d6fc:	ea43 0102 	orr.w	r1, r3, r2
 800d700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d702:	4319      	orrs	r1, r3
 800d704:	d110      	bne.n	800d728 <_dtoa_r+0xa20>
 800d706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d70a:	d029      	beq.n	800d760 <_dtoa_r+0xa58>
 800d70c:	9b08      	ldr	r3, [sp, #32]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	dd02      	ble.n	800d718 <_dtoa_r+0xa10>
 800d712:	9b02      	ldr	r3, [sp, #8]
 800d714:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d718:	9b00      	ldr	r3, [sp, #0]
 800d71a:	f883 8000 	strb.w	r8, [r3]
 800d71e:	e63f      	b.n	800d3a0 <_dtoa_r+0x698>
 800d720:	4628      	mov	r0, r5
 800d722:	e7bb      	b.n	800d69c <_dtoa_r+0x994>
 800d724:	2201      	movs	r2, #1
 800d726:	e7e1      	b.n	800d6ec <_dtoa_r+0x9e4>
 800d728:	9b08      	ldr	r3, [sp, #32]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	db04      	blt.n	800d738 <_dtoa_r+0xa30>
 800d72e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d730:	430b      	orrs	r3, r1
 800d732:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d734:	430b      	orrs	r3, r1
 800d736:	d120      	bne.n	800d77a <_dtoa_r+0xa72>
 800d738:	2a00      	cmp	r2, #0
 800d73a:	dded      	ble.n	800d718 <_dtoa_r+0xa10>
 800d73c:	4649      	mov	r1, r9
 800d73e:	2201      	movs	r2, #1
 800d740:	4658      	mov	r0, fp
 800d742:	f000 fbfd 	bl	800df40 <__lshift>
 800d746:	4621      	mov	r1, r4
 800d748:	4681      	mov	r9, r0
 800d74a:	f000 fc65 	bl	800e018 <__mcmp>
 800d74e:	2800      	cmp	r0, #0
 800d750:	dc03      	bgt.n	800d75a <_dtoa_r+0xa52>
 800d752:	d1e1      	bne.n	800d718 <_dtoa_r+0xa10>
 800d754:	f018 0f01 	tst.w	r8, #1
 800d758:	d0de      	beq.n	800d718 <_dtoa_r+0xa10>
 800d75a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d75e:	d1d8      	bne.n	800d712 <_dtoa_r+0xa0a>
 800d760:	9a00      	ldr	r2, [sp, #0]
 800d762:	2339      	movs	r3, #57	@ 0x39
 800d764:	7013      	strb	r3, [r2, #0]
 800d766:	4633      	mov	r3, r6
 800d768:	461e      	mov	r6, r3
 800d76a:	3b01      	subs	r3, #1
 800d76c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d770:	2a39      	cmp	r2, #57	@ 0x39
 800d772:	d052      	beq.n	800d81a <_dtoa_r+0xb12>
 800d774:	3201      	adds	r2, #1
 800d776:	701a      	strb	r2, [r3, #0]
 800d778:	e612      	b.n	800d3a0 <_dtoa_r+0x698>
 800d77a:	2a00      	cmp	r2, #0
 800d77c:	dd07      	ble.n	800d78e <_dtoa_r+0xa86>
 800d77e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d782:	d0ed      	beq.n	800d760 <_dtoa_r+0xa58>
 800d784:	9a00      	ldr	r2, [sp, #0]
 800d786:	f108 0301 	add.w	r3, r8, #1
 800d78a:	7013      	strb	r3, [r2, #0]
 800d78c:	e608      	b.n	800d3a0 <_dtoa_r+0x698>
 800d78e:	9b07      	ldr	r3, [sp, #28]
 800d790:	9a07      	ldr	r2, [sp, #28]
 800d792:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d798:	4293      	cmp	r3, r2
 800d79a:	d028      	beq.n	800d7ee <_dtoa_r+0xae6>
 800d79c:	4649      	mov	r1, r9
 800d79e:	2300      	movs	r3, #0
 800d7a0:	220a      	movs	r2, #10
 800d7a2:	4658      	mov	r0, fp
 800d7a4:	f000 f9d6 	bl	800db54 <__multadd>
 800d7a8:	42af      	cmp	r7, r5
 800d7aa:	4681      	mov	r9, r0
 800d7ac:	f04f 0300 	mov.w	r3, #0
 800d7b0:	f04f 020a 	mov.w	r2, #10
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	4658      	mov	r0, fp
 800d7b8:	d107      	bne.n	800d7ca <_dtoa_r+0xac2>
 800d7ba:	f000 f9cb 	bl	800db54 <__multadd>
 800d7be:	4607      	mov	r7, r0
 800d7c0:	4605      	mov	r5, r0
 800d7c2:	9b07      	ldr	r3, [sp, #28]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	9307      	str	r3, [sp, #28]
 800d7c8:	e774      	b.n	800d6b4 <_dtoa_r+0x9ac>
 800d7ca:	f000 f9c3 	bl	800db54 <__multadd>
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	220a      	movs	r2, #10
 800d7d6:	4658      	mov	r0, fp
 800d7d8:	f000 f9bc 	bl	800db54 <__multadd>
 800d7dc:	4605      	mov	r5, r0
 800d7de:	e7f0      	b.n	800d7c2 <_dtoa_r+0xaba>
 800d7e0:	9b00      	ldr	r3, [sp, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bfcc      	ite	gt
 800d7e6:	461e      	movgt	r6, r3
 800d7e8:	2601      	movle	r6, #1
 800d7ea:	4456      	add	r6, sl
 800d7ec:	2700      	movs	r7, #0
 800d7ee:	4649      	mov	r1, r9
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	4658      	mov	r0, fp
 800d7f4:	f000 fba4 	bl	800df40 <__lshift>
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	4681      	mov	r9, r0
 800d7fc:	f000 fc0c 	bl	800e018 <__mcmp>
 800d800:	2800      	cmp	r0, #0
 800d802:	dcb0      	bgt.n	800d766 <_dtoa_r+0xa5e>
 800d804:	d102      	bne.n	800d80c <_dtoa_r+0xb04>
 800d806:	f018 0f01 	tst.w	r8, #1
 800d80a:	d1ac      	bne.n	800d766 <_dtoa_r+0xa5e>
 800d80c:	4633      	mov	r3, r6
 800d80e:	461e      	mov	r6, r3
 800d810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d814:	2a30      	cmp	r2, #48	@ 0x30
 800d816:	d0fa      	beq.n	800d80e <_dtoa_r+0xb06>
 800d818:	e5c2      	b.n	800d3a0 <_dtoa_r+0x698>
 800d81a:	459a      	cmp	sl, r3
 800d81c:	d1a4      	bne.n	800d768 <_dtoa_r+0xa60>
 800d81e:	9b04      	ldr	r3, [sp, #16]
 800d820:	3301      	adds	r3, #1
 800d822:	9304      	str	r3, [sp, #16]
 800d824:	2331      	movs	r3, #49	@ 0x31
 800d826:	f88a 3000 	strb.w	r3, [sl]
 800d82a:	e5b9      	b.n	800d3a0 <_dtoa_r+0x698>
 800d82c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d82e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d88c <_dtoa_r+0xb84>
 800d832:	b11b      	cbz	r3, 800d83c <_dtoa_r+0xb34>
 800d834:	f10a 0308 	add.w	r3, sl, #8
 800d838:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	4650      	mov	r0, sl
 800d83e:	b019      	add	sp, #100	@ 0x64
 800d840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d846:	2b01      	cmp	r3, #1
 800d848:	f77f ae37 	ble.w	800d4ba <_dtoa_r+0x7b2>
 800d84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d850:	2001      	movs	r0, #1
 800d852:	e655      	b.n	800d500 <_dtoa_r+0x7f8>
 800d854:	9b00      	ldr	r3, [sp, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	f77f aed6 	ble.w	800d608 <_dtoa_r+0x900>
 800d85c:	4656      	mov	r6, sl
 800d85e:	4621      	mov	r1, r4
 800d860:	4648      	mov	r0, r9
 800d862:	f7ff f9c9 	bl	800cbf8 <quorem>
 800d866:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d86a:	f806 8b01 	strb.w	r8, [r6], #1
 800d86e:	9b00      	ldr	r3, [sp, #0]
 800d870:	eba6 020a 	sub.w	r2, r6, sl
 800d874:	4293      	cmp	r3, r2
 800d876:	ddb3      	ble.n	800d7e0 <_dtoa_r+0xad8>
 800d878:	4649      	mov	r1, r9
 800d87a:	2300      	movs	r3, #0
 800d87c:	220a      	movs	r2, #10
 800d87e:	4658      	mov	r0, fp
 800d880:	f000 f968 	bl	800db54 <__multadd>
 800d884:	4681      	mov	r9, r0
 800d886:	e7ea      	b.n	800d85e <_dtoa_r+0xb56>
 800d888:	08011eb1 	.word	0x08011eb1
 800d88c:	08011e35 	.word	0x08011e35

0800d890 <_free_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4605      	mov	r5, r0
 800d894:	2900      	cmp	r1, #0
 800d896:	d041      	beq.n	800d91c <_free_r+0x8c>
 800d898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d89c:	1f0c      	subs	r4, r1, #4
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bfb8      	it	lt
 800d8a2:	18e4      	addlt	r4, r4, r3
 800d8a4:	f000 f8e8 	bl	800da78 <__malloc_lock>
 800d8a8:	4a1d      	ldr	r2, [pc, #116]	@ (800d920 <_free_r+0x90>)
 800d8aa:	6813      	ldr	r3, [r2, #0]
 800d8ac:	b933      	cbnz	r3, 800d8bc <_free_r+0x2c>
 800d8ae:	6063      	str	r3, [r4, #4]
 800d8b0:	6014      	str	r4, [r2, #0]
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8b8:	f000 b8e4 	b.w	800da84 <__malloc_unlock>
 800d8bc:	42a3      	cmp	r3, r4
 800d8be:	d908      	bls.n	800d8d2 <_free_r+0x42>
 800d8c0:	6820      	ldr	r0, [r4, #0]
 800d8c2:	1821      	adds	r1, r4, r0
 800d8c4:	428b      	cmp	r3, r1
 800d8c6:	bf01      	itttt	eq
 800d8c8:	6819      	ldreq	r1, [r3, #0]
 800d8ca:	685b      	ldreq	r3, [r3, #4]
 800d8cc:	1809      	addeq	r1, r1, r0
 800d8ce:	6021      	streq	r1, [r4, #0]
 800d8d0:	e7ed      	b.n	800d8ae <_free_r+0x1e>
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	b10b      	cbz	r3, 800d8dc <_free_r+0x4c>
 800d8d8:	42a3      	cmp	r3, r4
 800d8da:	d9fa      	bls.n	800d8d2 <_free_r+0x42>
 800d8dc:	6811      	ldr	r1, [r2, #0]
 800d8de:	1850      	adds	r0, r2, r1
 800d8e0:	42a0      	cmp	r0, r4
 800d8e2:	d10b      	bne.n	800d8fc <_free_r+0x6c>
 800d8e4:	6820      	ldr	r0, [r4, #0]
 800d8e6:	4401      	add	r1, r0
 800d8e8:	1850      	adds	r0, r2, r1
 800d8ea:	4283      	cmp	r3, r0
 800d8ec:	6011      	str	r1, [r2, #0]
 800d8ee:	d1e0      	bne.n	800d8b2 <_free_r+0x22>
 800d8f0:	6818      	ldr	r0, [r3, #0]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	6053      	str	r3, [r2, #4]
 800d8f6:	4408      	add	r0, r1
 800d8f8:	6010      	str	r0, [r2, #0]
 800d8fa:	e7da      	b.n	800d8b2 <_free_r+0x22>
 800d8fc:	d902      	bls.n	800d904 <_free_r+0x74>
 800d8fe:	230c      	movs	r3, #12
 800d900:	602b      	str	r3, [r5, #0]
 800d902:	e7d6      	b.n	800d8b2 <_free_r+0x22>
 800d904:	6820      	ldr	r0, [r4, #0]
 800d906:	1821      	adds	r1, r4, r0
 800d908:	428b      	cmp	r3, r1
 800d90a:	bf04      	itt	eq
 800d90c:	6819      	ldreq	r1, [r3, #0]
 800d90e:	685b      	ldreq	r3, [r3, #4]
 800d910:	6063      	str	r3, [r4, #4]
 800d912:	bf04      	itt	eq
 800d914:	1809      	addeq	r1, r1, r0
 800d916:	6021      	streq	r1, [r4, #0]
 800d918:	6054      	str	r4, [r2, #4]
 800d91a:	e7ca      	b.n	800d8b2 <_free_r+0x22>
 800d91c:	bd38      	pop	{r3, r4, r5, pc}
 800d91e:	bf00      	nop
 800d920:	200016c8 	.word	0x200016c8

0800d924 <malloc>:
 800d924:	4b02      	ldr	r3, [pc, #8]	@ (800d930 <malloc+0xc>)
 800d926:	4601      	mov	r1, r0
 800d928:	6818      	ldr	r0, [r3, #0]
 800d92a:	f000 b825 	b.w	800d978 <_malloc_r>
 800d92e:	bf00      	nop
 800d930:	20000018 	.word	0x20000018

0800d934 <sbrk_aligned>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	4e0f      	ldr	r6, [pc, #60]	@ (800d974 <sbrk_aligned+0x40>)
 800d938:	460c      	mov	r4, r1
 800d93a:	6831      	ldr	r1, [r6, #0]
 800d93c:	4605      	mov	r5, r0
 800d93e:	b911      	cbnz	r1, 800d946 <sbrk_aligned+0x12>
 800d940:	f001 ffd2 	bl	800f8e8 <_sbrk_r>
 800d944:	6030      	str	r0, [r6, #0]
 800d946:	4621      	mov	r1, r4
 800d948:	4628      	mov	r0, r5
 800d94a:	f001 ffcd 	bl	800f8e8 <_sbrk_r>
 800d94e:	1c43      	adds	r3, r0, #1
 800d950:	d103      	bne.n	800d95a <sbrk_aligned+0x26>
 800d952:	f04f 34ff 	mov.w	r4, #4294967295
 800d956:	4620      	mov	r0, r4
 800d958:	bd70      	pop	{r4, r5, r6, pc}
 800d95a:	1cc4      	adds	r4, r0, #3
 800d95c:	f024 0403 	bic.w	r4, r4, #3
 800d960:	42a0      	cmp	r0, r4
 800d962:	d0f8      	beq.n	800d956 <sbrk_aligned+0x22>
 800d964:	1a21      	subs	r1, r4, r0
 800d966:	4628      	mov	r0, r5
 800d968:	f001 ffbe 	bl	800f8e8 <_sbrk_r>
 800d96c:	3001      	adds	r0, #1
 800d96e:	d1f2      	bne.n	800d956 <sbrk_aligned+0x22>
 800d970:	e7ef      	b.n	800d952 <sbrk_aligned+0x1e>
 800d972:	bf00      	nop
 800d974:	200016c4 	.word	0x200016c4

0800d978 <_malloc_r>:
 800d978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d97c:	1ccd      	adds	r5, r1, #3
 800d97e:	f025 0503 	bic.w	r5, r5, #3
 800d982:	3508      	adds	r5, #8
 800d984:	2d0c      	cmp	r5, #12
 800d986:	bf38      	it	cc
 800d988:	250c      	movcc	r5, #12
 800d98a:	2d00      	cmp	r5, #0
 800d98c:	4606      	mov	r6, r0
 800d98e:	db01      	blt.n	800d994 <_malloc_r+0x1c>
 800d990:	42a9      	cmp	r1, r5
 800d992:	d904      	bls.n	800d99e <_malloc_r+0x26>
 800d994:	230c      	movs	r3, #12
 800d996:	6033      	str	r3, [r6, #0]
 800d998:	2000      	movs	r0, #0
 800d99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d99e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da74 <_malloc_r+0xfc>
 800d9a2:	f000 f869 	bl	800da78 <__malloc_lock>
 800d9a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9aa:	461c      	mov	r4, r3
 800d9ac:	bb44      	cbnz	r4, 800da00 <_malloc_r+0x88>
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f7ff ffbf 	bl	800d934 <sbrk_aligned>
 800d9b6:	1c43      	adds	r3, r0, #1
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	d158      	bne.n	800da6e <_malloc_r+0xf6>
 800d9bc:	f8d8 4000 	ldr.w	r4, [r8]
 800d9c0:	4627      	mov	r7, r4
 800d9c2:	2f00      	cmp	r7, #0
 800d9c4:	d143      	bne.n	800da4e <_malloc_r+0xd6>
 800d9c6:	2c00      	cmp	r4, #0
 800d9c8:	d04b      	beq.n	800da62 <_malloc_r+0xea>
 800d9ca:	6823      	ldr	r3, [r4, #0]
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	eb04 0903 	add.w	r9, r4, r3
 800d9d4:	f001 ff88 	bl	800f8e8 <_sbrk_r>
 800d9d8:	4581      	cmp	r9, r0
 800d9da:	d142      	bne.n	800da62 <_malloc_r+0xea>
 800d9dc:	6821      	ldr	r1, [r4, #0]
 800d9de:	1a6d      	subs	r5, r5, r1
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f7ff ffa6 	bl	800d934 <sbrk_aligned>
 800d9e8:	3001      	adds	r0, #1
 800d9ea:	d03a      	beq.n	800da62 <_malloc_r+0xea>
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	442b      	add	r3, r5
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9f6:	685a      	ldr	r2, [r3, #4]
 800d9f8:	bb62      	cbnz	r2, 800da54 <_malloc_r+0xdc>
 800d9fa:	f8c8 7000 	str.w	r7, [r8]
 800d9fe:	e00f      	b.n	800da20 <_malloc_r+0xa8>
 800da00:	6822      	ldr	r2, [r4, #0]
 800da02:	1b52      	subs	r2, r2, r5
 800da04:	d420      	bmi.n	800da48 <_malloc_r+0xd0>
 800da06:	2a0b      	cmp	r2, #11
 800da08:	d917      	bls.n	800da3a <_malloc_r+0xc2>
 800da0a:	1961      	adds	r1, r4, r5
 800da0c:	42a3      	cmp	r3, r4
 800da0e:	6025      	str	r5, [r4, #0]
 800da10:	bf18      	it	ne
 800da12:	6059      	strne	r1, [r3, #4]
 800da14:	6863      	ldr	r3, [r4, #4]
 800da16:	bf08      	it	eq
 800da18:	f8c8 1000 	streq.w	r1, [r8]
 800da1c:	5162      	str	r2, [r4, r5]
 800da1e:	604b      	str	r3, [r1, #4]
 800da20:	4630      	mov	r0, r6
 800da22:	f000 f82f 	bl	800da84 <__malloc_unlock>
 800da26:	f104 000b 	add.w	r0, r4, #11
 800da2a:	1d23      	adds	r3, r4, #4
 800da2c:	f020 0007 	bic.w	r0, r0, #7
 800da30:	1ac2      	subs	r2, r0, r3
 800da32:	bf1c      	itt	ne
 800da34:	1a1b      	subne	r3, r3, r0
 800da36:	50a3      	strne	r3, [r4, r2]
 800da38:	e7af      	b.n	800d99a <_malloc_r+0x22>
 800da3a:	6862      	ldr	r2, [r4, #4]
 800da3c:	42a3      	cmp	r3, r4
 800da3e:	bf0c      	ite	eq
 800da40:	f8c8 2000 	streq.w	r2, [r8]
 800da44:	605a      	strne	r2, [r3, #4]
 800da46:	e7eb      	b.n	800da20 <_malloc_r+0xa8>
 800da48:	4623      	mov	r3, r4
 800da4a:	6864      	ldr	r4, [r4, #4]
 800da4c:	e7ae      	b.n	800d9ac <_malloc_r+0x34>
 800da4e:	463c      	mov	r4, r7
 800da50:	687f      	ldr	r7, [r7, #4]
 800da52:	e7b6      	b.n	800d9c2 <_malloc_r+0x4a>
 800da54:	461a      	mov	r2, r3
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	42a3      	cmp	r3, r4
 800da5a:	d1fb      	bne.n	800da54 <_malloc_r+0xdc>
 800da5c:	2300      	movs	r3, #0
 800da5e:	6053      	str	r3, [r2, #4]
 800da60:	e7de      	b.n	800da20 <_malloc_r+0xa8>
 800da62:	230c      	movs	r3, #12
 800da64:	6033      	str	r3, [r6, #0]
 800da66:	4630      	mov	r0, r6
 800da68:	f000 f80c 	bl	800da84 <__malloc_unlock>
 800da6c:	e794      	b.n	800d998 <_malloc_r+0x20>
 800da6e:	6005      	str	r5, [r0, #0]
 800da70:	e7d6      	b.n	800da20 <_malloc_r+0xa8>
 800da72:	bf00      	nop
 800da74:	200016c8 	.word	0x200016c8

0800da78 <__malloc_lock>:
 800da78:	4801      	ldr	r0, [pc, #4]	@ (800da80 <__malloc_lock+0x8>)
 800da7a:	f7ff b8a6 	b.w	800cbca <__retarget_lock_acquire_recursive>
 800da7e:	bf00      	nop
 800da80:	200016c0 	.word	0x200016c0

0800da84 <__malloc_unlock>:
 800da84:	4801      	ldr	r0, [pc, #4]	@ (800da8c <__malloc_unlock+0x8>)
 800da86:	f7ff b8a1 	b.w	800cbcc <__retarget_lock_release_recursive>
 800da8a:	bf00      	nop
 800da8c:	200016c0 	.word	0x200016c0

0800da90 <_Balloc>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	69c6      	ldr	r6, [r0, #28]
 800da94:	4604      	mov	r4, r0
 800da96:	460d      	mov	r5, r1
 800da98:	b976      	cbnz	r6, 800dab8 <_Balloc+0x28>
 800da9a:	2010      	movs	r0, #16
 800da9c:	f7ff ff42 	bl	800d924 <malloc>
 800daa0:	4602      	mov	r2, r0
 800daa2:	61e0      	str	r0, [r4, #28]
 800daa4:	b920      	cbnz	r0, 800dab0 <_Balloc+0x20>
 800daa6:	4b18      	ldr	r3, [pc, #96]	@ (800db08 <_Balloc+0x78>)
 800daa8:	4818      	ldr	r0, [pc, #96]	@ (800db0c <_Balloc+0x7c>)
 800daaa:	216b      	movs	r1, #107	@ 0x6b
 800daac:	f001 ff34 	bl	800f918 <__assert_func>
 800dab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dab4:	6006      	str	r6, [r0, #0]
 800dab6:	60c6      	str	r6, [r0, #12]
 800dab8:	69e6      	ldr	r6, [r4, #28]
 800daba:	68f3      	ldr	r3, [r6, #12]
 800dabc:	b183      	cbz	r3, 800dae0 <_Balloc+0x50>
 800dabe:	69e3      	ldr	r3, [r4, #28]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dac6:	b9b8      	cbnz	r0, 800daf8 <_Balloc+0x68>
 800dac8:	2101      	movs	r1, #1
 800daca:	fa01 f605 	lsl.w	r6, r1, r5
 800dace:	1d72      	adds	r2, r6, #5
 800dad0:	0092      	lsls	r2, r2, #2
 800dad2:	4620      	mov	r0, r4
 800dad4:	f001 ff3e 	bl	800f954 <_calloc_r>
 800dad8:	b160      	cbz	r0, 800daf4 <_Balloc+0x64>
 800dada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dade:	e00e      	b.n	800dafe <_Balloc+0x6e>
 800dae0:	2221      	movs	r2, #33	@ 0x21
 800dae2:	2104      	movs	r1, #4
 800dae4:	4620      	mov	r0, r4
 800dae6:	f001 ff35 	bl	800f954 <_calloc_r>
 800daea:	69e3      	ldr	r3, [r4, #28]
 800daec:	60f0      	str	r0, [r6, #12]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1e4      	bne.n	800dabe <_Balloc+0x2e>
 800daf4:	2000      	movs	r0, #0
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	6802      	ldr	r2, [r0, #0]
 800dafa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dafe:	2300      	movs	r3, #0
 800db00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db04:	e7f7      	b.n	800daf6 <_Balloc+0x66>
 800db06:	bf00      	nop
 800db08:	08011e42 	.word	0x08011e42
 800db0c:	08011ec2 	.word	0x08011ec2

0800db10 <_Bfree>:
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	69c6      	ldr	r6, [r0, #28]
 800db14:	4605      	mov	r5, r0
 800db16:	460c      	mov	r4, r1
 800db18:	b976      	cbnz	r6, 800db38 <_Bfree+0x28>
 800db1a:	2010      	movs	r0, #16
 800db1c:	f7ff ff02 	bl	800d924 <malloc>
 800db20:	4602      	mov	r2, r0
 800db22:	61e8      	str	r0, [r5, #28]
 800db24:	b920      	cbnz	r0, 800db30 <_Bfree+0x20>
 800db26:	4b09      	ldr	r3, [pc, #36]	@ (800db4c <_Bfree+0x3c>)
 800db28:	4809      	ldr	r0, [pc, #36]	@ (800db50 <_Bfree+0x40>)
 800db2a:	218f      	movs	r1, #143	@ 0x8f
 800db2c:	f001 fef4 	bl	800f918 <__assert_func>
 800db30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db34:	6006      	str	r6, [r0, #0]
 800db36:	60c6      	str	r6, [r0, #12]
 800db38:	b13c      	cbz	r4, 800db4a <_Bfree+0x3a>
 800db3a:	69eb      	ldr	r3, [r5, #28]
 800db3c:	6862      	ldr	r2, [r4, #4]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db44:	6021      	str	r1, [r4, #0]
 800db46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
 800db4c:	08011e42 	.word	0x08011e42
 800db50:	08011ec2 	.word	0x08011ec2

0800db54 <__multadd>:
 800db54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db58:	690d      	ldr	r5, [r1, #16]
 800db5a:	4607      	mov	r7, r0
 800db5c:	460c      	mov	r4, r1
 800db5e:	461e      	mov	r6, r3
 800db60:	f101 0c14 	add.w	ip, r1, #20
 800db64:	2000      	movs	r0, #0
 800db66:	f8dc 3000 	ldr.w	r3, [ip]
 800db6a:	b299      	uxth	r1, r3
 800db6c:	fb02 6101 	mla	r1, r2, r1, r6
 800db70:	0c1e      	lsrs	r6, r3, #16
 800db72:	0c0b      	lsrs	r3, r1, #16
 800db74:	fb02 3306 	mla	r3, r2, r6, r3
 800db78:	b289      	uxth	r1, r1
 800db7a:	3001      	adds	r0, #1
 800db7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db80:	4285      	cmp	r5, r0
 800db82:	f84c 1b04 	str.w	r1, [ip], #4
 800db86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db8a:	dcec      	bgt.n	800db66 <__multadd+0x12>
 800db8c:	b30e      	cbz	r6, 800dbd2 <__multadd+0x7e>
 800db8e:	68a3      	ldr	r3, [r4, #8]
 800db90:	42ab      	cmp	r3, r5
 800db92:	dc19      	bgt.n	800dbc8 <__multadd+0x74>
 800db94:	6861      	ldr	r1, [r4, #4]
 800db96:	4638      	mov	r0, r7
 800db98:	3101      	adds	r1, #1
 800db9a:	f7ff ff79 	bl	800da90 <_Balloc>
 800db9e:	4680      	mov	r8, r0
 800dba0:	b928      	cbnz	r0, 800dbae <__multadd+0x5a>
 800dba2:	4602      	mov	r2, r0
 800dba4:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd8 <__multadd+0x84>)
 800dba6:	480d      	ldr	r0, [pc, #52]	@ (800dbdc <__multadd+0x88>)
 800dba8:	21ba      	movs	r1, #186	@ 0xba
 800dbaa:	f001 feb5 	bl	800f918 <__assert_func>
 800dbae:	6922      	ldr	r2, [r4, #16]
 800dbb0:	3202      	adds	r2, #2
 800dbb2:	f104 010c 	add.w	r1, r4, #12
 800dbb6:	0092      	lsls	r2, r2, #2
 800dbb8:	300c      	adds	r0, #12
 800dbba:	f7ff f808 	bl	800cbce <memcpy>
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	f7ff ffa5 	bl	800db10 <_Bfree>
 800dbc6:	4644      	mov	r4, r8
 800dbc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbcc:	3501      	adds	r5, #1
 800dbce:	615e      	str	r6, [r3, #20]
 800dbd0:	6125      	str	r5, [r4, #16]
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd8:	08011eb1 	.word	0x08011eb1
 800dbdc:	08011ec2 	.word	0x08011ec2

0800dbe0 <__s2b>:
 800dbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	4615      	mov	r5, r2
 800dbe8:	461f      	mov	r7, r3
 800dbea:	2209      	movs	r2, #9
 800dbec:	3308      	adds	r3, #8
 800dbee:	4606      	mov	r6, r0
 800dbf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	db09      	blt.n	800dc10 <__s2b+0x30>
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7ff ff47 	bl	800da90 <_Balloc>
 800dc02:	b940      	cbnz	r0, 800dc16 <__s2b+0x36>
 800dc04:	4602      	mov	r2, r0
 800dc06:	4b19      	ldr	r3, [pc, #100]	@ (800dc6c <__s2b+0x8c>)
 800dc08:	4819      	ldr	r0, [pc, #100]	@ (800dc70 <__s2b+0x90>)
 800dc0a:	21d3      	movs	r1, #211	@ 0xd3
 800dc0c:	f001 fe84 	bl	800f918 <__assert_func>
 800dc10:	0052      	lsls	r2, r2, #1
 800dc12:	3101      	adds	r1, #1
 800dc14:	e7f0      	b.n	800dbf8 <__s2b+0x18>
 800dc16:	9b08      	ldr	r3, [sp, #32]
 800dc18:	6143      	str	r3, [r0, #20]
 800dc1a:	2d09      	cmp	r5, #9
 800dc1c:	f04f 0301 	mov.w	r3, #1
 800dc20:	6103      	str	r3, [r0, #16]
 800dc22:	dd16      	ble.n	800dc52 <__s2b+0x72>
 800dc24:	f104 0909 	add.w	r9, r4, #9
 800dc28:	46c8      	mov	r8, r9
 800dc2a:	442c      	add	r4, r5
 800dc2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc30:	4601      	mov	r1, r0
 800dc32:	3b30      	subs	r3, #48	@ 0x30
 800dc34:	220a      	movs	r2, #10
 800dc36:	4630      	mov	r0, r6
 800dc38:	f7ff ff8c 	bl	800db54 <__multadd>
 800dc3c:	45a0      	cmp	r8, r4
 800dc3e:	d1f5      	bne.n	800dc2c <__s2b+0x4c>
 800dc40:	f1a5 0408 	sub.w	r4, r5, #8
 800dc44:	444c      	add	r4, r9
 800dc46:	1b2d      	subs	r5, r5, r4
 800dc48:	1963      	adds	r3, r4, r5
 800dc4a:	42bb      	cmp	r3, r7
 800dc4c:	db04      	blt.n	800dc58 <__s2b+0x78>
 800dc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc52:	340a      	adds	r4, #10
 800dc54:	2509      	movs	r5, #9
 800dc56:	e7f6      	b.n	800dc46 <__s2b+0x66>
 800dc58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc5c:	4601      	mov	r1, r0
 800dc5e:	3b30      	subs	r3, #48	@ 0x30
 800dc60:	220a      	movs	r2, #10
 800dc62:	4630      	mov	r0, r6
 800dc64:	f7ff ff76 	bl	800db54 <__multadd>
 800dc68:	e7ee      	b.n	800dc48 <__s2b+0x68>
 800dc6a:	bf00      	nop
 800dc6c:	08011eb1 	.word	0x08011eb1
 800dc70:	08011ec2 	.word	0x08011ec2

0800dc74 <__hi0bits>:
 800dc74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc78:	4603      	mov	r3, r0
 800dc7a:	bf36      	itet	cc
 800dc7c:	0403      	lslcc	r3, r0, #16
 800dc7e:	2000      	movcs	r0, #0
 800dc80:	2010      	movcc	r0, #16
 800dc82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc86:	bf3c      	itt	cc
 800dc88:	021b      	lslcc	r3, r3, #8
 800dc8a:	3008      	addcc	r0, #8
 800dc8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc90:	bf3c      	itt	cc
 800dc92:	011b      	lslcc	r3, r3, #4
 800dc94:	3004      	addcc	r0, #4
 800dc96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc9a:	bf3c      	itt	cc
 800dc9c:	009b      	lslcc	r3, r3, #2
 800dc9e:	3002      	addcc	r0, #2
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	db05      	blt.n	800dcb0 <__hi0bits+0x3c>
 800dca4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dca8:	f100 0001 	add.w	r0, r0, #1
 800dcac:	bf08      	it	eq
 800dcae:	2020      	moveq	r0, #32
 800dcb0:	4770      	bx	lr

0800dcb2 <__lo0bits>:
 800dcb2:	6803      	ldr	r3, [r0, #0]
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	f013 0007 	ands.w	r0, r3, #7
 800dcba:	d00b      	beq.n	800dcd4 <__lo0bits+0x22>
 800dcbc:	07d9      	lsls	r1, r3, #31
 800dcbe:	d421      	bmi.n	800dd04 <__lo0bits+0x52>
 800dcc0:	0798      	lsls	r0, r3, #30
 800dcc2:	bf49      	itett	mi
 800dcc4:	085b      	lsrmi	r3, r3, #1
 800dcc6:	089b      	lsrpl	r3, r3, #2
 800dcc8:	2001      	movmi	r0, #1
 800dcca:	6013      	strmi	r3, [r2, #0]
 800dccc:	bf5c      	itt	pl
 800dcce:	6013      	strpl	r3, [r2, #0]
 800dcd0:	2002      	movpl	r0, #2
 800dcd2:	4770      	bx	lr
 800dcd4:	b299      	uxth	r1, r3
 800dcd6:	b909      	cbnz	r1, 800dcdc <__lo0bits+0x2a>
 800dcd8:	0c1b      	lsrs	r3, r3, #16
 800dcda:	2010      	movs	r0, #16
 800dcdc:	b2d9      	uxtb	r1, r3
 800dcde:	b909      	cbnz	r1, 800dce4 <__lo0bits+0x32>
 800dce0:	3008      	adds	r0, #8
 800dce2:	0a1b      	lsrs	r3, r3, #8
 800dce4:	0719      	lsls	r1, r3, #28
 800dce6:	bf04      	itt	eq
 800dce8:	091b      	lsreq	r3, r3, #4
 800dcea:	3004      	addeq	r0, #4
 800dcec:	0799      	lsls	r1, r3, #30
 800dcee:	bf04      	itt	eq
 800dcf0:	089b      	lsreq	r3, r3, #2
 800dcf2:	3002      	addeq	r0, #2
 800dcf4:	07d9      	lsls	r1, r3, #31
 800dcf6:	d403      	bmi.n	800dd00 <__lo0bits+0x4e>
 800dcf8:	085b      	lsrs	r3, r3, #1
 800dcfa:	f100 0001 	add.w	r0, r0, #1
 800dcfe:	d003      	beq.n	800dd08 <__lo0bits+0x56>
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	4770      	bx	lr
 800dd04:	2000      	movs	r0, #0
 800dd06:	4770      	bx	lr
 800dd08:	2020      	movs	r0, #32
 800dd0a:	4770      	bx	lr

0800dd0c <__i2b>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	460c      	mov	r4, r1
 800dd10:	2101      	movs	r1, #1
 800dd12:	f7ff febd 	bl	800da90 <_Balloc>
 800dd16:	4602      	mov	r2, r0
 800dd18:	b928      	cbnz	r0, 800dd26 <__i2b+0x1a>
 800dd1a:	4b05      	ldr	r3, [pc, #20]	@ (800dd30 <__i2b+0x24>)
 800dd1c:	4805      	ldr	r0, [pc, #20]	@ (800dd34 <__i2b+0x28>)
 800dd1e:	f240 1145 	movw	r1, #325	@ 0x145
 800dd22:	f001 fdf9 	bl	800f918 <__assert_func>
 800dd26:	2301      	movs	r3, #1
 800dd28:	6144      	str	r4, [r0, #20]
 800dd2a:	6103      	str	r3, [r0, #16]
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	bf00      	nop
 800dd30:	08011eb1 	.word	0x08011eb1
 800dd34:	08011ec2 	.word	0x08011ec2

0800dd38 <__multiply>:
 800dd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3c:	4614      	mov	r4, r2
 800dd3e:	690a      	ldr	r2, [r1, #16]
 800dd40:	6923      	ldr	r3, [r4, #16]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	bfa8      	it	ge
 800dd46:	4623      	movge	r3, r4
 800dd48:	460f      	mov	r7, r1
 800dd4a:	bfa4      	itt	ge
 800dd4c:	460c      	movge	r4, r1
 800dd4e:	461f      	movge	r7, r3
 800dd50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dd54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dd58:	68a3      	ldr	r3, [r4, #8]
 800dd5a:	6861      	ldr	r1, [r4, #4]
 800dd5c:	eb0a 0609 	add.w	r6, sl, r9
 800dd60:	42b3      	cmp	r3, r6
 800dd62:	b085      	sub	sp, #20
 800dd64:	bfb8      	it	lt
 800dd66:	3101      	addlt	r1, #1
 800dd68:	f7ff fe92 	bl	800da90 <_Balloc>
 800dd6c:	b930      	cbnz	r0, 800dd7c <__multiply+0x44>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	4b44      	ldr	r3, [pc, #272]	@ (800de84 <__multiply+0x14c>)
 800dd72:	4845      	ldr	r0, [pc, #276]	@ (800de88 <__multiply+0x150>)
 800dd74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd78:	f001 fdce 	bl	800f918 <__assert_func>
 800dd7c:	f100 0514 	add.w	r5, r0, #20
 800dd80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd84:	462b      	mov	r3, r5
 800dd86:	2200      	movs	r2, #0
 800dd88:	4543      	cmp	r3, r8
 800dd8a:	d321      	bcc.n	800ddd0 <__multiply+0x98>
 800dd8c:	f107 0114 	add.w	r1, r7, #20
 800dd90:	f104 0214 	add.w	r2, r4, #20
 800dd94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dd98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dd9c:	9302      	str	r3, [sp, #8]
 800dd9e:	1b13      	subs	r3, r2, r4
 800dda0:	3b15      	subs	r3, #21
 800dda2:	f023 0303 	bic.w	r3, r3, #3
 800dda6:	3304      	adds	r3, #4
 800dda8:	f104 0715 	add.w	r7, r4, #21
 800ddac:	42ba      	cmp	r2, r7
 800ddae:	bf38      	it	cc
 800ddb0:	2304      	movcc	r3, #4
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	9b02      	ldr	r3, [sp, #8]
 800ddb6:	9103      	str	r1, [sp, #12]
 800ddb8:	428b      	cmp	r3, r1
 800ddba:	d80c      	bhi.n	800ddd6 <__multiply+0x9e>
 800ddbc:	2e00      	cmp	r6, #0
 800ddbe:	dd03      	ble.n	800ddc8 <__multiply+0x90>
 800ddc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d05b      	beq.n	800de80 <__multiply+0x148>
 800ddc8:	6106      	str	r6, [r0, #16]
 800ddca:	b005      	add	sp, #20
 800ddcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd0:	f843 2b04 	str.w	r2, [r3], #4
 800ddd4:	e7d8      	b.n	800dd88 <__multiply+0x50>
 800ddd6:	f8b1 a000 	ldrh.w	sl, [r1]
 800ddda:	f1ba 0f00 	cmp.w	sl, #0
 800ddde:	d024      	beq.n	800de2a <__multiply+0xf2>
 800dde0:	f104 0e14 	add.w	lr, r4, #20
 800dde4:	46a9      	mov	r9, r5
 800dde6:	f04f 0c00 	mov.w	ip, #0
 800ddea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddee:	f8d9 3000 	ldr.w	r3, [r9]
 800ddf2:	fa1f fb87 	uxth.w	fp, r7
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddfc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800de00:	f8d9 7000 	ldr.w	r7, [r9]
 800de04:	4463      	add	r3, ip
 800de06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de0a:	fb0a c70b 	mla	r7, sl, fp, ip
 800de0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800de12:	b29b      	uxth	r3, r3
 800de14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de18:	4572      	cmp	r2, lr
 800de1a:	f849 3b04 	str.w	r3, [r9], #4
 800de1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de22:	d8e2      	bhi.n	800ddea <__multiply+0xb2>
 800de24:	9b01      	ldr	r3, [sp, #4]
 800de26:	f845 c003 	str.w	ip, [r5, r3]
 800de2a:	9b03      	ldr	r3, [sp, #12]
 800de2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800de30:	3104      	adds	r1, #4
 800de32:	f1b9 0f00 	cmp.w	r9, #0
 800de36:	d021      	beq.n	800de7c <__multiply+0x144>
 800de38:	682b      	ldr	r3, [r5, #0]
 800de3a:	f104 0c14 	add.w	ip, r4, #20
 800de3e:	46ae      	mov	lr, r5
 800de40:	f04f 0a00 	mov.w	sl, #0
 800de44:	f8bc b000 	ldrh.w	fp, [ip]
 800de48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800de4c:	fb09 770b 	mla	r7, r9, fp, r7
 800de50:	4457      	add	r7, sl
 800de52:	b29b      	uxth	r3, r3
 800de54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de58:	f84e 3b04 	str.w	r3, [lr], #4
 800de5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de64:	f8be 3000 	ldrh.w	r3, [lr]
 800de68:	fb09 330a 	mla	r3, r9, sl, r3
 800de6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800de70:	4562      	cmp	r2, ip
 800de72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de76:	d8e5      	bhi.n	800de44 <__multiply+0x10c>
 800de78:	9f01      	ldr	r7, [sp, #4]
 800de7a:	51eb      	str	r3, [r5, r7]
 800de7c:	3504      	adds	r5, #4
 800de7e:	e799      	b.n	800ddb4 <__multiply+0x7c>
 800de80:	3e01      	subs	r6, #1
 800de82:	e79b      	b.n	800ddbc <__multiply+0x84>
 800de84:	08011eb1 	.word	0x08011eb1
 800de88:	08011ec2 	.word	0x08011ec2

0800de8c <__pow5mult>:
 800de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de90:	4615      	mov	r5, r2
 800de92:	f012 0203 	ands.w	r2, r2, #3
 800de96:	4607      	mov	r7, r0
 800de98:	460e      	mov	r6, r1
 800de9a:	d007      	beq.n	800deac <__pow5mult+0x20>
 800de9c:	4c25      	ldr	r4, [pc, #148]	@ (800df34 <__pow5mult+0xa8>)
 800de9e:	3a01      	subs	r2, #1
 800dea0:	2300      	movs	r3, #0
 800dea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dea6:	f7ff fe55 	bl	800db54 <__multadd>
 800deaa:	4606      	mov	r6, r0
 800deac:	10ad      	asrs	r5, r5, #2
 800deae:	d03d      	beq.n	800df2c <__pow5mult+0xa0>
 800deb0:	69fc      	ldr	r4, [r7, #28]
 800deb2:	b97c      	cbnz	r4, 800ded4 <__pow5mult+0x48>
 800deb4:	2010      	movs	r0, #16
 800deb6:	f7ff fd35 	bl	800d924 <malloc>
 800deba:	4602      	mov	r2, r0
 800debc:	61f8      	str	r0, [r7, #28]
 800debe:	b928      	cbnz	r0, 800decc <__pow5mult+0x40>
 800dec0:	4b1d      	ldr	r3, [pc, #116]	@ (800df38 <__pow5mult+0xac>)
 800dec2:	481e      	ldr	r0, [pc, #120]	@ (800df3c <__pow5mult+0xb0>)
 800dec4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dec8:	f001 fd26 	bl	800f918 <__assert_func>
 800decc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ded0:	6004      	str	r4, [r0, #0]
 800ded2:	60c4      	str	r4, [r0, #12]
 800ded4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ded8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dedc:	b94c      	cbnz	r4, 800def2 <__pow5mult+0x66>
 800dede:	f240 2171 	movw	r1, #625	@ 0x271
 800dee2:	4638      	mov	r0, r7
 800dee4:	f7ff ff12 	bl	800dd0c <__i2b>
 800dee8:	2300      	movs	r3, #0
 800deea:	f8c8 0008 	str.w	r0, [r8, #8]
 800deee:	4604      	mov	r4, r0
 800def0:	6003      	str	r3, [r0, #0]
 800def2:	f04f 0900 	mov.w	r9, #0
 800def6:	07eb      	lsls	r3, r5, #31
 800def8:	d50a      	bpl.n	800df10 <__pow5mult+0x84>
 800defa:	4631      	mov	r1, r6
 800defc:	4622      	mov	r2, r4
 800defe:	4638      	mov	r0, r7
 800df00:	f7ff ff1a 	bl	800dd38 <__multiply>
 800df04:	4631      	mov	r1, r6
 800df06:	4680      	mov	r8, r0
 800df08:	4638      	mov	r0, r7
 800df0a:	f7ff fe01 	bl	800db10 <_Bfree>
 800df0e:	4646      	mov	r6, r8
 800df10:	106d      	asrs	r5, r5, #1
 800df12:	d00b      	beq.n	800df2c <__pow5mult+0xa0>
 800df14:	6820      	ldr	r0, [r4, #0]
 800df16:	b938      	cbnz	r0, 800df28 <__pow5mult+0x9c>
 800df18:	4622      	mov	r2, r4
 800df1a:	4621      	mov	r1, r4
 800df1c:	4638      	mov	r0, r7
 800df1e:	f7ff ff0b 	bl	800dd38 <__multiply>
 800df22:	6020      	str	r0, [r4, #0]
 800df24:	f8c0 9000 	str.w	r9, [r0]
 800df28:	4604      	mov	r4, r0
 800df2a:	e7e4      	b.n	800def6 <__pow5mult+0x6a>
 800df2c:	4630      	mov	r0, r6
 800df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df32:	bf00      	nop
 800df34:	08011f1c 	.word	0x08011f1c
 800df38:	08011e42 	.word	0x08011e42
 800df3c:	08011ec2 	.word	0x08011ec2

0800df40 <__lshift>:
 800df40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df44:	460c      	mov	r4, r1
 800df46:	6849      	ldr	r1, [r1, #4]
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df4e:	68a3      	ldr	r3, [r4, #8]
 800df50:	4607      	mov	r7, r0
 800df52:	4691      	mov	r9, r2
 800df54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df58:	f108 0601 	add.w	r6, r8, #1
 800df5c:	42b3      	cmp	r3, r6
 800df5e:	db0b      	blt.n	800df78 <__lshift+0x38>
 800df60:	4638      	mov	r0, r7
 800df62:	f7ff fd95 	bl	800da90 <_Balloc>
 800df66:	4605      	mov	r5, r0
 800df68:	b948      	cbnz	r0, 800df7e <__lshift+0x3e>
 800df6a:	4602      	mov	r2, r0
 800df6c:	4b28      	ldr	r3, [pc, #160]	@ (800e010 <__lshift+0xd0>)
 800df6e:	4829      	ldr	r0, [pc, #164]	@ (800e014 <__lshift+0xd4>)
 800df70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df74:	f001 fcd0 	bl	800f918 <__assert_func>
 800df78:	3101      	adds	r1, #1
 800df7a:	005b      	lsls	r3, r3, #1
 800df7c:	e7ee      	b.n	800df5c <__lshift+0x1c>
 800df7e:	2300      	movs	r3, #0
 800df80:	f100 0114 	add.w	r1, r0, #20
 800df84:	f100 0210 	add.w	r2, r0, #16
 800df88:	4618      	mov	r0, r3
 800df8a:	4553      	cmp	r3, sl
 800df8c:	db33      	blt.n	800dff6 <__lshift+0xb6>
 800df8e:	6920      	ldr	r0, [r4, #16]
 800df90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df94:	f104 0314 	add.w	r3, r4, #20
 800df98:	f019 091f 	ands.w	r9, r9, #31
 800df9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dfa4:	d02b      	beq.n	800dffe <__lshift+0xbe>
 800dfa6:	f1c9 0e20 	rsb	lr, r9, #32
 800dfaa:	468a      	mov	sl, r1
 800dfac:	2200      	movs	r2, #0
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	fa00 f009 	lsl.w	r0, r0, r9
 800dfb4:	4310      	orrs	r0, r2
 800dfb6:	f84a 0b04 	str.w	r0, [sl], #4
 800dfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfbe:	459c      	cmp	ip, r3
 800dfc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800dfc4:	d8f3      	bhi.n	800dfae <__lshift+0x6e>
 800dfc6:	ebac 0304 	sub.w	r3, ip, r4
 800dfca:	3b15      	subs	r3, #21
 800dfcc:	f023 0303 	bic.w	r3, r3, #3
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	f104 0015 	add.w	r0, r4, #21
 800dfd6:	4584      	cmp	ip, r0
 800dfd8:	bf38      	it	cc
 800dfda:	2304      	movcc	r3, #4
 800dfdc:	50ca      	str	r2, [r1, r3]
 800dfde:	b10a      	cbz	r2, 800dfe4 <__lshift+0xa4>
 800dfe0:	f108 0602 	add.w	r6, r8, #2
 800dfe4:	3e01      	subs	r6, #1
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	612e      	str	r6, [r5, #16]
 800dfea:	4621      	mov	r1, r4
 800dfec:	f7ff fd90 	bl	800db10 <_Bfree>
 800dff0:	4628      	mov	r0, r5
 800dff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dffa:	3301      	adds	r3, #1
 800dffc:	e7c5      	b.n	800df8a <__lshift+0x4a>
 800dffe:	3904      	subs	r1, #4
 800e000:	f853 2b04 	ldr.w	r2, [r3], #4
 800e004:	f841 2f04 	str.w	r2, [r1, #4]!
 800e008:	459c      	cmp	ip, r3
 800e00a:	d8f9      	bhi.n	800e000 <__lshift+0xc0>
 800e00c:	e7ea      	b.n	800dfe4 <__lshift+0xa4>
 800e00e:	bf00      	nop
 800e010:	08011eb1 	.word	0x08011eb1
 800e014:	08011ec2 	.word	0x08011ec2

0800e018 <__mcmp>:
 800e018:	690a      	ldr	r2, [r1, #16]
 800e01a:	4603      	mov	r3, r0
 800e01c:	6900      	ldr	r0, [r0, #16]
 800e01e:	1a80      	subs	r0, r0, r2
 800e020:	b530      	push	{r4, r5, lr}
 800e022:	d10e      	bne.n	800e042 <__mcmp+0x2a>
 800e024:	3314      	adds	r3, #20
 800e026:	3114      	adds	r1, #20
 800e028:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e02c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e030:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e034:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e038:	4295      	cmp	r5, r2
 800e03a:	d003      	beq.n	800e044 <__mcmp+0x2c>
 800e03c:	d205      	bcs.n	800e04a <__mcmp+0x32>
 800e03e:	f04f 30ff 	mov.w	r0, #4294967295
 800e042:	bd30      	pop	{r4, r5, pc}
 800e044:	42a3      	cmp	r3, r4
 800e046:	d3f3      	bcc.n	800e030 <__mcmp+0x18>
 800e048:	e7fb      	b.n	800e042 <__mcmp+0x2a>
 800e04a:	2001      	movs	r0, #1
 800e04c:	e7f9      	b.n	800e042 <__mcmp+0x2a>
	...

0800e050 <__mdiff>:
 800e050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	4689      	mov	r9, r1
 800e056:	4606      	mov	r6, r0
 800e058:	4611      	mov	r1, r2
 800e05a:	4648      	mov	r0, r9
 800e05c:	4614      	mov	r4, r2
 800e05e:	f7ff ffdb 	bl	800e018 <__mcmp>
 800e062:	1e05      	subs	r5, r0, #0
 800e064:	d112      	bne.n	800e08c <__mdiff+0x3c>
 800e066:	4629      	mov	r1, r5
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff fd11 	bl	800da90 <_Balloc>
 800e06e:	4602      	mov	r2, r0
 800e070:	b928      	cbnz	r0, 800e07e <__mdiff+0x2e>
 800e072:	4b3f      	ldr	r3, [pc, #252]	@ (800e170 <__mdiff+0x120>)
 800e074:	f240 2137 	movw	r1, #567	@ 0x237
 800e078:	483e      	ldr	r0, [pc, #248]	@ (800e174 <__mdiff+0x124>)
 800e07a:	f001 fc4d 	bl	800f918 <__assert_func>
 800e07e:	2301      	movs	r3, #1
 800e080:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e084:	4610      	mov	r0, r2
 800e086:	b003      	add	sp, #12
 800e088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08c:	bfbc      	itt	lt
 800e08e:	464b      	movlt	r3, r9
 800e090:	46a1      	movlt	r9, r4
 800e092:	4630      	mov	r0, r6
 800e094:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e098:	bfba      	itte	lt
 800e09a:	461c      	movlt	r4, r3
 800e09c:	2501      	movlt	r5, #1
 800e09e:	2500      	movge	r5, #0
 800e0a0:	f7ff fcf6 	bl	800da90 <_Balloc>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	b918      	cbnz	r0, 800e0b0 <__mdiff+0x60>
 800e0a8:	4b31      	ldr	r3, [pc, #196]	@ (800e170 <__mdiff+0x120>)
 800e0aa:	f240 2145 	movw	r1, #581	@ 0x245
 800e0ae:	e7e3      	b.n	800e078 <__mdiff+0x28>
 800e0b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e0b4:	6926      	ldr	r6, [r4, #16]
 800e0b6:	60c5      	str	r5, [r0, #12]
 800e0b8:	f109 0310 	add.w	r3, r9, #16
 800e0bc:	f109 0514 	add.w	r5, r9, #20
 800e0c0:	f104 0e14 	add.w	lr, r4, #20
 800e0c4:	f100 0b14 	add.w	fp, r0, #20
 800e0c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e0cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	46d9      	mov	r9, fp
 800e0d4:	f04f 0c00 	mov.w	ip, #0
 800e0d8:	9b01      	ldr	r3, [sp, #4]
 800e0da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e0de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e0e2:	9301      	str	r3, [sp, #4]
 800e0e4:	fa1f f38a 	uxth.w	r3, sl
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	b283      	uxth	r3, r0
 800e0ec:	1acb      	subs	r3, r1, r3
 800e0ee:	0c00      	lsrs	r0, r0, #16
 800e0f0:	4463      	add	r3, ip
 800e0f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e100:	4576      	cmp	r6, lr
 800e102:	f849 3b04 	str.w	r3, [r9], #4
 800e106:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e10a:	d8e5      	bhi.n	800e0d8 <__mdiff+0x88>
 800e10c:	1b33      	subs	r3, r6, r4
 800e10e:	3b15      	subs	r3, #21
 800e110:	f023 0303 	bic.w	r3, r3, #3
 800e114:	3415      	adds	r4, #21
 800e116:	3304      	adds	r3, #4
 800e118:	42a6      	cmp	r6, r4
 800e11a:	bf38      	it	cc
 800e11c:	2304      	movcc	r3, #4
 800e11e:	441d      	add	r5, r3
 800e120:	445b      	add	r3, fp
 800e122:	461e      	mov	r6, r3
 800e124:	462c      	mov	r4, r5
 800e126:	4544      	cmp	r4, r8
 800e128:	d30e      	bcc.n	800e148 <__mdiff+0xf8>
 800e12a:	f108 0103 	add.w	r1, r8, #3
 800e12e:	1b49      	subs	r1, r1, r5
 800e130:	f021 0103 	bic.w	r1, r1, #3
 800e134:	3d03      	subs	r5, #3
 800e136:	45a8      	cmp	r8, r5
 800e138:	bf38      	it	cc
 800e13a:	2100      	movcc	r1, #0
 800e13c:	440b      	add	r3, r1
 800e13e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e142:	b191      	cbz	r1, 800e16a <__mdiff+0x11a>
 800e144:	6117      	str	r7, [r2, #16]
 800e146:	e79d      	b.n	800e084 <__mdiff+0x34>
 800e148:	f854 1b04 	ldr.w	r1, [r4], #4
 800e14c:	46e6      	mov	lr, ip
 800e14e:	0c08      	lsrs	r0, r1, #16
 800e150:	fa1c fc81 	uxtah	ip, ip, r1
 800e154:	4471      	add	r1, lr
 800e156:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e15a:	b289      	uxth	r1, r1
 800e15c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e160:	f846 1b04 	str.w	r1, [r6], #4
 800e164:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e168:	e7dd      	b.n	800e126 <__mdiff+0xd6>
 800e16a:	3f01      	subs	r7, #1
 800e16c:	e7e7      	b.n	800e13e <__mdiff+0xee>
 800e16e:	bf00      	nop
 800e170:	08011eb1 	.word	0x08011eb1
 800e174:	08011ec2 	.word	0x08011ec2

0800e178 <__ulp>:
 800e178:	b082      	sub	sp, #8
 800e17a:	ed8d 0b00 	vstr	d0, [sp]
 800e17e:	9a01      	ldr	r2, [sp, #4]
 800e180:	4b0f      	ldr	r3, [pc, #60]	@ (800e1c0 <__ulp+0x48>)
 800e182:	4013      	ands	r3, r2
 800e184:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	dc08      	bgt.n	800e19e <__ulp+0x26>
 800e18c:	425b      	negs	r3, r3
 800e18e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e192:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e196:	da04      	bge.n	800e1a2 <__ulp+0x2a>
 800e198:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e19c:	4113      	asrs	r3, r2
 800e19e:	2200      	movs	r2, #0
 800e1a0:	e008      	b.n	800e1b4 <__ulp+0x3c>
 800e1a2:	f1a2 0314 	sub.w	r3, r2, #20
 800e1a6:	2b1e      	cmp	r3, #30
 800e1a8:	bfda      	itte	le
 800e1aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e1ae:	40da      	lsrle	r2, r3
 800e1b0:	2201      	movgt	r2, #1
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	ec41 0b10 	vmov	d0, r0, r1
 800e1bc:	b002      	add	sp, #8
 800e1be:	4770      	bx	lr
 800e1c0:	7ff00000 	.word	0x7ff00000

0800e1c4 <__b2d>:
 800e1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c8:	6906      	ldr	r6, [r0, #16]
 800e1ca:	f100 0814 	add.w	r8, r0, #20
 800e1ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e1d2:	1f37      	subs	r7, r6, #4
 800e1d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e1d8:	4610      	mov	r0, r2
 800e1da:	f7ff fd4b 	bl	800dc74 <__hi0bits>
 800e1de:	f1c0 0320 	rsb	r3, r0, #32
 800e1e2:	280a      	cmp	r0, #10
 800e1e4:	600b      	str	r3, [r1, #0]
 800e1e6:	491b      	ldr	r1, [pc, #108]	@ (800e254 <__b2d+0x90>)
 800e1e8:	dc15      	bgt.n	800e216 <__b2d+0x52>
 800e1ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800e1ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800e1f2:	45b8      	cmp	r8, r7
 800e1f4:	ea43 0501 	orr.w	r5, r3, r1
 800e1f8:	bf34      	ite	cc
 800e1fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e1fe:	2300      	movcs	r3, #0
 800e200:	3015      	adds	r0, #21
 800e202:	fa02 f000 	lsl.w	r0, r2, r0
 800e206:	fa23 f30c 	lsr.w	r3, r3, ip
 800e20a:	4303      	orrs	r3, r0
 800e20c:	461c      	mov	r4, r3
 800e20e:	ec45 4b10 	vmov	d0, r4, r5
 800e212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e216:	45b8      	cmp	r8, r7
 800e218:	bf3a      	itte	cc
 800e21a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e21e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e222:	2300      	movcs	r3, #0
 800e224:	380b      	subs	r0, #11
 800e226:	d012      	beq.n	800e24e <__b2d+0x8a>
 800e228:	f1c0 0120 	rsb	r1, r0, #32
 800e22c:	fa23 f401 	lsr.w	r4, r3, r1
 800e230:	4082      	lsls	r2, r0
 800e232:	4322      	orrs	r2, r4
 800e234:	4547      	cmp	r7, r8
 800e236:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e23a:	bf8c      	ite	hi
 800e23c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e240:	2200      	movls	r2, #0
 800e242:	4083      	lsls	r3, r0
 800e244:	40ca      	lsrs	r2, r1
 800e246:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e24a:	4313      	orrs	r3, r2
 800e24c:	e7de      	b.n	800e20c <__b2d+0x48>
 800e24e:	ea42 0501 	orr.w	r5, r2, r1
 800e252:	e7db      	b.n	800e20c <__b2d+0x48>
 800e254:	3ff00000 	.word	0x3ff00000

0800e258 <__d2b>:
 800e258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e25c:	460f      	mov	r7, r1
 800e25e:	2101      	movs	r1, #1
 800e260:	ec59 8b10 	vmov	r8, r9, d0
 800e264:	4616      	mov	r6, r2
 800e266:	f7ff fc13 	bl	800da90 <_Balloc>
 800e26a:	4604      	mov	r4, r0
 800e26c:	b930      	cbnz	r0, 800e27c <__d2b+0x24>
 800e26e:	4602      	mov	r2, r0
 800e270:	4b23      	ldr	r3, [pc, #140]	@ (800e300 <__d2b+0xa8>)
 800e272:	4824      	ldr	r0, [pc, #144]	@ (800e304 <__d2b+0xac>)
 800e274:	f240 310f 	movw	r1, #783	@ 0x30f
 800e278:	f001 fb4e 	bl	800f918 <__assert_func>
 800e27c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e284:	b10d      	cbz	r5, 800e28a <__d2b+0x32>
 800e286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e28a:	9301      	str	r3, [sp, #4]
 800e28c:	f1b8 0300 	subs.w	r3, r8, #0
 800e290:	d023      	beq.n	800e2da <__d2b+0x82>
 800e292:	4668      	mov	r0, sp
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	f7ff fd0c 	bl	800dcb2 <__lo0bits>
 800e29a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e29e:	b1d0      	cbz	r0, 800e2d6 <__d2b+0x7e>
 800e2a0:	f1c0 0320 	rsb	r3, r0, #32
 800e2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a8:	430b      	orrs	r3, r1
 800e2aa:	40c2      	lsrs	r2, r0
 800e2ac:	6163      	str	r3, [r4, #20]
 800e2ae:	9201      	str	r2, [sp, #4]
 800e2b0:	9b01      	ldr	r3, [sp, #4]
 800e2b2:	61a3      	str	r3, [r4, #24]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	bf0c      	ite	eq
 800e2b8:	2201      	moveq	r2, #1
 800e2ba:	2202      	movne	r2, #2
 800e2bc:	6122      	str	r2, [r4, #16]
 800e2be:	b1a5      	cbz	r5, 800e2ea <__d2b+0x92>
 800e2c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e2c4:	4405      	add	r5, r0
 800e2c6:	603d      	str	r5, [r7, #0]
 800e2c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e2cc:	6030      	str	r0, [r6, #0]
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	b003      	add	sp, #12
 800e2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2d6:	6161      	str	r1, [r4, #20]
 800e2d8:	e7ea      	b.n	800e2b0 <__d2b+0x58>
 800e2da:	a801      	add	r0, sp, #4
 800e2dc:	f7ff fce9 	bl	800dcb2 <__lo0bits>
 800e2e0:	9b01      	ldr	r3, [sp, #4]
 800e2e2:	6163      	str	r3, [r4, #20]
 800e2e4:	3020      	adds	r0, #32
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	e7e8      	b.n	800e2bc <__d2b+0x64>
 800e2ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e2f2:	6038      	str	r0, [r7, #0]
 800e2f4:	6918      	ldr	r0, [r3, #16]
 800e2f6:	f7ff fcbd 	bl	800dc74 <__hi0bits>
 800e2fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2fe:	e7e5      	b.n	800e2cc <__d2b+0x74>
 800e300:	08011eb1 	.word	0x08011eb1
 800e304:	08011ec2 	.word	0x08011ec2

0800e308 <__ratio>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	b085      	sub	sp, #20
 800e30e:	e9cd 1000 	strd	r1, r0, [sp]
 800e312:	a902      	add	r1, sp, #8
 800e314:	f7ff ff56 	bl	800e1c4 <__b2d>
 800e318:	9800      	ldr	r0, [sp, #0]
 800e31a:	a903      	add	r1, sp, #12
 800e31c:	ec55 4b10 	vmov	r4, r5, d0
 800e320:	f7ff ff50 	bl	800e1c4 <__b2d>
 800e324:	9b01      	ldr	r3, [sp, #4]
 800e326:	6919      	ldr	r1, [r3, #16]
 800e328:	9b00      	ldr	r3, [sp, #0]
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	1ac9      	subs	r1, r1, r3
 800e32e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e332:	1a9b      	subs	r3, r3, r2
 800e334:	ec5b ab10 	vmov	sl, fp, d0
 800e338:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bfce      	itee	gt
 800e340:	462a      	movgt	r2, r5
 800e342:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e346:	465a      	movle	r2, fp
 800e348:	462f      	mov	r7, r5
 800e34a:	46d9      	mov	r9, fp
 800e34c:	bfcc      	ite	gt
 800e34e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e352:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e356:	464b      	mov	r3, r9
 800e358:	4652      	mov	r2, sl
 800e35a:	4620      	mov	r0, r4
 800e35c:	4639      	mov	r1, r7
 800e35e:	f7f2 fa75 	bl	800084c <__aeabi_ddiv>
 800e362:	ec41 0b10 	vmov	d0, r0, r1
 800e366:	b005      	add	sp, #20
 800e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e36c <__copybits>:
 800e36c:	3901      	subs	r1, #1
 800e36e:	b570      	push	{r4, r5, r6, lr}
 800e370:	1149      	asrs	r1, r1, #5
 800e372:	6914      	ldr	r4, [r2, #16]
 800e374:	3101      	adds	r1, #1
 800e376:	f102 0314 	add.w	r3, r2, #20
 800e37a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e37e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e382:	1f05      	subs	r5, r0, #4
 800e384:	42a3      	cmp	r3, r4
 800e386:	d30c      	bcc.n	800e3a2 <__copybits+0x36>
 800e388:	1aa3      	subs	r3, r4, r2
 800e38a:	3b11      	subs	r3, #17
 800e38c:	f023 0303 	bic.w	r3, r3, #3
 800e390:	3211      	adds	r2, #17
 800e392:	42a2      	cmp	r2, r4
 800e394:	bf88      	it	hi
 800e396:	2300      	movhi	r3, #0
 800e398:	4418      	add	r0, r3
 800e39a:	2300      	movs	r3, #0
 800e39c:	4288      	cmp	r0, r1
 800e39e:	d305      	bcc.n	800e3ac <__copybits+0x40>
 800e3a0:	bd70      	pop	{r4, r5, r6, pc}
 800e3a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e3a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e3aa:	e7eb      	b.n	800e384 <__copybits+0x18>
 800e3ac:	f840 3b04 	str.w	r3, [r0], #4
 800e3b0:	e7f4      	b.n	800e39c <__copybits+0x30>

0800e3b2 <__any_on>:
 800e3b2:	f100 0214 	add.w	r2, r0, #20
 800e3b6:	6900      	ldr	r0, [r0, #16]
 800e3b8:	114b      	asrs	r3, r1, #5
 800e3ba:	4298      	cmp	r0, r3
 800e3bc:	b510      	push	{r4, lr}
 800e3be:	db11      	blt.n	800e3e4 <__any_on+0x32>
 800e3c0:	dd0a      	ble.n	800e3d8 <__any_on+0x26>
 800e3c2:	f011 011f 	ands.w	r1, r1, #31
 800e3c6:	d007      	beq.n	800e3d8 <__any_on+0x26>
 800e3c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e3cc:	fa24 f001 	lsr.w	r0, r4, r1
 800e3d0:	fa00 f101 	lsl.w	r1, r0, r1
 800e3d4:	428c      	cmp	r4, r1
 800e3d6:	d10b      	bne.n	800e3f0 <__any_on+0x3e>
 800e3d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d803      	bhi.n	800e3e8 <__any_on+0x36>
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	bd10      	pop	{r4, pc}
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	e7f7      	b.n	800e3d8 <__any_on+0x26>
 800e3e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3ec:	2900      	cmp	r1, #0
 800e3ee:	d0f5      	beq.n	800e3dc <__any_on+0x2a>
 800e3f0:	2001      	movs	r0, #1
 800e3f2:	e7f6      	b.n	800e3e2 <__any_on+0x30>

0800e3f4 <sulp>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	460d      	mov	r5, r1
 800e3fa:	ec45 4b10 	vmov	d0, r4, r5
 800e3fe:	4616      	mov	r6, r2
 800e400:	f7ff feba 	bl	800e178 <__ulp>
 800e404:	ec51 0b10 	vmov	r0, r1, d0
 800e408:	b17e      	cbz	r6, 800e42a <sulp+0x36>
 800e40a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e40e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e412:	2b00      	cmp	r3, #0
 800e414:	dd09      	ble.n	800e42a <sulp+0x36>
 800e416:	051b      	lsls	r3, r3, #20
 800e418:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e41c:	2400      	movs	r4, #0
 800e41e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e422:	4622      	mov	r2, r4
 800e424:	462b      	mov	r3, r5
 800e426:	f7f2 f8e7 	bl	80005f8 <__aeabi_dmul>
 800e42a:	ec41 0b10 	vmov	d0, r0, r1
 800e42e:	bd70      	pop	{r4, r5, r6, pc}

0800e430 <_strtod_l>:
 800e430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e434:	b09f      	sub	sp, #124	@ 0x7c
 800e436:	460c      	mov	r4, r1
 800e438:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e43a:	2200      	movs	r2, #0
 800e43c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e43e:	9005      	str	r0, [sp, #20]
 800e440:	f04f 0a00 	mov.w	sl, #0
 800e444:	f04f 0b00 	mov.w	fp, #0
 800e448:	460a      	mov	r2, r1
 800e44a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e44c:	7811      	ldrb	r1, [r2, #0]
 800e44e:	292b      	cmp	r1, #43	@ 0x2b
 800e450:	d04a      	beq.n	800e4e8 <_strtod_l+0xb8>
 800e452:	d838      	bhi.n	800e4c6 <_strtod_l+0x96>
 800e454:	290d      	cmp	r1, #13
 800e456:	d832      	bhi.n	800e4be <_strtod_l+0x8e>
 800e458:	2908      	cmp	r1, #8
 800e45a:	d832      	bhi.n	800e4c2 <_strtod_l+0x92>
 800e45c:	2900      	cmp	r1, #0
 800e45e:	d03b      	beq.n	800e4d8 <_strtod_l+0xa8>
 800e460:	2200      	movs	r2, #0
 800e462:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e464:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e466:	782a      	ldrb	r2, [r5, #0]
 800e468:	2a30      	cmp	r2, #48	@ 0x30
 800e46a:	f040 80b3 	bne.w	800e5d4 <_strtod_l+0x1a4>
 800e46e:	786a      	ldrb	r2, [r5, #1]
 800e470:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e474:	2a58      	cmp	r2, #88	@ 0x58
 800e476:	d16e      	bne.n	800e556 <_strtod_l+0x126>
 800e478:	9302      	str	r3, [sp, #8]
 800e47a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e47c:	9301      	str	r3, [sp, #4]
 800e47e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	4a8e      	ldr	r2, [pc, #568]	@ (800e6bc <_strtod_l+0x28c>)
 800e484:	9805      	ldr	r0, [sp, #20]
 800e486:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e488:	a919      	add	r1, sp, #100	@ 0x64
 800e48a:	f001 fadf 	bl	800fa4c <__gethex>
 800e48e:	f010 060f 	ands.w	r6, r0, #15
 800e492:	4604      	mov	r4, r0
 800e494:	d005      	beq.n	800e4a2 <_strtod_l+0x72>
 800e496:	2e06      	cmp	r6, #6
 800e498:	d128      	bne.n	800e4ec <_strtod_l+0xbc>
 800e49a:	3501      	adds	r5, #1
 800e49c:	2300      	movs	r3, #0
 800e49e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e4a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f040 858e 	bne.w	800efc6 <_strtod_l+0xb96>
 800e4aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4ac:	b1cb      	cbz	r3, 800e4e2 <_strtod_l+0xb2>
 800e4ae:	4652      	mov	r2, sl
 800e4b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e4b4:	ec43 2b10 	vmov	d0, r2, r3
 800e4b8:	b01f      	add	sp, #124	@ 0x7c
 800e4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4be:	2920      	cmp	r1, #32
 800e4c0:	d1ce      	bne.n	800e460 <_strtod_l+0x30>
 800e4c2:	3201      	adds	r2, #1
 800e4c4:	e7c1      	b.n	800e44a <_strtod_l+0x1a>
 800e4c6:	292d      	cmp	r1, #45	@ 0x2d
 800e4c8:	d1ca      	bne.n	800e460 <_strtod_l+0x30>
 800e4ca:	2101      	movs	r1, #1
 800e4cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e4ce:	1c51      	adds	r1, r2, #1
 800e4d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800e4d2:	7852      	ldrb	r2, [r2, #1]
 800e4d4:	2a00      	cmp	r2, #0
 800e4d6:	d1c5      	bne.n	800e464 <_strtod_l+0x34>
 800e4d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4da:	9419      	str	r4, [sp, #100]	@ 0x64
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f040 8570 	bne.w	800efc2 <_strtod_l+0xb92>
 800e4e2:	4652      	mov	r2, sl
 800e4e4:	465b      	mov	r3, fp
 800e4e6:	e7e5      	b.n	800e4b4 <_strtod_l+0x84>
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	e7ef      	b.n	800e4cc <_strtod_l+0x9c>
 800e4ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e4ee:	b13a      	cbz	r2, 800e500 <_strtod_l+0xd0>
 800e4f0:	2135      	movs	r1, #53	@ 0x35
 800e4f2:	a81c      	add	r0, sp, #112	@ 0x70
 800e4f4:	f7ff ff3a 	bl	800e36c <__copybits>
 800e4f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4fa:	9805      	ldr	r0, [sp, #20]
 800e4fc:	f7ff fb08 	bl	800db10 <_Bfree>
 800e500:	3e01      	subs	r6, #1
 800e502:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e504:	2e04      	cmp	r6, #4
 800e506:	d806      	bhi.n	800e516 <_strtod_l+0xe6>
 800e508:	e8df f006 	tbb	[pc, r6]
 800e50c:	201d0314 	.word	0x201d0314
 800e510:	14          	.byte	0x14
 800e511:	00          	.byte	0x00
 800e512:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e516:	05e1      	lsls	r1, r4, #23
 800e518:	bf48      	it	mi
 800e51a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e51e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e522:	0d1b      	lsrs	r3, r3, #20
 800e524:	051b      	lsls	r3, r3, #20
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1bb      	bne.n	800e4a2 <_strtod_l+0x72>
 800e52a:	f7fe fb23 	bl	800cb74 <__errno>
 800e52e:	2322      	movs	r3, #34	@ 0x22
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	e7b6      	b.n	800e4a2 <_strtod_l+0x72>
 800e534:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e538:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e53c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e540:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e544:	e7e7      	b.n	800e516 <_strtod_l+0xe6>
 800e546:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e6c4 <_strtod_l+0x294>
 800e54a:	e7e4      	b.n	800e516 <_strtod_l+0xe6>
 800e54c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e550:	f04f 3aff 	mov.w	sl, #4294967295
 800e554:	e7df      	b.n	800e516 <_strtod_l+0xe6>
 800e556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e55c:	785b      	ldrb	r3, [r3, #1]
 800e55e:	2b30      	cmp	r3, #48	@ 0x30
 800e560:	d0f9      	beq.n	800e556 <_strtod_l+0x126>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d09d      	beq.n	800e4a2 <_strtod_l+0x72>
 800e566:	2301      	movs	r3, #1
 800e568:	9309      	str	r3, [sp, #36]	@ 0x24
 800e56a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e56c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e56e:	2300      	movs	r3, #0
 800e570:	9308      	str	r3, [sp, #32]
 800e572:	930a      	str	r3, [sp, #40]	@ 0x28
 800e574:	461f      	mov	r7, r3
 800e576:	220a      	movs	r2, #10
 800e578:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e57a:	7805      	ldrb	r5, [r0, #0]
 800e57c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e580:	b2d9      	uxtb	r1, r3
 800e582:	2909      	cmp	r1, #9
 800e584:	d928      	bls.n	800e5d8 <_strtod_l+0x1a8>
 800e586:	494e      	ldr	r1, [pc, #312]	@ (800e6c0 <_strtod_l+0x290>)
 800e588:	2201      	movs	r2, #1
 800e58a:	f001 f979 	bl	800f880 <strncmp>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d032      	beq.n	800e5f8 <_strtod_l+0x1c8>
 800e592:	2000      	movs	r0, #0
 800e594:	462a      	mov	r2, r5
 800e596:	4681      	mov	r9, r0
 800e598:	463d      	mov	r5, r7
 800e59a:	4603      	mov	r3, r0
 800e59c:	2a65      	cmp	r2, #101	@ 0x65
 800e59e:	d001      	beq.n	800e5a4 <_strtod_l+0x174>
 800e5a0:	2a45      	cmp	r2, #69	@ 0x45
 800e5a2:	d114      	bne.n	800e5ce <_strtod_l+0x19e>
 800e5a4:	b91d      	cbnz	r5, 800e5ae <_strtod_l+0x17e>
 800e5a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5a8:	4302      	orrs	r2, r0
 800e5aa:	d095      	beq.n	800e4d8 <_strtod_l+0xa8>
 800e5ac:	2500      	movs	r5, #0
 800e5ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e5b0:	1c62      	adds	r2, r4, #1
 800e5b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e5b4:	7862      	ldrb	r2, [r4, #1]
 800e5b6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e5b8:	d077      	beq.n	800e6aa <_strtod_l+0x27a>
 800e5ba:	2a2d      	cmp	r2, #45	@ 0x2d
 800e5bc:	d07b      	beq.n	800e6b6 <_strtod_l+0x286>
 800e5be:	f04f 0c00 	mov.w	ip, #0
 800e5c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e5c6:	2909      	cmp	r1, #9
 800e5c8:	f240 8082 	bls.w	800e6d0 <_strtod_l+0x2a0>
 800e5cc:	9419      	str	r4, [sp, #100]	@ 0x64
 800e5ce:	f04f 0800 	mov.w	r8, #0
 800e5d2:	e0a2      	b.n	800e71a <_strtod_l+0x2ea>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	e7c7      	b.n	800e568 <_strtod_l+0x138>
 800e5d8:	2f08      	cmp	r7, #8
 800e5da:	bfd5      	itete	le
 800e5dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e5de:	9908      	ldrgt	r1, [sp, #32]
 800e5e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e5e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e5e8:	f100 0001 	add.w	r0, r0, #1
 800e5ec:	bfd4      	ite	le
 800e5ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e5f0:	9308      	strgt	r3, [sp, #32]
 800e5f2:	3701      	adds	r7, #1
 800e5f4:	9019      	str	r0, [sp, #100]	@ 0x64
 800e5f6:	e7bf      	b.n	800e578 <_strtod_l+0x148>
 800e5f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800e5fe:	785a      	ldrb	r2, [r3, #1]
 800e600:	b37f      	cbz	r7, 800e662 <_strtod_l+0x232>
 800e602:	4681      	mov	r9, r0
 800e604:	463d      	mov	r5, r7
 800e606:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e60a:	2b09      	cmp	r3, #9
 800e60c:	d912      	bls.n	800e634 <_strtod_l+0x204>
 800e60e:	2301      	movs	r3, #1
 800e610:	e7c4      	b.n	800e59c <_strtod_l+0x16c>
 800e612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e614:	1c5a      	adds	r2, r3, #1
 800e616:	9219      	str	r2, [sp, #100]	@ 0x64
 800e618:	785a      	ldrb	r2, [r3, #1]
 800e61a:	3001      	adds	r0, #1
 800e61c:	2a30      	cmp	r2, #48	@ 0x30
 800e61e:	d0f8      	beq.n	800e612 <_strtod_l+0x1e2>
 800e620:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e624:	2b08      	cmp	r3, #8
 800e626:	f200 84d3 	bhi.w	800efd0 <_strtod_l+0xba0>
 800e62a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e62c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e62e:	4681      	mov	r9, r0
 800e630:	2000      	movs	r0, #0
 800e632:	4605      	mov	r5, r0
 800e634:	3a30      	subs	r2, #48	@ 0x30
 800e636:	f100 0301 	add.w	r3, r0, #1
 800e63a:	d02a      	beq.n	800e692 <_strtod_l+0x262>
 800e63c:	4499      	add	r9, r3
 800e63e:	eb00 0c05 	add.w	ip, r0, r5
 800e642:	462b      	mov	r3, r5
 800e644:	210a      	movs	r1, #10
 800e646:	4563      	cmp	r3, ip
 800e648:	d10d      	bne.n	800e666 <_strtod_l+0x236>
 800e64a:	1c69      	adds	r1, r5, #1
 800e64c:	4401      	add	r1, r0
 800e64e:	4428      	add	r0, r5
 800e650:	2808      	cmp	r0, #8
 800e652:	dc16      	bgt.n	800e682 <_strtod_l+0x252>
 800e654:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e656:	230a      	movs	r3, #10
 800e658:	fb03 2300 	mla	r3, r3, r0, r2
 800e65c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e65e:	2300      	movs	r3, #0
 800e660:	e018      	b.n	800e694 <_strtod_l+0x264>
 800e662:	4638      	mov	r0, r7
 800e664:	e7da      	b.n	800e61c <_strtod_l+0x1ec>
 800e666:	2b08      	cmp	r3, #8
 800e668:	f103 0301 	add.w	r3, r3, #1
 800e66c:	dc03      	bgt.n	800e676 <_strtod_l+0x246>
 800e66e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e670:	434e      	muls	r6, r1
 800e672:	960a      	str	r6, [sp, #40]	@ 0x28
 800e674:	e7e7      	b.n	800e646 <_strtod_l+0x216>
 800e676:	2b10      	cmp	r3, #16
 800e678:	bfde      	ittt	le
 800e67a:	9e08      	ldrle	r6, [sp, #32]
 800e67c:	434e      	mulle	r6, r1
 800e67e:	9608      	strle	r6, [sp, #32]
 800e680:	e7e1      	b.n	800e646 <_strtod_l+0x216>
 800e682:	280f      	cmp	r0, #15
 800e684:	dceb      	bgt.n	800e65e <_strtod_l+0x22e>
 800e686:	9808      	ldr	r0, [sp, #32]
 800e688:	230a      	movs	r3, #10
 800e68a:	fb03 2300 	mla	r3, r3, r0, r2
 800e68e:	9308      	str	r3, [sp, #32]
 800e690:	e7e5      	b.n	800e65e <_strtod_l+0x22e>
 800e692:	4629      	mov	r1, r5
 800e694:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e696:	1c50      	adds	r0, r2, #1
 800e698:	9019      	str	r0, [sp, #100]	@ 0x64
 800e69a:	7852      	ldrb	r2, [r2, #1]
 800e69c:	4618      	mov	r0, r3
 800e69e:	460d      	mov	r5, r1
 800e6a0:	e7b1      	b.n	800e606 <_strtod_l+0x1d6>
 800e6a2:	f04f 0900 	mov.w	r9, #0
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e77d      	b.n	800e5a6 <_strtod_l+0x176>
 800e6aa:	f04f 0c00 	mov.w	ip, #0
 800e6ae:	1ca2      	adds	r2, r4, #2
 800e6b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6b2:	78a2      	ldrb	r2, [r4, #2]
 800e6b4:	e785      	b.n	800e5c2 <_strtod_l+0x192>
 800e6b6:	f04f 0c01 	mov.w	ip, #1
 800e6ba:	e7f8      	b.n	800e6ae <_strtod_l+0x27e>
 800e6bc:	08012030 	.word	0x08012030
 800e6c0:	08012018 	.word	0x08012018
 800e6c4:	7ff00000 	.word	0x7ff00000
 800e6c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6ca:	1c51      	adds	r1, r2, #1
 800e6cc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e6ce:	7852      	ldrb	r2, [r2, #1]
 800e6d0:	2a30      	cmp	r2, #48	@ 0x30
 800e6d2:	d0f9      	beq.n	800e6c8 <_strtod_l+0x298>
 800e6d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e6d8:	2908      	cmp	r1, #8
 800e6da:	f63f af78 	bhi.w	800e5ce <_strtod_l+0x19e>
 800e6de:	3a30      	subs	r2, #48	@ 0x30
 800e6e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e6e6:	f04f 080a 	mov.w	r8, #10
 800e6ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6ec:	1c56      	adds	r6, r2, #1
 800e6ee:	9619      	str	r6, [sp, #100]	@ 0x64
 800e6f0:	7852      	ldrb	r2, [r2, #1]
 800e6f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e6f6:	f1be 0f09 	cmp.w	lr, #9
 800e6fa:	d939      	bls.n	800e770 <_strtod_l+0x340>
 800e6fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e6fe:	1a76      	subs	r6, r6, r1
 800e700:	2e08      	cmp	r6, #8
 800e702:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e706:	dc03      	bgt.n	800e710 <_strtod_l+0x2e0>
 800e708:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e70a:	4588      	cmp	r8, r1
 800e70c:	bfa8      	it	ge
 800e70e:	4688      	movge	r8, r1
 800e710:	f1bc 0f00 	cmp.w	ip, #0
 800e714:	d001      	beq.n	800e71a <_strtod_l+0x2ea>
 800e716:	f1c8 0800 	rsb	r8, r8, #0
 800e71a:	2d00      	cmp	r5, #0
 800e71c:	d14e      	bne.n	800e7bc <_strtod_l+0x38c>
 800e71e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e720:	4308      	orrs	r0, r1
 800e722:	f47f aebe 	bne.w	800e4a2 <_strtod_l+0x72>
 800e726:	2b00      	cmp	r3, #0
 800e728:	f47f aed6 	bne.w	800e4d8 <_strtod_l+0xa8>
 800e72c:	2a69      	cmp	r2, #105	@ 0x69
 800e72e:	d028      	beq.n	800e782 <_strtod_l+0x352>
 800e730:	dc25      	bgt.n	800e77e <_strtod_l+0x34e>
 800e732:	2a49      	cmp	r2, #73	@ 0x49
 800e734:	d025      	beq.n	800e782 <_strtod_l+0x352>
 800e736:	2a4e      	cmp	r2, #78	@ 0x4e
 800e738:	f47f aece 	bne.w	800e4d8 <_strtod_l+0xa8>
 800e73c:	499b      	ldr	r1, [pc, #620]	@ (800e9ac <_strtod_l+0x57c>)
 800e73e:	a819      	add	r0, sp, #100	@ 0x64
 800e740:	f001 fba6 	bl	800fe90 <__match>
 800e744:	2800      	cmp	r0, #0
 800e746:	f43f aec7 	beq.w	800e4d8 <_strtod_l+0xa8>
 800e74a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	2b28      	cmp	r3, #40	@ 0x28
 800e750:	d12e      	bne.n	800e7b0 <_strtod_l+0x380>
 800e752:	4997      	ldr	r1, [pc, #604]	@ (800e9b0 <_strtod_l+0x580>)
 800e754:	aa1c      	add	r2, sp, #112	@ 0x70
 800e756:	a819      	add	r0, sp, #100	@ 0x64
 800e758:	f001 fbae 	bl	800feb8 <__hexnan>
 800e75c:	2805      	cmp	r0, #5
 800e75e:	d127      	bne.n	800e7b0 <_strtod_l+0x380>
 800e760:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e762:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e766:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e76a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e76e:	e698      	b.n	800e4a2 <_strtod_l+0x72>
 800e770:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e772:	fb08 2101 	mla	r1, r8, r1, r2
 800e776:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e77a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e77c:	e7b5      	b.n	800e6ea <_strtod_l+0x2ba>
 800e77e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e780:	e7da      	b.n	800e738 <_strtod_l+0x308>
 800e782:	498c      	ldr	r1, [pc, #560]	@ (800e9b4 <_strtod_l+0x584>)
 800e784:	a819      	add	r0, sp, #100	@ 0x64
 800e786:	f001 fb83 	bl	800fe90 <__match>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	f43f aea4 	beq.w	800e4d8 <_strtod_l+0xa8>
 800e790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e792:	4989      	ldr	r1, [pc, #548]	@ (800e9b8 <_strtod_l+0x588>)
 800e794:	3b01      	subs	r3, #1
 800e796:	a819      	add	r0, sp, #100	@ 0x64
 800e798:	9319      	str	r3, [sp, #100]	@ 0x64
 800e79a:	f001 fb79 	bl	800fe90 <__match>
 800e79e:	b910      	cbnz	r0, 800e7a6 <_strtod_l+0x376>
 800e7a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e7a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e9c8 <_strtod_l+0x598>
 800e7aa:	f04f 0a00 	mov.w	sl, #0
 800e7ae:	e678      	b.n	800e4a2 <_strtod_l+0x72>
 800e7b0:	4882      	ldr	r0, [pc, #520]	@ (800e9bc <_strtod_l+0x58c>)
 800e7b2:	f001 f8a9 	bl	800f908 <nan>
 800e7b6:	ec5b ab10 	vmov	sl, fp, d0
 800e7ba:	e672      	b.n	800e4a2 <_strtod_l+0x72>
 800e7bc:	eba8 0309 	sub.w	r3, r8, r9
 800e7c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e7c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7c4:	2f00      	cmp	r7, #0
 800e7c6:	bf08      	it	eq
 800e7c8:	462f      	moveq	r7, r5
 800e7ca:	2d10      	cmp	r5, #16
 800e7cc:	462c      	mov	r4, r5
 800e7ce:	bfa8      	it	ge
 800e7d0:	2410      	movge	r4, #16
 800e7d2:	f7f1 fe97 	bl	8000504 <__aeabi_ui2d>
 800e7d6:	2d09      	cmp	r5, #9
 800e7d8:	4682      	mov	sl, r0
 800e7da:	468b      	mov	fp, r1
 800e7dc:	dc13      	bgt.n	800e806 <_strtod_l+0x3d6>
 800e7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f43f ae5e 	beq.w	800e4a2 <_strtod_l+0x72>
 800e7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e8:	dd78      	ble.n	800e8dc <_strtod_l+0x4ac>
 800e7ea:	2b16      	cmp	r3, #22
 800e7ec:	dc5f      	bgt.n	800e8ae <_strtod_l+0x47e>
 800e7ee:	4974      	ldr	r1, [pc, #464]	@ (800e9c0 <_strtod_l+0x590>)
 800e7f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7f8:	4652      	mov	r2, sl
 800e7fa:	465b      	mov	r3, fp
 800e7fc:	f7f1 fefc 	bl	80005f8 <__aeabi_dmul>
 800e800:	4682      	mov	sl, r0
 800e802:	468b      	mov	fp, r1
 800e804:	e64d      	b.n	800e4a2 <_strtod_l+0x72>
 800e806:	4b6e      	ldr	r3, [pc, #440]	@ (800e9c0 <_strtod_l+0x590>)
 800e808:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e80c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e810:	f7f1 fef2 	bl	80005f8 <__aeabi_dmul>
 800e814:	4682      	mov	sl, r0
 800e816:	9808      	ldr	r0, [sp, #32]
 800e818:	468b      	mov	fp, r1
 800e81a:	f7f1 fe73 	bl	8000504 <__aeabi_ui2d>
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	4650      	mov	r0, sl
 800e824:	4659      	mov	r1, fp
 800e826:	f7f1 fd31 	bl	800028c <__adddf3>
 800e82a:	2d0f      	cmp	r5, #15
 800e82c:	4682      	mov	sl, r0
 800e82e:	468b      	mov	fp, r1
 800e830:	ddd5      	ble.n	800e7de <_strtod_l+0x3ae>
 800e832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e834:	1b2c      	subs	r4, r5, r4
 800e836:	441c      	add	r4, r3
 800e838:	2c00      	cmp	r4, #0
 800e83a:	f340 8096 	ble.w	800e96a <_strtod_l+0x53a>
 800e83e:	f014 030f 	ands.w	r3, r4, #15
 800e842:	d00a      	beq.n	800e85a <_strtod_l+0x42a>
 800e844:	495e      	ldr	r1, [pc, #376]	@ (800e9c0 <_strtod_l+0x590>)
 800e846:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e84a:	4652      	mov	r2, sl
 800e84c:	465b      	mov	r3, fp
 800e84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e852:	f7f1 fed1 	bl	80005f8 <__aeabi_dmul>
 800e856:	4682      	mov	sl, r0
 800e858:	468b      	mov	fp, r1
 800e85a:	f034 040f 	bics.w	r4, r4, #15
 800e85e:	d073      	beq.n	800e948 <_strtod_l+0x518>
 800e860:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e864:	dd48      	ble.n	800e8f8 <_strtod_l+0x4c8>
 800e866:	2400      	movs	r4, #0
 800e868:	46a0      	mov	r8, r4
 800e86a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e86c:	46a1      	mov	r9, r4
 800e86e:	9a05      	ldr	r2, [sp, #20]
 800e870:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e9c8 <_strtod_l+0x598>
 800e874:	2322      	movs	r3, #34	@ 0x22
 800e876:	6013      	str	r3, [r2, #0]
 800e878:	f04f 0a00 	mov.w	sl, #0
 800e87c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f43f ae0f 	beq.w	800e4a2 <_strtod_l+0x72>
 800e884:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e886:	9805      	ldr	r0, [sp, #20]
 800e888:	f7ff f942 	bl	800db10 <_Bfree>
 800e88c:	9805      	ldr	r0, [sp, #20]
 800e88e:	4649      	mov	r1, r9
 800e890:	f7ff f93e 	bl	800db10 <_Bfree>
 800e894:	9805      	ldr	r0, [sp, #20]
 800e896:	4641      	mov	r1, r8
 800e898:	f7ff f93a 	bl	800db10 <_Bfree>
 800e89c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e89e:	9805      	ldr	r0, [sp, #20]
 800e8a0:	f7ff f936 	bl	800db10 <_Bfree>
 800e8a4:	9805      	ldr	r0, [sp, #20]
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	f7ff f932 	bl	800db10 <_Bfree>
 800e8ac:	e5f9      	b.n	800e4a2 <_strtod_l+0x72>
 800e8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	dbbc      	blt.n	800e832 <_strtod_l+0x402>
 800e8b8:	4c41      	ldr	r4, [pc, #260]	@ (800e9c0 <_strtod_l+0x590>)
 800e8ba:	f1c5 050f 	rsb	r5, r5, #15
 800e8be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e8c2:	4652      	mov	r2, sl
 800e8c4:	465b      	mov	r3, fp
 800e8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8ca:	f7f1 fe95 	bl	80005f8 <__aeabi_dmul>
 800e8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d0:	1b5d      	subs	r5, r3, r5
 800e8d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e8d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e8da:	e78f      	b.n	800e7fc <_strtod_l+0x3cc>
 800e8dc:	3316      	adds	r3, #22
 800e8de:	dba8      	blt.n	800e832 <_strtod_l+0x402>
 800e8e0:	4b37      	ldr	r3, [pc, #220]	@ (800e9c0 <_strtod_l+0x590>)
 800e8e2:	eba9 0808 	sub.w	r8, r9, r8
 800e8e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e8ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e8ee:	4650      	mov	r0, sl
 800e8f0:	4659      	mov	r1, fp
 800e8f2:	f7f1 ffab 	bl	800084c <__aeabi_ddiv>
 800e8f6:	e783      	b.n	800e800 <_strtod_l+0x3d0>
 800e8f8:	4b32      	ldr	r3, [pc, #200]	@ (800e9c4 <_strtod_l+0x594>)
 800e8fa:	9308      	str	r3, [sp, #32]
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	1124      	asrs	r4, r4, #4
 800e900:	4650      	mov	r0, sl
 800e902:	4659      	mov	r1, fp
 800e904:	461e      	mov	r6, r3
 800e906:	2c01      	cmp	r4, #1
 800e908:	dc21      	bgt.n	800e94e <_strtod_l+0x51e>
 800e90a:	b10b      	cbz	r3, 800e910 <_strtod_l+0x4e0>
 800e90c:	4682      	mov	sl, r0
 800e90e:	468b      	mov	fp, r1
 800e910:	492c      	ldr	r1, [pc, #176]	@ (800e9c4 <_strtod_l+0x594>)
 800e912:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e916:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e91a:	4652      	mov	r2, sl
 800e91c:	465b      	mov	r3, fp
 800e91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e922:	f7f1 fe69 	bl	80005f8 <__aeabi_dmul>
 800e926:	4b28      	ldr	r3, [pc, #160]	@ (800e9c8 <_strtod_l+0x598>)
 800e928:	460a      	mov	r2, r1
 800e92a:	400b      	ands	r3, r1
 800e92c:	4927      	ldr	r1, [pc, #156]	@ (800e9cc <_strtod_l+0x59c>)
 800e92e:	428b      	cmp	r3, r1
 800e930:	4682      	mov	sl, r0
 800e932:	d898      	bhi.n	800e866 <_strtod_l+0x436>
 800e934:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e938:	428b      	cmp	r3, r1
 800e93a:	bf86      	itte	hi
 800e93c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e9d0 <_strtod_l+0x5a0>
 800e940:	f04f 3aff 	movhi.w	sl, #4294967295
 800e944:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e948:	2300      	movs	r3, #0
 800e94a:	9308      	str	r3, [sp, #32]
 800e94c:	e07a      	b.n	800ea44 <_strtod_l+0x614>
 800e94e:	07e2      	lsls	r2, r4, #31
 800e950:	d505      	bpl.n	800e95e <_strtod_l+0x52e>
 800e952:	9b08      	ldr	r3, [sp, #32]
 800e954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e958:	f7f1 fe4e 	bl	80005f8 <__aeabi_dmul>
 800e95c:	2301      	movs	r3, #1
 800e95e:	9a08      	ldr	r2, [sp, #32]
 800e960:	3208      	adds	r2, #8
 800e962:	3601      	adds	r6, #1
 800e964:	1064      	asrs	r4, r4, #1
 800e966:	9208      	str	r2, [sp, #32]
 800e968:	e7cd      	b.n	800e906 <_strtod_l+0x4d6>
 800e96a:	d0ed      	beq.n	800e948 <_strtod_l+0x518>
 800e96c:	4264      	negs	r4, r4
 800e96e:	f014 020f 	ands.w	r2, r4, #15
 800e972:	d00a      	beq.n	800e98a <_strtod_l+0x55a>
 800e974:	4b12      	ldr	r3, [pc, #72]	@ (800e9c0 <_strtod_l+0x590>)
 800e976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e97a:	4650      	mov	r0, sl
 800e97c:	4659      	mov	r1, fp
 800e97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e982:	f7f1 ff63 	bl	800084c <__aeabi_ddiv>
 800e986:	4682      	mov	sl, r0
 800e988:	468b      	mov	fp, r1
 800e98a:	1124      	asrs	r4, r4, #4
 800e98c:	d0dc      	beq.n	800e948 <_strtod_l+0x518>
 800e98e:	2c1f      	cmp	r4, #31
 800e990:	dd20      	ble.n	800e9d4 <_strtod_l+0x5a4>
 800e992:	2400      	movs	r4, #0
 800e994:	46a0      	mov	r8, r4
 800e996:	940a      	str	r4, [sp, #40]	@ 0x28
 800e998:	46a1      	mov	r9, r4
 800e99a:	9a05      	ldr	r2, [sp, #20]
 800e99c:	2322      	movs	r3, #34	@ 0x22
 800e99e:	f04f 0a00 	mov.w	sl, #0
 800e9a2:	f04f 0b00 	mov.w	fp, #0
 800e9a6:	6013      	str	r3, [r2, #0]
 800e9a8:	e768      	b.n	800e87c <_strtod_l+0x44c>
 800e9aa:	bf00      	nop
 800e9ac:	08011e09 	.word	0x08011e09
 800e9b0:	0801201c 	.word	0x0801201c
 800e9b4:	08011e01 	.word	0x08011e01
 800e9b8:	08011e38 	.word	0x08011e38
 800e9bc:	080121c5 	.word	0x080121c5
 800e9c0:	08011f50 	.word	0x08011f50
 800e9c4:	08011f28 	.word	0x08011f28
 800e9c8:	7ff00000 	.word	0x7ff00000
 800e9cc:	7ca00000 	.word	0x7ca00000
 800e9d0:	7fefffff 	.word	0x7fefffff
 800e9d4:	f014 0310 	ands.w	r3, r4, #16
 800e9d8:	bf18      	it	ne
 800e9da:	236a      	movne	r3, #106	@ 0x6a
 800e9dc:	4ea9      	ldr	r6, [pc, #676]	@ (800ec84 <_strtod_l+0x854>)
 800e9de:	9308      	str	r3, [sp, #32]
 800e9e0:	4650      	mov	r0, sl
 800e9e2:	4659      	mov	r1, fp
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	07e2      	lsls	r2, r4, #31
 800e9e8:	d504      	bpl.n	800e9f4 <_strtod_l+0x5c4>
 800e9ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e9ee:	f7f1 fe03 	bl	80005f8 <__aeabi_dmul>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	1064      	asrs	r4, r4, #1
 800e9f6:	f106 0608 	add.w	r6, r6, #8
 800e9fa:	d1f4      	bne.n	800e9e6 <_strtod_l+0x5b6>
 800e9fc:	b10b      	cbz	r3, 800ea02 <_strtod_l+0x5d2>
 800e9fe:	4682      	mov	sl, r0
 800ea00:	468b      	mov	fp, r1
 800ea02:	9b08      	ldr	r3, [sp, #32]
 800ea04:	b1b3      	cbz	r3, 800ea34 <_strtod_l+0x604>
 800ea06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ea0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	4659      	mov	r1, fp
 800ea12:	dd0f      	ble.n	800ea34 <_strtod_l+0x604>
 800ea14:	2b1f      	cmp	r3, #31
 800ea16:	dd55      	ble.n	800eac4 <_strtod_l+0x694>
 800ea18:	2b34      	cmp	r3, #52	@ 0x34
 800ea1a:	bfde      	ittt	le
 800ea1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ea20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ea24:	4093      	lslle	r3, r2
 800ea26:	f04f 0a00 	mov.w	sl, #0
 800ea2a:	bfcc      	ite	gt
 800ea2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ea30:	ea03 0b01 	andle.w	fp, r3, r1
 800ea34:	2200      	movs	r2, #0
 800ea36:	2300      	movs	r3, #0
 800ea38:	4650      	mov	r0, sl
 800ea3a:	4659      	mov	r1, fp
 800ea3c:	f7f2 f844 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d1a6      	bne.n	800e992 <_strtod_l+0x562>
 800ea44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ea4a:	9805      	ldr	r0, [sp, #20]
 800ea4c:	462b      	mov	r3, r5
 800ea4e:	463a      	mov	r2, r7
 800ea50:	f7ff f8c6 	bl	800dbe0 <__s2b>
 800ea54:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea56:	2800      	cmp	r0, #0
 800ea58:	f43f af05 	beq.w	800e866 <_strtod_l+0x436>
 800ea5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea5e:	2a00      	cmp	r2, #0
 800ea60:	eba9 0308 	sub.w	r3, r9, r8
 800ea64:	bfa8      	it	ge
 800ea66:	2300      	movge	r3, #0
 800ea68:	9312      	str	r3, [sp, #72]	@ 0x48
 800ea6a:	2400      	movs	r4, #0
 800ea6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ea70:	9316      	str	r3, [sp, #88]	@ 0x58
 800ea72:	46a0      	mov	r8, r4
 800ea74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea76:	9805      	ldr	r0, [sp, #20]
 800ea78:	6859      	ldr	r1, [r3, #4]
 800ea7a:	f7ff f809 	bl	800da90 <_Balloc>
 800ea7e:	4681      	mov	r9, r0
 800ea80:	2800      	cmp	r0, #0
 800ea82:	f43f aef4 	beq.w	800e86e <_strtod_l+0x43e>
 800ea86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea88:	691a      	ldr	r2, [r3, #16]
 800ea8a:	3202      	adds	r2, #2
 800ea8c:	f103 010c 	add.w	r1, r3, #12
 800ea90:	0092      	lsls	r2, r2, #2
 800ea92:	300c      	adds	r0, #12
 800ea94:	f7fe f89b 	bl	800cbce <memcpy>
 800ea98:	ec4b ab10 	vmov	d0, sl, fp
 800ea9c:	9805      	ldr	r0, [sp, #20]
 800ea9e:	aa1c      	add	r2, sp, #112	@ 0x70
 800eaa0:	a91b      	add	r1, sp, #108	@ 0x6c
 800eaa2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800eaa6:	f7ff fbd7 	bl	800e258 <__d2b>
 800eaaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f43f aede 	beq.w	800e86e <_strtod_l+0x43e>
 800eab2:	9805      	ldr	r0, [sp, #20]
 800eab4:	2101      	movs	r1, #1
 800eab6:	f7ff f929 	bl	800dd0c <__i2b>
 800eaba:	4680      	mov	r8, r0
 800eabc:	b948      	cbnz	r0, 800ead2 <_strtod_l+0x6a2>
 800eabe:	f04f 0800 	mov.w	r8, #0
 800eac2:	e6d4      	b.n	800e86e <_strtod_l+0x43e>
 800eac4:	f04f 32ff 	mov.w	r2, #4294967295
 800eac8:	fa02 f303 	lsl.w	r3, r2, r3
 800eacc:	ea03 0a0a 	and.w	sl, r3, sl
 800ead0:	e7b0      	b.n	800ea34 <_strtod_l+0x604>
 800ead2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ead4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ead6:	2d00      	cmp	r5, #0
 800ead8:	bfab      	itete	ge
 800eada:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800eadc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800eade:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800eae0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800eae2:	bfac      	ite	ge
 800eae4:	18ef      	addge	r7, r5, r3
 800eae6:	1b5e      	sublt	r6, r3, r5
 800eae8:	9b08      	ldr	r3, [sp, #32]
 800eaea:	1aed      	subs	r5, r5, r3
 800eaec:	4415      	add	r5, r2
 800eaee:	4b66      	ldr	r3, [pc, #408]	@ (800ec88 <_strtod_l+0x858>)
 800eaf0:	3d01      	subs	r5, #1
 800eaf2:	429d      	cmp	r5, r3
 800eaf4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eaf8:	da50      	bge.n	800eb9c <_strtod_l+0x76c>
 800eafa:	1b5b      	subs	r3, r3, r5
 800eafc:	2b1f      	cmp	r3, #31
 800eafe:	eba2 0203 	sub.w	r2, r2, r3
 800eb02:	f04f 0101 	mov.w	r1, #1
 800eb06:	dc3d      	bgt.n	800eb84 <_strtod_l+0x754>
 800eb08:	fa01 f303 	lsl.w	r3, r1, r3
 800eb0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb0e:	2300      	movs	r3, #0
 800eb10:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb12:	18bd      	adds	r5, r7, r2
 800eb14:	9b08      	ldr	r3, [sp, #32]
 800eb16:	42af      	cmp	r7, r5
 800eb18:	4416      	add	r6, r2
 800eb1a:	441e      	add	r6, r3
 800eb1c:	463b      	mov	r3, r7
 800eb1e:	bfa8      	it	ge
 800eb20:	462b      	movge	r3, r5
 800eb22:	42b3      	cmp	r3, r6
 800eb24:	bfa8      	it	ge
 800eb26:	4633      	movge	r3, r6
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	bfc2      	ittt	gt
 800eb2c:	1aed      	subgt	r5, r5, r3
 800eb2e:	1af6      	subgt	r6, r6, r3
 800eb30:	1aff      	subgt	r7, r7, r3
 800eb32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	dd16      	ble.n	800eb66 <_strtod_l+0x736>
 800eb38:	4641      	mov	r1, r8
 800eb3a:	9805      	ldr	r0, [sp, #20]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	f7ff f9a5 	bl	800de8c <__pow5mult>
 800eb42:	4680      	mov	r8, r0
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d0ba      	beq.n	800eabe <_strtod_l+0x68e>
 800eb48:	4601      	mov	r1, r0
 800eb4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eb4c:	9805      	ldr	r0, [sp, #20]
 800eb4e:	f7ff f8f3 	bl	800dd38 <__multiply>
 800eb52:	900e      	str	r0, [sp, #56]	@ 0x38
 800eb54:	2800      	cmp	r0, #0
 800eb56:	f43f ae8a 	beq.w	800e86e <_strtod_l+0x43e>
 800eb5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb5c:	9805      	ldr	r0, [sp, #20]
 800eb5e:	f7fe ffd7 	bl	800db10 <_Bfree>
 800eb62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb64:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb66:	2d00      	cmp	r5, #0
 800eb68:	dc1d      	bgt.n	800eba6 <_strtod_l+0x776>
 800eb6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	dd23      	ble.n	800ebb8 <_strtod_l+0x788>
 800eb70:	4649      	mov	r1, r9
 800eb72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eb74:	9805      	ldr	r0, [sp, #20]
 800eb76:	f7ff f989 	bl	800de8c <__pow5mult>
 800eb7a:	4681      	mov	r9, r0
 800eb7c:	b9e0      	cbnz	r0, 800ebb8 <_strtod_l+0x788>
 800eb7e:	f04f 0900 	mov.w	r9, #0
 800eb82:	e674      	b.n	800e86e <_strtod_l+0x43e>
 800eb84:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800eb88:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800eb8c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eb90:	35e2      	adds	r5, #226	@ 0xe2
 800eb92:	fa01 f305 	lsl.w	r3, r1, r5
 800eb96:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb98:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eb9a:	e7ba      	b.n	800eb12 <_strtod_l+0x6e2>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800eba0:	2301      	movs	r3, #1
 800eba2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eba4:	e7b5      	b.n	800eb12 <_strtod_l+0x6e2>
 800eba6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eba8:	9805      	ldr	r0, [sp, #20]
 800ebaa:	462a      	mov	r2, r5
 800ebac:	f7ff f9c8 	bl	800df40 <__lshift>
 800ebb0:	901a      	str	r0, [sp, #104]	@ 0x68
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	d1d9      	bne.n	800eb6a <_strtod_l+0x73a>
 800ebb6:	e65a      	b.n	800e86e <_strtod_l+0x43e>
 800ebb8:	2e00      	cmp	r6, #0
 800ebba:	dd07      	ble.n	800ebcc <_strtod_l+0x79c>
 800ebbc:	4649      	mov	r1, r9
 800ebbe:	9805      	ldr	r0, [sp, #20]
 800ebc0:	4632      	mov	r2, r6
 800ebc2:	f7ff f9bd 	bl	800df40 <__lshift>
 800ebc6:	4681      	mov	r9, r0
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d0d8      	beq.n	800eb7e <_strtod_l+0x74e>
 800ebcc:	2f00      	cmp	r7, #0
 800ebce:	dd08      	ble.n	800ebe2 <_strtod_l+0x7b2>
 800ebd0:	4641      	mov	r1, r8
 800ebd2:	9805      	ldr	r0, [sp, #20]
 800ebd4:	463a      	mov	r2, r7
 800ebd6:	f7ff f9b3 	bl	800df40 <__lshift>
 800ebda:	4680      	mov	r8, r0
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f43f ae46 	beq.w	800e86e <_strtod_l+0x43e>
 800ebe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebe4:	9805      	ldr	r0, [sp, #20]
 800ebe6:	464a      	mov	r2, r9
 800ebe8:	f7ff fa32 	bl	800e050 <__mdiff>
 800ebec:	4604      	mov	r4, r0
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f43f ae3d 	beq.w	800e86e <_strtod_l+0x43e>
 800ebf4:	68c3      	ldr	r3, [r0, #12]
 800ebf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	60c3      	str	r3, [r0, #12]
 800ebfc:	4641      	mov	r1, r8
 800ebfe:	f7ff fa0b 	bl	800e018 <__mcmp>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	da46      	bge.n	800ec94 <_strtod_l+0x864>
 800ec06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec08:	ea53 030a 	orrs.w	r3, r3, sl
 800ec0c:	d16c      	bne.n	800ece8 <_strtod_l+0x8b8>
 800ec0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d168      	bne.n	800ece8 <_strtod_l+0x8b8>
 800ec16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec1a:	0d1b      	lsrs	r3, r3, #20
 800ec1c:	051b      	lsls	r3, r3, #20
 800ec1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec22:	d961      	bls.n	800ece8 <_strtod_l+0x8b8>
 800ec24:	6963      	ldr	r3, [r4, #20]
 800ec26:	b913      	cbnz	r3, 800ec2e <_strtod_l+0x7fe>
 800ec28:	6923      	ldr	r3, [r4, #16]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	dd5c      	ble.n	800ece8 <_strtod_l+0x8b8>
 800ec2e:	4621      	mov	r1, r4
 800ec30:	2201      	movs	r2, #1
 800ec32:	9805      	ldr	r0, [sp, #20]
 800ec34:	f7ff f984 	bl	800df40 <__lshift>
 800ec38:	4641      	mov	r1, r8
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	f7ff f9ec 	bl	800e018 <__mcmp>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	dd51      	ble.n	800ece8 <_strtod_l+0x8b8>
 800ec44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec48:	9a08      	ldr	r2, [sp, #32]
 800ec4a:	0d1b      	lsrs	r3, r3, #20
 800ec4c:	051b      	lsls	r3, r3, #20
 800ec4e:	2a00      	cmp	r2, #0
 800ec50:	d06b      	beq.n	800ed2a <_strtod_l+0x8fa>
 800ec52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec56:	d868      	bhi.n	800ed2a <_strtod_l+0x8fa>
 800ec58:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ec5c:	f67f ae9d 	bls.w	800e99a <_strtod_l+0x56a>
 800ec60:	4b0a      	ldr	r3, [pc, #40]	@ (800ec8c <_strtod_l+0x85c>)
 800ec62:	4650      	mov	r0, sl
 800ec64:	4659      	mov	r1, fp
 800ec66:	2200      	movs	r2, #0
 800ec68:	f7f1 fcc6 	bl	80005f8 <__aeabi_dmul>
 800ec6c:	4b08      	ldr	r3, [pc, #32]	@ (800ec90 <_strtod_l+0x860>)
 800ec6e:	400b      	ands	r3, r1
 800ec70:	4682      	mov	sl, r0
 800ec72:	468b      	mov	fp, r1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f47f ae05 	bne.w	800e884 <_strtod_l+0x454>
 800ec7a:	9a05      	ldr	r2, [sp, #20]
 800ec7c:	2322      	movs	r3, #34	@ 0x22
 800ec7e:	6013      	str	r3, [r2, #0]
 800ec80:	e600      	b.n	800e884 <_strtod_l+0x454>
 800ec82:	bf00      	nop
 800ec84:	08012048 	.word	0x08012048
 800ec88:	fffffc02 	.word	0xfffffc02
 800ec8c:	39500000 	.word	0x39500000
 800ec90:	7ff00000 	.word	0x7ff00000
 800ec94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ec98:	d165      	bne.n	800ed66 <_strtod_l+0x936>
 800ec9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ec9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eca0:	b35a      	cbz	r2, 800ecfa <_strtod_l+0x8ca>
 800eca2:	4a9f      	ldr	r2, [pc, #636]	@ (800ef20 <_strtod_l+0xaf0>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d12b      	bne.n	800ed00 <_strtod_l+0x8d0>
 800eca8:	9b08      	ldr	r3, [sp, #32]
 800ecaa:	4651      	mov	r1, sl
 800ecac:	b303      	cbz	r3, 800ecf0 <_strtod_l+0x8c0>
 800ecae:	4b9d      	ldr	r3, [pc, #628]	@ (800ef24 <_strtod_l+0xaf4>)
 800ecb0:	465a      	mov	r2, fp
 800ecb2:	4013      	ands	r3, r2
 800ecb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ecb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ecbc:	d81b      	bhi.n	800ecf6 <_strtod_l+0x8c6>
 800ecbe:	0d1b      	lsrs	r3, r3, #20
 800ecc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ecc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ecc8:	4299      	cmp	r1, r3
 800ecca:	d119      	bne.n	800ed00 <_strtod_l+0x8d0>
 800eccc:	4b96      	ldr	r3, [pc, #600]	@ (800ef28 <_strtod_l+0xaf8>)
 800ecce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d102      	bne.n	800ecda <_strtod_l+0x8aa>
 800ecd4:	3101      	adds	r1, #1
 800ecd6:	f43f adca 	beq.w	800e86e <_strtod_l+0x43e>
 800ecda:	4b92      	ldr	r3, [pc, #584]	@ (800ef24 <_strtod_l+0xaf4>)
 800ecdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecde:	401a      	ands	r2, r3
 800ece0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ece4:	f04f 0a00 	mov.w	sl, #0
 800ece8:	9b08      	ldr	r3, [sp, #32]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1b8      	bne.n	800ec60 <_strtod_l+0x830>
 800ecee:	e5c9      	b.n	800e884 <_strtod_l+0x454>
 800ecf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf4:	e7e8      	b.n	800ecc8 <_strtod_l+0x898>
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	e7e6      	b.n	800ecc8 <_strtod_l+0x898>
 800ecfa:	ea53 030a 	orrs.w	r3, r3, sl
 800ecfe:	d0a1      	beq.n	800ec44 <_strtod_l+0x814>
 800ed00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed02:	b1db      	cbz	r3, 800ed3c <_strtod_l+0x90c>
 800ed04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed06:	4213      	tst	r3, r2
 800ed08:	d0ee      	beq.n	800ece8 <_strtod_l+0x8b8>
 800ed0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0c:	9a08      	ldr	r2, [sp, #32]
 800ed0e:	4650      	mov	r0, sl
 800ed10:	4659      	mov	r1, fp
 800ed12:	b1bb      	cbz	r3, 800ed44 <_strtod_l+0x914>
 800ed14:	f7ff fb6e 	bl	800e3f4 <sulp>
 800ed18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed1c:	ec53 2b10 	vmov	r2, r3, d0
 800ed20:	f7f1 fab4 	bl	800028c <__adddf3>
 800ed24:	4682      	mov	sl, r0
 800ed26:	468b      	mov	fp, r1
 800ed28:	e7de      	b.n	800ece8 <_strtod_l+0x8b8>
 800ed2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ed2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed36:	f04f 3aff 	mov.w	sl, #4294967295
 800ed3a:	e7d5      	b.n	800ece8 <_strtod_l+0x8b8>
 800ed3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed3e:	ea13 0f0a 	tst.w	r3, sl
 800ed42:	e7e1      	b.n	800ed08 <_strtod_l+0x8d8>
 800ed44:	f7ff fb56 	bl	800e3f4 <sulp>
 800ed48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed4c:	ec53 2b10 	vmov	r2, r3, d0
 800ed50:	f7f1 fa9a 	bl	8000288 <__aeabi_dsub>
 800ed54:	2200      	movs	r2, #0
 800ed56:	2300      	movs	r3, #0
 800ed58:	4682      	mov	sl, r0
 800ed5a:	468b      	mov	fp, r1
 800ed5c:	f7f1 feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d0c1      	beq.n	800ece8 <_strtod_l+0x8b8>
 800ed64:	e619      	b.n	800e99a <_strtod_l+0x56a>
 800ed66:	4641      	mov	r1, r8
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f7ff facd 	bl	800e308 <__ratio>
 800ed6e:	ec57 6b10 	vmov	r6, r7, d0
 800ed72:	2200      	movs	r2, #0
 800ed74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ed78:	4630      	mov	r0, r6
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	f7f1 feb8 	bl	8000af0 <__aeabi_dcmple>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d06f      	beq.n	800ee64 <_strtod_l+0xa34>
 800ed84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d17a      	bne.n	800ee80 <_strtod_l+0xa50>
 800ed8a:	f1ba 0f00 	cmp.w	sl, #0
 800ed8e:	d158      	bne.n	800ee42 <_strtod_l+0xa12>
 800ed90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d15a      	bne.n	800ee50 <_strtod_l+0xa20>
 800ed9a:	4b64      	ldr	r3, [pc, #400]	@ (800ef2c <_strtod_l+0xafc>)
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	4630      	mov	r0, r6
 800eda0:	4639      	mov	r1, r7
 800eda2:	f7f1 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d159      	bne.n	800ee5e <_strtod_l+0xa2e>
 800edaa:	4630      	mov	r0, r6
 800edac:	4639      	mov	r1, r7
 800edae:	4b60      	ldr	r3, [pc, #384]	@ (800ef30 <_strtod_l+0xb00>)
 800edb0:	2200      	movs	r2, #0
 800edb2:	f7f1 fc21 	bl	80005f8 <__aeabi_dmul>
 800edb6:	4606      	mov	r6, r0
 800edb8:	460f      	mov	r7, r1
 800edba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800edbe:	9606      	str	r6, [sp, #24]
 800edc0:	9307      	str	r3, [sp, #28]
 800edc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edc6:	4d57      	ldr	r5, [pc, #348]	@ (800ef24 <_strtod_l+0xaf4>)
 800edc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800edcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edce:	401d      	ands	r5, r3
 800edd0:	4b58      	ldr	r3, [pc, #352]	@ (800ef34 <_strtod_l+0xb04>)
 800edd2:	429d      	cmp	r5, r3
 800edd4:	f040 80b2 	bne.w	800ef3c <_strtod_l+0xb0c>
 800edd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edda:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800edde:	ec4b ab10 	vmov	d0, sl, fp
 800ede2:	f7ff f9c9 	bl	800e178 <__ulp>
 800ede6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edea:	ec51 0b10 	vmov	r0, r1, d0
 800edee:	f7f1 fc03 	bl	80005f8 <__aeabi_dmul>
 800edf2:	4652      	mov	r2, sl
 800edf4:	465b      	mov	r3, fp
 800edf6:	f7f1 fa49 	bl	800028c <__adddf3>
 800edfa:	460b      	mov	r3, r1
 800edfc:	4949      	ldr	r1, [pc, #292]	@ (800ef24 <_strtod_l+0xaf4>)
 800edfe:	4a4e      	ldr	r2, [pc, #312]	@ (800ef38 <_strtod_l+0xb08>)
 800ee00:	4019      	ands	r1, r3
 800ee02:	4291      	cmp	r1, r2
 800ee04:	4682      	mov	sl, r0
 800ee06:	d942      	bls.n	800ee8e <_strtod_l+0xa5e>
 800ee08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee0a:	4b47      	ldr	r3, [pc, #284]	@ (800ef28 <_strtod_l+0xaf8>)
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d103      	bne.n	800ee18 <_strtod_l+0x9e8>
 800ee10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee12:	3301      	adds	r3, #1
 800ee14:	f43f ad2b 	beq.w	800e86e <_strtod_l+0x43e>
 800ee18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ef28 <_strtod_l+0xaf8>
 800ee1c:	f04f 3aff 	mov.w	sl, #4294967295
 800ee20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee22:	9805      	ldr	r0, [sp, #20]
 800ee24:	f7fe fe74 	bl	800db10 <_Bfree>
 800ee28:	9805      	ldr	r0, [sp, #20]
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	f7fe fe70 	bl	800db10 <_Bfree>
 800ee30:	9805      	ldr	r0, [sp, #20]
 800ee32:	4641      	mov	r1, r8
 800ee34:	f7fe fe6c 	bl	800db10 <_Bfree>
 800ee38:	9805      	ldr	r0, [sp, #20]
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	f7fe fe68 	bl	800db10 <_Bfree>
 800ee40:	e618      	b.n	800ea74 <_strtod_l+0x644>
 800ee42:	f1ba 0f01 	cmp.w	sl, #1
 800ee46:	d103      	bne.n	800ee50 <_strtod_l+0xa20>
 800ee48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f43f ada5 	beq.w	800e99a <_strtod_l+0x56a>
 800ee50:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ef00 <_strtod_l+0xad0>
 800ee54:	4f35      	ldr	r7, [pc, #212]	@ (800ef2c <_strtod_l+0xafc>)
 800ee56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee5a:	2600      	movs	r6, #0
 800ee5c:	e7b1      	b.n	800edc2 <_strtod_l+0x992>
 800ee5e:	4f34      	ldr	r7, [pc, #208]	@ (800ef30 <_strtod_l+0xb00>)
 800ee60:	2600      	movs	r6, #0
 800ee62:	e7aa      	b.n	800edba <_strtod_l+0x98a>
 800ee64:	4b32      	ldr	r3, [pc, #200]	@ (800ef30 <_strtod_l+0xb00>)
 800ee66:	4630      	mov	r0, r6
 800ee68:	4639      	mov	r1, r7
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f7f1 fbc4 	bl	80005f8 <__aeabi_dmul>
 800ee70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee72:	4606      	mov	r6, r0
 800ee74:	460f      	mov	r7, r1
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d09f      	beq.n	800edba <_strtod_l+0x98a>
 800ee7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ee7e:	e7a0      	b.n	800edc2 <_strtod_l+0x992>
 800ee80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ef08 <_strtod_l+0xad8>
 800ee84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee88:	ec57 6b17 	vmov	r6, r7, d7
 800ee8c:	e799      	b.n	800edc2 <_strtod_l+0x992>
 800ee8e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ee92:	9b08      	ldr	r3, [sp, #32]
 800ee94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1c1      	bne.n	800ee20 <_strtod_l+0x9f0>
 800ee9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eea0:	0d1b      	lsrs	r3, r3, #20
 800eea2:	051b      	lsls	r3, r3, #20
 800eea4:	429d      	cmp	r5, r3
 800eea6:	d1bb      	bne.n	800ee20 <_strtod_l+0x9f0>
 800eea8:	4630      	mov	r0, r6
 800eeaa:	4639      	mov	r1, r7
 800eeac:	f7f1 ff04 	bl	8000cb8 <__aeabi_d2lz>
 800eeb0:	f7f1 fb74 	bl	800059c <__aeabi_l2d>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	4630      	mov	r0, r6
 800eeba:	4639      	mov	r1, r7
 800eebc:	f7f1 f9e4 	bl	8000288 <__aeabi_dsub>
 800eec0:	460b      	mov	r3, r1
 800eec2:	4602      	mov	r2, r0
 800eec4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eec8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eece:	ea46 060a 	orr.w	r6, r6, sl
 800eed2:	431e      	orrs	r6, r3
 800eed4:	d06f      	beq.n	800efb6 <_strtod_l+0xb86>
 800eed6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ef10 <_strtod_l+0xae0>)
 800eed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eedc:	f7f1 fdfe 	bl	8000adc <__aeabi_dcmplt>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	f47f accf 	bne.w	800e884 <_strtod_l+0x454>
 800eee6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ef18 <_strtod_l+0xae8>)
 800eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eef0:	f7f1 fe12 	bl	8000b18 <__aeabi_dcmpgt>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d093      	beq.n	800ee20 <_strtod_l+0x9f0>
 800eef8:	e4c4      	b.n	800e884 <_strtod_l+0x454>
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w
 800ef00:	00000000 	.word	0x00000000
 800ef04:	bff00000 	.word	0xbff00000
 800ef08:	00000000 	.word	0x00000000
 800ef0c:	3ff00000 	.word	0x3ff00000
 800ef10:	94a03595 	.word	0x94a03595
 800ef14:	3fdfffff 	.word	0x3fdfffff
 800ef18:	35afe535 	.word	0x35afe535
 800ef1c:	3fe00000 	.word	0x3fe00000
 800ef20:	000fffff 	.word	0x000fffff
 800ef24:	7ff00000 	.word	0x7ff00000
 800ef28:	7fefffff 	.word	0x7fefffff
 800ef2c:	3ff00000 	.word	0x3ff00000
 800ef30:	3fe00000 	.word	0x3fe00000
 800ef34:	7fe00000 	.word	0x7fe00000
 800ef38:	7c9fffff 	.word	0x7c9fffff
 800ef3c:	9b08      	ldr	r3, [sp, #32]
 800ef3e:	b323      	cbz	r3, 800ef8a <_strtod_l+0xb5a>
 800ef40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ef44:	d821      	bhi.n	800ef8a <_strtod_l+0xb5a>
 800ef46:	a328      	add	r3, pc, #160	@ (adr r3, 800efe8 <_strtod_l+0xbb8>)
 800ef48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	4639      	mov	r1, r7
 800ef50:	f7f1 fdce 	bl	8000af0 <__aeabi_dcmple>
 800ef54:	b1a0      	cbz	r0, 800ef80 <_strtod_l+0xb50>
 800ef56:	4639      	mov	r1, r7
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f7f1 fe25 	bl	8000ba8 <__aeabi_d2uiz>
 800ef5e:	2801      	cmp	r0, #1
 800ef60:	bf38      	it	cc
 800ef62:	2001      	movcc	r0, #1
 800ef64:	f7f1 face 	bl	8000504 <__aeabi_ui2d>
 800ef68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	460f      	mov	r7, r1
 800ef6e:	b9fb      	cbnz	r3, 800efb0 <_strtod_l+0xb80>
 800ef70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef74:	9014      	str	r0, [sp, #80]	@ 0x50
 800ef76:	9315      	str	r3, [sp, #84]	@ 0x54
 800ef78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ef7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ef80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ef82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ef86:	1b5b      	subs	r3, r3, r5
 800ef88:	9311      	str	r3, [sp, #68]	@ 0x44
 800ef8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ef8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ef92:	f7ff f8f1 	bl	800e178 <__ulp>
 800ef96:	4650      	mov	r0, sl
 800ef98:	ec53 2b10 	vmov	r2, r3, d0
 800ef9c:	4659      	mov	r1, fp
 800ef9e:	f7f1 fb2b 	bl	80005f8 <__aeabi_dmul>
 800efa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800efa6:	f7f1 f971 	bl	800028c <__adddf3>
 800efaa:	4682      	mov	sl, r0
 800efac:	468b      	mov	fp, r1
 800efae:	e770      	b.n	800ee92 <_strtod_l+0xa62>
 800efb0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800efb4:	e7e0      	b.n	800ef78 <_strtod_l+0xb48>
 800efb6:	a30e      	add	r3, pc, #56	@ (adr r3, 800eff0 <_strtod_l+0xbc0>)
 800efb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbc:	f7f1 fd8e 	bl	8000adc <__aeabi_dcmplt>
 800efc0:	e798      	b.n	800eef4 <_strtod_l+0xac4>
 800efc2:	2300      	movs	r3, #0
 800efc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efc6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800efc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	f7ff ba6d 	b.w	800e4aa <_strtod_l+0x7a>
 800efd0:	2a65      	cmp	r2, #101	@ 0x65
 800efd2:	f43f ab66 	beq.w	800e6a2 <_strtod_l+0x272>
 800efd6:	2a45      	cmp	r2, #69	@ 0x45
 800efd8:	f43f ab63 	beq.w	800e6a2 <_strtod_l+0x272>
 800efdc:	2301      	movs	r3, #1
 800efde:	f7ff bb9e 	b.w	800e71e <_strtod_l+0x2ee>
 800efe2:	bf00      	nop
 800efe4:	f3af 8000 	nop.w
 800efe8:	ffc00000 	.word	0xffc00000
 800efec:	41dfffff 	.word	0x41dfffff
 800eff0:	94a03595 	.word	0x94a03595
 800eff4:	3fcfffff 	.word	0x3fcfffff

0800eff8 <_strtod_r>:
 800eff8:	4b01      	ldr	r3, [pc, #4]	@ (800f000 <_strtod_r+0x8>)
 800effa:	f7ff ba19 	b.w	800e430 <_strtod_l>
 800effe:	bf00      	nop
 800f000:	20000068 	.word	0x20000068

0800f004 <_strtol_l.constprop.0>:
 800f004:	2b24      	cmp	r3, #36	@ 0x24
 800f006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f00a:	4686      	mov	lr, r0
 800f00c:	4690      	mov	r8, r2
 800f00e:	d801      	bhi.n	800f014 <_strtol_l.constprop.0+0x10>
 800f010:	2b01      	cmp	r3, #1
 800f012:	d106      	bne.n	800f022 <_strtol_l.constprop.0+0x1e>
 800f014:	f7fd fdae 	bl	800cb74 <__errno>
 800f018:	2316      	movs	r3, #22
 800f01a:	6003      	str	r3, [r0, #0]
 800f01c:	2000      	movs	r0, #0
 800f01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f022:	4834      	ldr	r0, [pc, #208]	@ (800f0f4 <_strtol_l.constprop.0+0xf0>)
 800f024:	460d      	mov	r5, r1
 800f026:	462a      	mov	r2, r5
 800f028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f02c:	5d06      	ldrb	r6, [r0, r4]
 800f02e:	f016 0608 	ands.w	r6, r6, #8
 800f032:	d1f8      	bne.n	800f026 <_strtol_l.constprop.0+0x22>
 800f034:	2c2d      	cmp	r4, #45	@ 0x2d
 800f036:	d12d      	bne.n	800f094 <_strtol_l.constprop.0+0x90>
 800f038:	782c      	ldrb	r4, [r5, #0]
 800f03a:	2601      	movs	r6, #1
 800f03c:	1c95      	adds	r5, r2, #2
 800f03e:	f033 0210 	bics.w	r2, r3, #16
 800f042:	d109      	bne.n	800f058 <_strtol_l.constprop.0+0x54>
 800f044:	2c30      	cmp	r4, #48	@ 0x30
 800f046:	d12a      	bne.n	800f09e <_strtol_l.constprop.0+0x9a>
 800f048:	782a      	ldrb	r2, [r5, #0]
 800f04a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f04e:	2a58      	cmp	r2, #88	@ 0x58
 800f050:	d125      	bne.n	800f09e <_strtol_l.constprop.0+0x9a>
 800f052:	786c      	ldrb	r4, [r5, #1]
 800f054:	2310      	movs	r3, #16
 800f056:	3502      	adds	r5, #2
 800f058:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f05c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f060:	2200      	movs	r2, #0
 800f062:	fbbc f9f3 	udiv	r9, ip, r3
 800f066:	4610      	mov	r0, r2
 800f068:	fb03 ca19 	mls	sl, r3, r9, ip
 800f06c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f070:	2f09      	cmp	r7, #9
 800f072:	d81b      	bhi.n	800f0ac <_strtol_l.constprop.0+0xa8>
 800f074:	463c      	mov	r4, r7
 800f076:	42a3      	cmp	r3, r4
 800f078:	dd27      	ble.n	800f0ca <_strtol_l.constprop.0+0xc6>
 800f07a:	1c57      	adds	r7, r2, #1
 800f07c:	d007      	beq.n	800f08e <_strtol_l.constprop.0+0x8a>
 800f07e:	4581      	cmp	r9, r0
 800f080:	d320      	bcc.n	800f0c4 <_strtol_l.constprop.0+0xc0>
 800f082:	d101      	bne.n	800f088 <_strtol_l.constprop.0+0x84>
 800f084:	45a2      	cmp	sl, r4
 800f086:	db1d      	blt.n	800f0c4 <_strtol_l.constprop.0+0xc0>
 800f088:	fb00 4003 	mla	r0, r0, r3, r4
 800f08c:	2201      	movs	r2, #1
 800f08e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f092:	e7eb      	b.n	800f06c <_strtol_l.constprop.0+0x68>
 800f094:	2c2b      	cmp	r4, #43	@ 0x2b
 800f096:	bf04      	itt	eq
 800f098:	782c      	ldrbeq	r4, [r5, #0]
 800f09a:	1c95      	addeq	r5, r2, #2
 800f09c:	e7cf      	b.n	800f03e <_strtol_l.constprop.0+0x3a>
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1da      	bne.n	800f058 <_strtol_l.constprop.0+0x54>
 800f0a2:	2c30      	cmp	r4, #48	@ 0x30
 800f0a4:	bf0c      	ite	eq
 800f0a6:	2308      	moveq	r3, #8
 800f0a8:	230a      	movne	r3, #10
 800f0aa:	e7d5      	b.n	800f058 <_strtol_l.constprop.0+0x54>
 800f0ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f0b0:	2f19      	cmp	r7, #25
 800f0b2:	d801      	bhi.n	800f0b8 <_strtol_l.constprop.0+0xb4>
 800f0b4:	3c37      	subs	r4, #55	@ 0x37
 800f0b6:	e7de      	b.n	800f076 <_strtol_l.constprop.0+0x72>
 800f0b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f0bc:	2f19      	cmp	r7, #25
 800f0be:	d804      	bhi.n	800f0ca <_strtol_l.constprop.0+0xc6>
 800f0c0:	3c57      	subs	r4, #87	@ 0x57
 800f0c2:	e7d8      	b.n	800f076 <_strtol_l.constprop.0+0x72>
 800f0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c8:	e7e1      	b.n	800f08e <_strtol_l.constprop.0+0x8a>
 800f0ca:	1c53      	adds	r3, r2, #1
 800f0cc:	d108      	bne.n	800f0e0 <_strtol_l.constprop.0+0xdc>
 800f0ce:	2322      	movs	r3, #34	@ 0x22
 800f0d0:	f8ce 3000 	str.w	r3, [lr]
 800f0d4:	4660      	mov	r0, ip
 800f0d6:	f1b8 0f00 	cmp.w	r8, #0
 800f0da:	d0a0      	beq.n	800f01e <_strtol_l.constprop.0+0x1a>
 800f0dc:	1e69      	subs	r1, r5, #1
 800f0de:	e006      	b.n	800f0ee <_strtol_l.constprop.0+0xea>
 800f0e0:	b106      	cbz	r6, 800f0e4 <_strtol_l.constprop.0+0xe0>
 800f0e2:	4240      	negs	r0, r0
 800f0e4:	f1b8 0f00 	cmp.w	r8, #0
 800f0e8:	d099      	beq.n	800f01e <_strtol_l.constprop.0+0x1a>
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	d1f6      	bne.n	800f0dc <_strtol_l.constprop.0+0xd8>
 800f0ee:	f8c8 1000 	str.w	r1, [r8]
 800f0f2:	e794      	b.n	800f01e <_strtol_l.constprop.0+0x1a>
 800f0f4:	08012071 	.word	0x08012071

0800f0f8 <_strtol_r>:
 800f0f8:	f7ff bf84 	b.w	800f004 <_strtol_l.constprop.0>

0800f0fc <__ssputs_r>:
 800f0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f100:	688e      	ldr	r6, [r1, #8]
 800f102:	461f      	mov	r7, r3
 800f104:	42be      	cmp	r6, r7
 800f106:	680b      	ldr	r3, [r1, #0]
 800f108:	4682      	mov	sl, r0
 800f10a:	460c      	mov	r4, r1
 800f10c:	4690      	mov	r8, r2
 800f10e:	d82d      	bhi.n	800f16c <__ssputs_r+0x70>
 800f110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f114:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f118:	d026      	beq.n	800f168 <__ssputs_r+0x6c>
 800f11a:	6965      	ldr	r5, [r4, #20]
 800f11c:	6909      	ldr	r1, [r1, #16]
 800f11e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f122:	eba3 0901 	sub.w	r9, r3, r1
 800f126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f12a:	1c7b      	adds	r3, r7, #1
 800f12c:	444b      	add	r3, r9
 800f12e:	106d      	asrs	r5, r5, #1
 800f130:	429d      	cmp	r5, r3
 800f132:	bf38      	it	cc
 800f134:	461d      	movcc	r5, r3
 800f136:	0553      	lsls	r3, r2, #21
 800f138:	d527      	bpl.n	800f18a <__ssputs_r+0x8e>
 800f13a:	4629      	mov	r1, r5
 800f13c:	f7fe fc1c 	bl	800d978 <_malloc_r>
 800f140:	4606      	mov	r6, r0
 800f142:	b360      	cbz	r0, 800f19e <__ssputs_r+0xa2>
 800f144:	6921      	ldr	r1, [r4, #16]
 800f146:	464a      	mov	r2, r9
 800f148:	f7fd fd41 	bl	800cbce <memcpy>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	6126      	str	r6, [r4, #16]
 800f15a:	6165      	str	r5, [r4, #20]
 800f15c:	444e      	add	r6, r9
 800f15e:	eba5 0509 	sub.w	r5, r5, r9
 800f162:	6026      	str	r6, [r4, #0]
 800f164:	60a5      	str	r5, [r4, #8]
 800f166:	463e      	mov	r6, r7
 800f168:	42be      	cmp	r6, r7
 800f16a:	d900      	bls.n	800f16e <__ssputs_r+0x72>
 800f16c:	463e      	mov	r6, r7
 800f16e:	6820      	ldr	r0, [r4, #0]
 800f170:	4632      	mov	r2, r6
 800f172:	4641      	mov	r1, r8
 800f174:	f000 fb6a 	bl	800f84c <memmove>
 800f178:	68a3      	ldr	r3, [r4, #8]
 800f17a:	1b9b      	subs	r3, r3, r6
 800f17c:	60a3      	str	r3, [r4, #8]
 800f17e:	6823      	ldr	r3, [r4, #0]
 800f180:	4433      	add	r3, r6
 800f182:	6023      	str	r3, [r4, #0]
 800f184:	2000      	movs	r0, #0
 800f186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f18a:	462a      	mov	r2, r5
 800f18c:	f000 ff41 	bl	8010012 <_realloc_r>
 800f190:	4606      	mov	r6, r0
 800f192:	2800      	cmp	r0, #0
 800f194:	d1e0      	bne.n	800f158 <__ssputs_r+0x5c>
 800f196:	6921      	ldr	r1, [r4, #16]
 800f198:	4650      	mov	r0, sl
 800f19a:	f7fe fb79 	bl	800d890 <_free_r>
 800f19e:	230c      	movs	r3, #12
 800f1a0:	f8ca 3000 	str.w	r3, [sl]
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1aa:	81a3      	strh	r3, [r4, #12]
 800f1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b0:	e7e9      	b.n	800f186 <__ssputs_r+0x8a>
	...

0800f1b4 <_svfiprintf_r>:
 800f1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b8:	4698      	mov	r8, r3
 800f1ba:	898b      	ldrh	r3, [r1, #12]
 800f1bc:	061b      	lsls	r3, r3, #24
 800f1be:	b09d      	sub	sp, #116	@ 0x74
 800f1c0:	4607      	mov	r7, r0
 800f1c2:	460d      	mov	r5, r1
 800f1c4:	4614      	mov	r4, r2
 800f1c6:	d510      	bpl.n	800f1ea <_svfiprintf_r+0x36>
 800f1c8:	690b      	ldr	r3, [r1, #16]
 800f1ca:	b973      	cbnz	r3, 800f1ea <_svfiprintf_r+0x36>
 800f1cc:	2140      	movs	r1, #64	@ 0x40
 800f1ce:	f7fe fbd3 	bl	800d978 <_malloc_r>
 800f1d2:	6028      	str	r0, [r5, #0]
 800f1d4:	6128      	str	r0, [r5, #16]
 800f1d6:	b930      	cbnz	r0, 800f1e6 <_svfiprintf_r+0x32>
 800f1d8:	230c      	movs	r3, #12
 800f1da:	603b      	str	r3, [r7, #0]
 800f1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e0:	b01d      	add	sp, #116	@ 0x74
 800f1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e6:	2340      	movs	r3, #64	@ 0x40
 800f1e8:	616b      	str	r3, [r5, #20]
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ee:	2320      	movs	r3, #32
 800f1f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1f8:	2330      	movs	r3, #48	@ 0x30
 800f1fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f398 <_svfiprintf_r+0x1e4>
 800f1fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f202:	f04f 0901 	mov.w	r9, #1
 800f206:	4623      	mov	r3, r4
 800f208:	469a      	mov	sl, r3
 800f20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f20e:	b10a      	cbz	r2, 800f214 <_svfiprintf_r+0x60>
 800f210:	2a25      	cmp	r2, #37	@ 0x25
 800f212:	d1f9      	bne.n	800f208 <_svfiprintf_r+0x54>
 800f214:	ebba 0b04 	subs.w	fp, sl, r4
 800f218:	d00b      	beq.n	800f232 <_svfiprintf_r+0x7e>
 800f21a:	465b      	mov	r3, fp
 800f21c:	4622      	mov	r2, r4
 800f21e:	4629      	mov	r1, r5
 800f220:	4638      	mov	r0, r7
 800f222:	f7ff ff6b 	bl	800f0fc <__ssputs_r>
 800f226:	3001      	adds	r0, #1
 800f228:	f000 80a7 	beq.w	800f37a <_svfiprintf_r+0x1c6>
 800f22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f22e:	445a      	add	r2, fp
 800f230:	9209      	str	r2, [sp, #36]	@ 0x24
 800f232:	f89a 3000 	ldrb.w	r3, [sl]
 800f236:	2b00      	cmp	r3, #0
 800f238:	f000 809f 	beq.w	800f37a <_svfiprintf_r+0x1c6>
 800f23c:	2300      	movs	r3, #0
 800f23e:	f04f 32ff 	mov.w	r2, #4294967295
 800f242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f246:	f10a 0a01 	add.w	sl, sl, #1
 800f24a:	9304      	str	r3, [sp, #16]
 800f24c:	9307      	str	r3, [sp, #28]
 800f24e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f252:	931a      	str	r3, [sp, #104]	@ 0x68
 800f254:	4654      	mov	r4, sl
 800f256:	2205      	movs	r2, #5
 800f258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f25c:	484e      	ldr	r0, [pc, #312]	@ (800f398 <_svfiprintf_r+0x1e4>)
 800f25e:	f7f0 ffb7 	bl	80001d0 <memchr>
 800f262:	9a04      	ldr	r2, [sp, #16]
 800f264:	b9d8      	cbnz	r0, 800f29e <_svfiprintf_r+0xea>
 800f266:	06d0      	lsls	r0, r2, #27
 800f268:	bf44      	itt	mi
 800f26a:	2320      	movmi	r3, #32
 800f26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f270:	0711      	lsls	r1, r2, #28
 800f272:	bf44      	itt	mi
 800f274:	232b      	movmi	r3, #43	@ 0x2b
 800f276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f27a:	f89a 3000 	ldrb.w	r3, [sl]
 800f27e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f280:	d015      	beq.n	800f2ae <_svfiprintf_r+0xfa>
 800f282:	9a07      	ldr	r2, [sp, #28]
 800f284:	4654      	mov	r4, sl
 800f286:	2000      	movs	r0, #0
 800f288:	f04f 0c0a 	mov.w	ip, #10
 800f28c:	4621      	mov	r1, r4
 800f28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f292:	3b30      	subs	r3, #48	@ 0x30
 800f294:	2b09      	cmp	r3, #9
 800f296:	d94b      	bls.n	800f330 <_svfiprintf_r+0x17c>
 800f298:	b1b0      	cbz	r0, 800f2c8 <_svfiprintf_r+0x114>
 800f29a:	9207      	str	r2, [sp, #28]
 800f29c:	e014      	b.n	800f2c8 <_svfiprintf_r+0x114>
 800f29e:	eba0 0308 	sub.w	r3, r0, r8
 800f2a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	9304      	str	r3, [sp, #16]
 800f2aa:	46a2      	mov	sl, r4
 800f2ac:	e7d2      	b.n	800f254 <_svfiprintf_r+0xa0>
 800f2ae:	9b03      	ldr	r3, [sp, #12]
 800f2b0:	1d19      	adds	r1, r3, #4
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	9103      	str	r1, [sp, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	bfbb      	ittet	lt
 800f2ba:	425b      	neglt	r3, r3
 800f2bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f2c0:	9307      	strge	r3, [sp, #28]
 800f2c2:	9307      	strlt	r3, [sp, #28]
 800f2c4:	bfb8      	it	lt
 800f2c6:	9204      	strlt	r2, [sp, #16]
 800f2c8:	7823      	ldrb	r3, [r4, #0]
 800f2ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2cc:	d10a      	bne.n	800f2e4 <_svfiprintf_r+0x130>
 800f2ce:	7863      	ldrb	r3, [r4, #1]
 800f2d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2d2:	d132      	bne.n	800f33a <_svfiprintf_r+0x186>
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	1d1a      	adds	r2, r3, #4
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	9203      	str	r2, [sp, #12]
 800f2dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2e0:	3402      	adds	r4, #2
 800f2e2:	9305      	str	r3, [sp, #20]
 800f2e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f3a8 <_svfiprintf_r+0x1f4>
 800f2e8:	7821      	ldrb	r1, [r4, #0]
 800f2ea:	2203      	movs	r2, #3
 800f2ec:	4650      	mov	r0, sl
 800f2ee:	f7f0 ff6f 	bl	80001d0 <memchr>
 800f2f2:	b138      	cbz	r0, 800f304 <_svfiprintf_r+0x150>
 800f2f4:	9b04      	ldr	r3, [sp, #16]
 800f2f6:	eba0 000a 	sub.w	r0, r0, sl
 800f2fa:	2240      	movs	r2, #64	@ 0x40
 800f2fc:	4082      	lsls	r2, r0
 800f2fe:	4313      	orrs	r3, r2
 800f300:	3401      	adds	r4, #1
 800f302:	9304      	str	r3, [sp, #16]
 800f304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f308:	4824      	ldr	r0, [pc, #144]	@ (800f39c <_svfiprintf_r+0x1e8>)
 800f30a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f30e:	2206      	movs	r2, #6
 800f310:	f7f0 ff5e 	bl	80001d0 <memchr>
 800f314:	2800      	cmp	r0, #0
 800f316:	d036      	beq.n	800f386 <_svfiprintf_r+0x1d2>
 800f318:	4b21      	ldr	r3, [pc, #132]	@ (800f3a0 <_svfiprintf_r+0x1ec>)
 800f31a:	bb1b      	cbnz	r3, 800f364 <_svfiprintf_r+0x1b0>
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	3307      	adds	r3, #7
 800f320:	f023 0307 	bic.w	r3, r3, #7
 800f324:	3308      	adds	r3, #8
 800f326:	9303      	str	r3, [sp, #12]
 800f328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f32a:	4433      	add	r3, r6
 800f32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f32e:	e76a      	b.n	800f206 <_svfiprintf_r+0x52>
 800f330:	fb0c 3202 	mla	r2, ip, r2, r3
 800f334:	460c      	mov	r4, r1
 800f336:	2001      	movs	r0, #1
 800f338:	e7a8      	b.n	800f28c <_svfiprintf_r+0xd8>
 800f33a:	2300      	movs	r3, #0
 800f33c:	3401      	adds	r4, #1
 800f33e:	9305      	str	r3, [sp, #20]
 800f340:	4619      	mov	r1, r3
 800f342:	f04f 0c0a 	mov.w	ip, #10
 800f346:	4620      	mov	r0, r4
 800f348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f34c:	3a30      	subs	r2, #48	@ 0x30
 800f34e:	2a09      	cmp	r2, #9
 800f350:	d903      	bls.n	800f35a <_svfiprintf_r+0x1a6>
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0c6      	beq.n	800f2e4 <_svfiprintf_r+0x130>
 800f356:	9105      	str	r1, [sp, #20]
 800f358:	e7c4      	b.n	800f2e4 <_svfiprintf_r+0x130>
 800f35a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f35e:	4604      	mov	r4, r0
 800f360:	2301      	movs	r3, #1
 800f362:	e7f0      	b.n	800f346 <_svfiprintf_r+0x192>
 800f364:	ab03      	add	r3, sp, #12
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	462a      	mov	r2, r5
 800f36a:	4b0e      	ldr	r3, [pc, #56]	@ (800f3a4 <_svfiprintf_r+0x1f0>)
 800f36c:	a904      	add	r1, sp, #16
 800f36e:	4638      	mov	r0, r7
 800f370:	f7fc fbb8 	bl	800bae4 <_printf_float>
 800f374:	1c42      	adds	r2, r0, #1
 800f376:	4606      	mov	r6, r0
 800f378:	d1d6      	bne.n	800f328 <_svfiprintf_r+0x174>
 800f37a:	89ab      	ldrh	r3, [r5, #12]
 800f37c:	065b      	lsls	r3, r3, #25
 800f37e:	f53f af2d 	bmi.w	800f1dc <_svfiprintf_r+0x28>
 800f382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f384:	e72c      	b.n	800f1e0 <_svfiprintf_r+0x2c>
 800f386:	ab03      	add	r3, sp, #12
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	462a      	mov	r2, r5
 800f38c:	4b05      	ldr	r3, [pc, #20]	@ (800f3a4 <_svfiprintf_r+0x1f0>)
 800f38e:	a904      	add	r1, sp, #16
 800f390:	4638      	mov	r0, r7
 800f392:	f7fc fe3f 	bl	800c014 <_printf_i>
 800f396:	e7ed      	b.n	800f374 <_svfiprintf_r+0x1c0>
 800f398:	08012171 	.word	0x08012171
 800f39c:	0801217b 	.word	0x0801217b
 800f3a0:	0800bae5 	.word	0x0800bae5
 800f3a4:	0800f0fd 	.word	0x0800f0fd
 800f3a8:	08012177 	.word	0x08012177

0800f3ac <__sfputc_r>:
 800f3ac:	6893      	ldr	r3, [r2, #8]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	b410      	push	{r4}
 800f3b4:	6093      	str	r3, [r2, #8]
 800f3b6:	da08      	bge.n	800f3ca <__sfputc_r+0x1e>
 800f3b8:	6994      	ldr	r4, [r2, #24]
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	db01      	blt.n	800f3c2 <__sfputc_r+0x16>
 800f3be:	290a      	cmp	r1, #10
 800f3c0:	d103      	bne.n	800f3ca <__sfputc_r+0x1e>
 800f3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3c6:	f7fd baee 	b.w	800c9a6 <__swbuf_r>
 800f3ca:	6813      	ldr	r3, [r2, #0]
 800f3cc:	1c58      	adds	r0, r3, #1
 800f3ce:	6010      	str	r0, [r2, #0]
 800f3d0:	7019      	strb	r1, [r3, #0]
 800f3d2:	4608      	mov	r0, r1
 800f3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <__sfputs_r>:
 800f3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3dc:	4606      	mov	r6, r0
 800f3de:	460f      	mov	r7, r1
 800f3e0:	4614      	mov	r4, r2
 800f3e2:	18d5      	adds	r5, r2, r3
 800f3e4:	42ac      	cmp	r4, r5
 800f3e6:	d101      	bne.n	800f3ec <__sfputs_r+0x12>
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	e007      	b.n	800f3fc <__sfputs_r+0x22>
 800f3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f0:	463a      	mov	r2, r7
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f7ff ffda 	bl	800f3ac <__sfputc_r>
 800f3f8:	1c43      	adds	r3, r0, #1
 800f3fa:	d1f3      	bne.n	800f3e4 <__sfputs_r+0xa>
 800f3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f400 <_vfiprintf_r>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	460d      	mov	r5, r1
 800f406:	b09d      	sub	sp, #116	@ 0x74
 800f408:	4614      	mov	r4, r2
 800f40a:	4698      	mov	r8, r3
 800f40c:	4606      	mov	r6, r0
 800f40e:	b118      	cbz	r0, 800f418 <_vfiprintf_r+0x18>
 800f410:	6a03      	ldr	r3, [r0, #32]
 800f412:	b90b      	cbnz	r3, 800f418 <_vfiprintf_r+0x18>
 800f414:	f7fd f9be 	bl	800c794 <__sinit>
 800f418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f41a:	07d9      	lsls	r1, r3, #31
 800f41c:	d405      	bmi.n	800f42a <_vfiprintf_r+0x2a>
 800f41e:	89ab      	ldrh	r3, [r5, #12]
 800f420:	059a      	lsls	r2, r3, #22
 800f422:	d402      	bmi.n	800f42a <_vfiprintf_r+0x2a>
 800f424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f426:	f7fd fbd0 	bl	800cbca <__retarget_lock_acquire_recursive>
 800f42a:	89ab      	ldrh	r3, [r5, #12]
 800f42c:	071b      	lsls	r3, r3, #28
 800f42e:	d501      	bpl.n	800f434 <_vfiprintf_r+0x34>
 800f430:	692b      	ldr	r3, [r5, #16]
 800f432:	b99b      	cbnz	r3, 800f45c <_vfiprintf_r+0x5c>
 800f434:	4629      	mov	r1, r5
 800f436:	4630      	mov	r0, r6
 800f438:	f7fd faf4 	bl	800ca24 <__swsetup_r>
 800f43c:	b170      	cbz	r0, 800f45c <_vfiprintf_r+0x5c>
 800f43e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f440:	07dc      	lsls	r4, r3, #31
 800f442:	d504      	bpl.n	800f44e <_vfiprintf_r+0x4e>
 800f444:	f04f 30ff 	mov.w	r0, #4294967295
 800f448:	b01d      	add	sp, #116	@ 0x74
 800f44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44e:	89ab      	ldrh	r3, [r5, #12]
 800f450:	0598      	lsls	r0, r3, #22
 800f452:	d4f7      	bmi.n	800f444 <_vfiprintf_r+0x44>
 800f454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f456:	f7fd fbb9 	bl	800cbcc <__retarget_lock_release_recursive>
 800f45a:	e7f3      	b.n	800f444 <_vfiprintf_r+0x44>
 800f45c:	2300      	movs	r3, #0
 800f45e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f460:	2320      	movs	r3, #32
 800f462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f466:	f8cd 800c 	str.w	r8, [sp, #12]
 800f46a:	2330      	movs	r3, #48	@ 0x30
 800f46c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f61c <_vfiprintf_r+0x21c>
 800f470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f474:	f04f 0901 	mov.w	r9, #1
 800f478:	4623      	mov	r3, r4
 800f47a:	469a      	mov	sl, r3
 800f47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f480:	b10a      	cbz	r2, 800f486 <_vfiprintf_r+0x86>
 800f482:	2a25      	cmp	r2, #37	@ 0x25
 800f484:	d1f9      	bne.n	800f47a <_vfiprintf_r+0x7a>
 800f486:	ebba 0b04 	subs.w	fp, sl, r4
 800f48a:	d00b      	beq.n	800f4a4 <_vfiprintf_r+0xa4>
 800f48c:	465b      	mov	r3, fp
 800f48e:	4622      	mov	r2, r4
 800f490:	4629      	mov	r1, r5
 800f492:	4630      	mov	r0, r6
 800f494:	f7ff ffa1 	bl	800f3da <__sfputs_r>
 800f498:	3001      	adds	r0, #1
 800f49a:	f000 80a7 	beq.w	800f5ec <_vfiprintf_r+0x1ec>
 800f49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4a0:	445a      	add	r2, fp
 800f4a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f000 809f 	beq.w	800f5ec <_vfiprintf_r+0x1ec>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4b8:	f10a 0a01 	add.w	sl, sl, #1
 800f4bc:	9304      	str	r3, [sp, #16]
 800f4be:	9307      	str	r3, [sp, #28]
 800f4c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4c6:	4654      	mov	r4, sl
 800f4c8:	2205      	movs	r2, #5
 800f4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ce:	4853      	ldr	r0, [pc, #332]	@ (800f61c <_vfiprintf_r+0x21c>)
 800f4d0:	f7f0 fe7e 	bl	80001d0 <memchr>
 800f4d4:	9a04      	ldr	r2, [sp, #16]
 800f4d6:	b9d8      	cbnz	r0, 800f510 <_vfiprintf_r+0x110>
 800f4d8:	06d1      	lsls	r1, r2, #27
 800f4da:	bf44      	itt	mi
 800f4dc:	2320      	movmi	r3, #32
 800f4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4e2:	0713      	lsls	r3, r2, #28
 800f4e4:	bf44      	itt	mi
 800f4e6:	232b      	movmi	r3, #43	@ 0x2b
 800f4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4f2:	d015      	beq.n	800f520 <_vfiprintf_r+0x120>
 800f4f4:	9a07      	ldr	r2, [sp, #28]
 800f4f6:	4654      	mov	r4, sl
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	f04f 0c0a 	mov.w	ip, #10
 800f4fe:	4621      	mov	r1, r4
 800f500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f504:	3b30      	subs	r3, #48	@ 0x30
 800f506:	2b09      	cmp	r3, #9
 800f508:	d94b      	bls.n	800f5a2 <_vfiprintf_r+0x1a2>
 800f50a:	b1b0      	cbz	r0, 800f53a <_vfiprintf_r+0x13a>
 800f50c:	9207      	str	r2, [sp, #28]
 800f50e:	e014      	b.n	800f53a <_vfiprintf_r+0x13a>
 800f510:	eba0 0308 	sub.w	r3, r0, r8
 800f514:	fa09 f303 	lsl.w	r3, r9, r3
 800f518:	4313      	orrs	r3, r2
 800f51a:	9304      	str	r3, [sp, #16]
 800f51c:	46a2      	mov	sl, r4
 800f51e:	e7d2      	b.n	800f4c6 <_vfiprintf_r+0xc6>
 800f520:	9b03      	ldr	r3, [sp, #12]
 800f522:	1d19      	adds	r1, r3, #4
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	9103      	str	r1, [sp, #12]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	bfbb      	ittet	lt
 800f52c:	425b      	neglt	r3, r3
 800f52e:	f042 0202 	orrlt.w	r2, r2, #2
 800f532:	9307      	strge	r3, [sp, #28]
 800f534:	9307      	strlt	r3, [sp, #28]
 800f536:	bfb8      	it	lt
 800f538:	9204      	strlt	r2, [sp, #16]
 800f53a:	7823      	ldrb	r3, [r4, #0]
 800f53c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f53e:	d10a      	bne.n	800f556 <_vfiprintf_r+0x156>
 800f540:	7863      	ldrb	r3, [r4, #1]
 800f542:	2b2a      	cmp	r3, #42	@ 0x2a
 800f544:	d132      	bne.n	800f5ac <_vfiprintf_r+0x1ac>
 800f546:	9b03      	ldr	r3, [sp, #12]
 800f548:	1d1a      	adds	r2, r3, #4
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	9203      	str	r2, [sp, #12]
 800f54e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f552:	3402      	adds	r4, #2
 800f554:	9305      	str	r3, [sp, #20]
 800f556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f62c <_vfiprintf_r+0x22c>
 800f55a:	7821      	ldrb	r1, [r4, #0]
 800f55c:	2203      	movs	r2, #3
 800f55e:	4650      	mov	r0, sl
 800f560:	f7f0 fe36 	bl	80001d0 <memchr>
 800f564:	b138      	cbz	r0, 800f576 <_vfiprintf_r+0x176>
 800f566:	9b04      	ldr	r3, [sp, #16]
 800f568:	eba0 000a 	sub.w	r0, r0, sl
 800f56c:	2240      	movs	r2, #64	@ 0x40
 800f56e:	4082      	lsls	r2, r0
 800f570:	4313      	orrs	r3, r2
 800f572:	3401      	adds	r4, #1
 800f574:	9304      	str	r3, [sp, #16]
 800f576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f57a:	4829      	ldr	r0, [pc, #164]	@ (800f620 <_vfiprintf_r+0x220>)
 800f57c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f580:	2206      	movs	r2, #6
 800f582:	f7f0 fe25 	bl	80001d0 <memchr>
 800f586:	2800      	cmp	r0, #0
 800f588:	d03f      	beq.n	800f60a <_vfiprintf_r+0x20a>
 800f58a:	4b26      	ldr	r3, [pc, #152]	@ (800f624 <_vfiprintf_r+0x224>)
 800f58c:	bb1b      	cbnz	r3, 800f5d6 <_vfiprintf_r+0x1d6>
 800f58e:	9b03      	ldr	r3, [sp, #12]
 800f590:	3307      	adds	r3, #7
 800f592:	f023 0307 	bic.w	r3, r3, #7
 800f596:	3308      	adds	r3, #8
 800f598:	9303      	str	r3, [sp, #12]
 800f59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f59c:	443b      	add	r3, r7
 800f59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5a0:	e76a      	b.n	800f478 <_vfiprintf_r+0x78>
 800f5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	e7a8      	b.n	800f4fe <_vfiprintf_r+0xfe>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	3401      	adds	r4, #1
 800f5b0:	9305      	str	r3, [sp, #20]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	f04f 0c0a 	mov.w	ip, #10
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5be:	3a30      	subs	r2, #48	@ 0x30
 800f5c0:	2a09      	cmp	r2, #9
 800f5c2:	d903      	bls.n	800f5cc <_vfiprintf_r+0x1cc>
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d0c6      	beq.n	800f556 <_vfiprintf_r+0x156>
 800f5c8:	9105      	str	r1, [sp, #20]
 800f5ca:	e7c4      	b.n	800f556 <_vfiprintf_r+0x156>
 800f5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e7f0      	b.n	800f5b8 <_vfiprintf_r+0x1b8>
 800f5d6:	ab03      	add	r3, sp, #12
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	462a      	mov	r2, r5
 800f5dc:	4b12      	ldr	r3, [pc, #72]	@ (800f628 <_vfiprintf_r+0x228>)
 800f5de:	a904      	add	r1, sp, #16
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7fc fa7f 	bl	800bae4 <_printf_float>
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	1c78      	adds	r0, r7, #1
 800f5ea:	d1d6      	bne.n	800f59a <_vfiprintf_r+0x19a>
 800f5ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5ee:	07d9      	lsls	r1, r3, #31
 800f5f0:	d405      	bmi.n	800f5fe <_vfiprintf_r+0x1fe>
 800f5f2:	89ab      	ldrh	r3, [r5, #12]
 800f5f4:	059a      	lsls	r2, r3, #22
 800f5f6:	d402      	bmi.n	800f5fe <_vfiprintf_r+0x1fe>
 800f5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5fa:	f7fd fae7 	bl	800cbcc <__retarget_lock_release_recursive>
 800f5fe:	89ab      	ldrh	r3, [r5, #12]
 800f600:	065b      	lsls	r3, r3, #25
 800f602:	f53f af1f 	bmi.w	800f444 <_vfiprintf_r+0x44>
 800f606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f608:	e71e      	b.n	800f448 <_vfiprintf_r+0x48>
 800f60a:	ab03      	add	r3, sp, #12
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	462a      	mov	r2, r5
 800f610:	4b05      	ldr	r3, [pc, #20]	@ (800f628 <_vfiprintf_r+0x228>)
 800f612:	a904      	add	r1, sp, #16
 800f614:	4630      	mov	r0, r6
 800f616:	f7fc fcfd 	bl	800c014 <_printf_i>
 800f61a:	e7e4      	b.n	800f5e6 <_vfiprintf_r+0x1e6>
 800f61c:	08012171 	.word	0x08012171
 800f620:	0801217b 	.word	0x0801217b
 800f624:	0800bae5 	.word	0x0800bae5
 800f628:	0800f3db 	.word	0x0800f3db
 800f62c:	08012177 	.word	0x08012177

0800f630 <__sflush_r>:
 800f630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f638:	0716      	lsls	r6, r2, #28
 800f63a:	4605      	mov	r5, r0
 800f63c:	460c      	mov	r4, r1
 800f63e:	d454      	bmi.n	800f6ea <__sflush_r+0xba>
 800f640:	684b      	ldr	r3, [r1, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	dc02      	bgt.n	800f64c <__sflush_r+0x1c>
 800f646:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dd48      	ble.n	800f6de <__sflush_r+0xae>
 800f64c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f64e:	2e00      	cmp	r6, #0
 800f650:	d045      	beq.n	800f6de <__sflush_r+0xae>
 800f652:	2300      	movs	r3, #0
 800f654:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f658:	682f      	ldr	r7, [r5, #0]
 800f65a:	6a21      	ldr	r1, [r4, #32]
 800f65c:	602b      	str	r3, [r5, #0]
 800f65e:	d030      	beq.n	800f6c2 <__sflush_r+0x92>
 800f660:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	0759      	lsls	r1, r3, #29
 800f666:	d505      	bpl.n	800f674 <__sflush_r+0x44>
 800f668:	6863      	ldr	r3, [r4, #4]
 800f66a:	1ad2      	subs	r2, r2, r3
 800f66c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f66e:	b10b      	cbz	r3, 800f674 <__sflush_r+0x44>
 800f670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f672:	1ad2      	subs	r2, r2, r3
 800f674:	2300      	movs	r3, #0
 800f676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f678:	6a21      	ldr	r1, [r4, #32]
 800f67a:	4628      	mov	r0, r5
 800f67c:	47b0      	blx	r6
 800f67e:	1c43      	adds	r3, r0, #1
 800f680:	89a3      	ldrh	r3, [r4, #12]
 800f682:	d106      	bne.n	800f692 <__sflush_r+0x62>
 800f684:	6829      	ldr	r1, [r5, #0]
 800f686:	291d      	cmp	r1, #29
 800f688:	d82b      	bhi.n	800f6e2 <__sflush_r+0xb2>
 800f68a:	4a2a      	ldr	r2, [pc, #168]	@ (800f734 <__sflush_r+0x104>)
 800f68c:	410a      	asrs	r2, r1
 800f68e:	07d6      	lsls	r6, r2, #31
 800f690:	d427      	bmi.n	800f6e2 <__sflush_r+0xb2>
 800f692:	2200      	movs	r2, #0
 800f694:	6062      	str	r2, [r4, #4]
 800f696:	04d9      	lsls	r1, r3, #19
 800f698:	6922      	ldr	r2, [r4, #16]
 800f69a:	6022      	str	r2, [r4, #0]
 800f69c:	d504      	bpl.n	800f6a8 <__sflush_r+0x78>
 800f69e:	1c42      	adds	r2, r0, #1
 800f6a0:	d101      	bne.n	800f6a6 <__sflush_r+0x76>
 800f6a2:	682b      	ldr	r3, [r5, #0]
 800f6a4:	b903      	cbnz	r3, 800f6a8 <__sflush_r+0x78>
 800f6a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6aa:	602f      	str	r7, [r5, #0]
 800f6ac:	b1b9      	cbz	r1, 800f6de <__sflush_r+0xae>
 800f6ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6b2:	4299      	cmp	r1, r3
 800f6b4:	d002      	beq.n	800f6bc <__sflush_r+0x8c>
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	f7fe f8ea 	bl	800d890 <_free_r>
 800f6bc:	2300      	movs	r3, #0
 800f6be:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6c0:	e00d      	b.n	800f6de <__sflush_r+0xae>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	47b0      	blx	r6
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	1c50      	adds	r0, r2, #1
 800f6cc:	d1c9      	bne.n	800f662 <__sflush_r+0x32>
 800f6ce:	682b      	ldr	r3, [r5, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d0c6      	beq.n	800f662 <__sflush_r+0x32>
 800f6d4:	2b1d      	cmp	r3, #29
 800f6d6:	d001      	beq.n	800f6dc <__sflush_r+0xac>
 800f6d8:	2b16      	cmp	r3, #22
 800f6da:	d11e      	bne.n	800f71a <__sflush_r+0xea>
 800f6dc:	602f      	str	r7, [r5, #0]
 800f6de:	2000      	movs	r0, #0
 800f6e0:	e022      	b.n	800f728 <__sflush_r+0xf8>
 800f6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6e6:	b21b      	sxth	r3, r3
 800f6e8:	e01b      	b.n	800f722 <__sflush_r+0xf2>
 800f6ea:	690f      	ldr	r7, [r1, #16]
 800f6ec:	2f00      	cmp	r7, #0
 800f6ee:	d0f6      	beq.n	800f6de <__sflush_r+0xae>
 800f6f0:	0793      	lsls	r3, r2, #30
 800f6f2:	680e      	ldr	r6, [r1, #0]
 800f6f4:	bf08      	it	eq
 800f6f6:	694b      	ldreq	r3, [r1, #20]
 800f6f8:	600f      	str	r7, [r1, #0]
 800f6fa:	bf18      	it	ne
 800f6fc:	2300      	movne	r3, #0
 800f6fe:	eba6 0807 	sub.w	r8, r6, r7
 800f702:	608b      	str	r3, [r1, #8]
 800f704:	f1b8 0f00 	cmp.w	r8, #0
 800f708:	dde9      	ble.n	800f6de <__sflush_r+0xae>
 800f70a:	6a21      	ldr	r1, [r4, #32]
 800f70c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f70e:	4643      	mov	r3, r8
 800f710:	463a      	mov	r2, r7
 800f712:	4628      	mov	r0, r5
 800f714:	47b0      	blx	r6
 800f716:	2800      	cmp	r0, #0
 800f718:	dc08      	bgt.n	800f72c <__sflush_r+0xfc>
 800f71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f71e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f722:	81a3      	strh	r3, [r4, #12]
 800f724:	f04f 30ff 	mov.w	r0, #4294967295
 800f728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f72c:	4407      	add	r7, r0
 800f72e:	eba8 0800 	sub.w	r8, r8, r0
 800f732:	e7e7      	b.n	800f704 <__sflush_r+0xd4>
 800f734:	dfbffffe 	.word	0xdfbffffe

0800f738 <_fflush_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	690b      	ldr	r3, [r1, #16]
 800f73c:	4605      	mov	r5, r0
 800f73e:	460c      	mov	r4, r1
 800f740:	b913      	cbnz	r3, 800f748 <_fflush_r+0x10>
 800f742:	2500      	movs	r5, #0
 800f744:	4628      	mov	r0, r5
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	b118      	cbz	r0, 800f752 <_fflush_r+0x1a>
 800f74a:	6a03      	ldr	r3, [r0, #32]
 800f74c:	b90b      	cbnz	r3, 800f752 <_fflush_r+0x1a>
 800f74e:	f7fd f821 	bl	800c794 <__sinit>
 800f752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d0f3      	beq.n	800f742 <_fflush_r+0xa>
 800f75a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f75c:	07d0      	lsls	r0, r2, #31
 800f75e:	d404      	bmi.n	800f76a <_fflush_r+0x32>
 800f760:	0599      	lsls	r1, r3, #22
 800f762:	d402      	bmi.n	800f76a <_fflush_r+0x32>
 800f764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f766:	f7fd fa30 	bl	800cbca <__retarget_lock_acquire_recursive>
 800f76a:	4628      	mov	r0, r5
 800f76c:	4621      	mov	r1, r4
 800f76e:	f7ff ff5f 	bl	800f630 <__sflush_r>
 800f772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f774:	07da      	lsls	r2, r3, #31
 800f776:	4605      	mov	r5, r0
 800f778:	d4e4      	bmi.n	800f744 <_fflush_r+0xc>
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	059b      	lsls	r3, r3, #22
 800f77e:	d4e1      	bmi.n	800f744 <_fflush_r+0xc>
 800f780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f782:	f7fd fa23 	bl	800cbcc <__retarget_lock_release_recursive>
 800f786:	e7dd      	b.n	800f744 <_fflush_r+0xc>

0800f788 <__swhatbuf_r>:
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	460c      	mov	r4, r1
 800f78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f790:	2900      	cmp	r1, #0
 800f792:	b096      	sub	sp, #88	@ 0x58
 800f794:	4615      	mov	r5, r2
 800f796:	461e      	mov	r6, r3
 800f798:	da0d      	bge.n	800f7b6 <__swhatbuf_r+0x2e>
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f7a0:	f04f 0100 	mov.w	r1, #0
 800f7a4:	bf14      	ite	ne
 800f7a6:	2340      	movne	r3, #64	@ 0x40
 800f7a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	6031      	str	r1, [r6, #0]
 800f7b0:	602b      	str	r3, [r5, #0]
 800f7b2:	b016      	add	sp, #88	@ 0x58
 800f7b4:	bd70      	pop	{r4, r5, r6, pc}
 800f7b6:	466a      	mov	r2, sp
 800f7b8:	f000 f874 	bl	800f8a4 <_fstat_r>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	dbec      	blt.n	800f79a <__swhatbuf_r+0x12>
 800f7c0:	9901      	ldr	r1, [sp, #4]
 800f7c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f7c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f7ca:	4259      	negs	r1, r3
 800f7cc:	4159      	adcs	r1, r3
 800f7ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7d2:	e7eb      	b.n	800f7ac <__swhatbuf_r+0x24>

0800f7d4 <__smakebuf_r>:
 800f7d4:	898b      	ldrh	r3, [r1, #12]
 800f7d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7d8:	079d      	lsls	r5, r3, #30
 800f7da:	4606      	mov	r6, r0
 800f7dc:	460c      	mov	r4, r1
 800f7de:	d507      	bpl.n	800f7f0 <__smakebuf_r+0x1c>
 800f7e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	6123      	str	r3, [r4, #16]
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	6163      	str	r3, [r4, #20]
 800f7ec:	b003      	add	sp, #12
 800f7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7f0:	ab01      	add	r3, sp, #4
 800f7f2:	466a      	mov	r2, sp
 800f7f4:	f7ff ffc8 	bl	800f788 <__swhatbuf_r>
 800f7f8:	9f00      	ldr	r7, [sp, #0]
 800f7fa:	4605      	mov	r5, r0
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	4630      	mov	r0, r6
 800f800:	f7fe f8ba 	bl	800d978 <_malloc_r>
 800f804:	b948      	cbnz	r0, 800f81a <__smakebuf_r+0x46>
 800f806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f80a:	059a      	lsls	r2, r3, #22
 800f80c:	d4ee      	bmi.n	800f7ec <__smakebuf_r+0x18>
 800f80e:	f023 0303 	bic.w	r3, r3, #3
 800f812:	f043 0302 	orr.w	r3, r3, #2
 800f816:	81a3      	strh	r3, [r4, #12]
 800f818:	e7e2      	b.n	800f7e0 <__smakebuf_r+0xc>
 800f81a:	89a3      	ldrh	r3, [r4, #12]
 800f81c:	6020      	str	r0, [r4, #0]
 800f81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f822:	81a3      	strh	r3, [r4, #12]
 800f824:	9b01      	ldr	r3, [sp, #4]
 800f826:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f82a:	b15b      	cbz	r3, 800f844 <__smakebuf_r+0x70>
 800f82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f830:	4630      	mov	r0, r6
 800f832:	f000 f849 	bl	800f8c8 <_isatty_r>
 800f836:	b128      	cbz	r0, 800f844 <__smakebuf_r+0x70>
 800f838:	89a3      	ldrh	r3, [r4, #12]
 800f83a:	f023 0303 	bic.w	r3, r3, #3
 800f83e:	f043 0301 	orr.w	r3, r3, #1
 800f842:	81a3      	strh	r3, [r4, #12]
 800f844:	89a3      	ldrh	r3, [r4, #12]
 800f846:	431d      	orrs	r5, r3
 800f848:	81a5      	strh	r5, [r4, #12]
 800f84a:	e7cf      	b.n	800f7ec <__smakebuf_r+0x18>

0800f84c <memmove>:
 800f84c:	4288      	cmp	r0, r1
 800f84e:	b510      	push	{r4, lr}
 800f850:	eb01 0402 	add.w	r4, r1, r2
 800f854:	d902      	bls.n	800f85c <memmove+0x10>
 800f856:	4284      	cmp	r4, r0
 800f858:	4623      	mov	r3, r4
 800f85a:	d807      	bhi.n	800f86c <memmove+0x20>
 800f85c:	1e43      	subs	r3, r0, #1
 800f85e:	42a1      	cmp	r1, r4
 800f860:	d008      	beq.n	800f874 <memmove+0x28>
 800f862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f86a:	e7f8      	b.n	800f85e <memmove+0x12>
 800f86c:	4402      	add	r2, r0
 800f86e:	4601      	mov	r1, r0
 800f870:	428a      	cmp	r2, r1
 800f872:	d100      	bne.n	800f876 <memmove+0x2a>
 800f874:	bd10      	pop	{r4, pc}
 800f876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f87e:	e7f7      	b.n	800f870 <memmove+0x24>

0800f880 <strncmp>:
 800f880:	b510      	push	{r4, lr}
 800f882:	b16a      	cbz	r2, 800f8a0 <strncmp+0x20>
 800f884:	3901      	subs	r1, #1
 800f886:	1884      	adds	r4, r0, r2
 800f888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f88c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f890:	429a      	cmp	r2, r3
 800f892:	d103      	bne.n	800f89c <strncmp+0x1c>
 800f894:	42a0      	cmp	r0, r4
 800f896:	d001      	beq.n	800f89c <strncmp+0x1c>
 800f898:	2a00      	cmp	r2, #0
 800f89a:	d1f5      	bne.n	800f888 <strncmp+0x8>
 800f89c:	1ad0      	subs	r0, r2, r3
 800f89e:	bd10      	pop	{r4, pc}
 800f8a0:	4610      	mov	r0, r2
 800f8a2:	e7fc      	b.n	800f89e <strncmp+0x1e>

0800f8a4 <_fstat_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	4d07      	ldr	r5, [pc, #28]	@ (800f8c4 <_fstat_r+0x20>)
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4608      	mov	r0, r1
 800f8ae:	4611      	mov	r1, r2
 800f8b0:	602b      	str	r3, [r5, #0]
 800f8b2:	f7f2 f87c 	bl	80019ae <_fstat>
 800f8b6:	1c43      	adds	r3, r0, #1
 800f8b8:	d102      	bne.n	800f8c0 <_fstat_r+0x1c>
 800f8ba:	682b      	ldr	r3, [r5, #0]
 800f8bc:	b103      	cbz	r3, 800f8c0 <_fstat_r+0x1c>
 800f8be:	6023      	str	r3, [r4, #0]
 800f8c0:	bd38      	pop	{r3, r4, r5, pc}
 800f8c2:	bf00      	nop
 800f8c4:	200016bc 	.word	0x200016bc

0800f8c8 <_isatty_r>:
 800f8c8:	b538      	push	{r3, r4, r5, lr}
 800f8ca:	4d06      	ldr	r5, [pc, #24]	@ (800f8e4 <_isatty_r+0x1c>)
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	4608      	mov	r0, r1
 800f8d2:	602b      	str	r3, [r5, #0]
 800f8d4:	f7f2 f87b 	bl	80019ce <_isatty>
 800f8d8:	1c43      	adds	r3, r0, #1
 800f8da:	d102      	bne.n	800f8e2 <_isatty_r+0x1a>
 800f8dc:	682b      	ldr	r3, [r5, #0]
 800f8de:	b103      	cbz	r3, 800f8e2 <_isatty_r+0x1a>
 800f8e0:	6023      	str	r3, [r4, #0]
 800f8e2:	bd38      	pop	{r3, r4, r5, pc}
 800f8e4:	200016bc 	.word	0x200016bc

0800f8e8 <_sbrk_r>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	4d06      	ldr	r5, [pc, #24]	@ (800f904 <_sbrk_r+0x1c>)
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	4608      	mov	r0, r1
 800f8f2:	602b      	str	r3, [r5, #0]
 800f8f4:	f7f2 f884 	bl	8001a00 <_sbrk>
 800f8f8:	1c43      	adds	r3, r0, #1
 800f8fa:	d102      	bne.n	800f902 <_sbrk_r+0x1a>
 800f8fc:	682b      	ldr	r3, [r5, #0]
 800f8fe:	b103      	cbz	r3, 800f902 <_sbrk_r+0x1a>
 800f900:	6023      	str	r3, [r4, #0]
 800f902:	bd38      	pop	{r3, r4, r5, pc}
 800f904:	200016bc 	.word	0x200016bc

0800f908 <nan>:
 800f908:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f910 <nan+0x8>
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop
 800f910:	00000000 	.word	0x00000000
 800f914:	7ff80000 	.word	0x7ff80000

0800f918 <__assert_func>:
 800f918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f91a:	4614      	mov	r4, r2
 800f91c:	461a      	mov	r2, r3
 800f91e:	4b09      	ldr	r3, [pc, #36]	@ (800f944 <__assert_func+0x2c>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4605      	mov	r5, r0
 800f924:	68d8      	ldr	r0, [r3, #12]
 800f926:	b954      	cbnz	r4, 800f93e <__assert_func+0x26>
 800f928:	4b07      	ldr	r3, [pc, #28]	@ (800f948 <__assert_func+0x30>)
 800f92a:	461c      	mov	r4, r3
 800f92c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f930:	9100      	str	r1, [sp, #0]
 800f932:	462b      	mov	r3, r5
 800f934:	4905      	ldr	r1, [pc, #20]	@ (800f94c <__assert_func+0x34>)
 800f936:	f000 fba7 	bl	8010088 <fiprintf>
 800f93a:	f000 fbb7 	bl	80100ac <abort>
 800f93e:	4b04      	ldr	r3, [pc, #16]	@ (800f950 <__assert_func+0x38>)
 800f940:	e7f4      	b.n	800f92c <__assert_func+0x14>
 800f942:	bf00      	nop
 800f944:	20000018 	.word	0x20000018
 800f948:	080121c5 	.word	0x080121c5
 800f94c:	08012197 	.word	0x08012197
 800f950:	0801218a 	.word	0x0801218a

0800f954 <_calloc_r>:
 800f954:	b570      	push	{r4, r5, r6, lr}
 800f956:	fba1 5402 	umull	r5, r4, r1, r2
 800f95a:	b93c      	cbnz	r4, 800f96c <_calloc_r+0x18>
 800f95c:	4629      	mov	r1, r5
 800f95e:	f7fe f80b 	bl	800d978 <_malloc_r>
 800f962:	4606      	mov	r6, r0
 800f964:	b928      	cbnz	r0, 800f972 <_calloc_r+0x1e>
 800f966:	2600      	movs	r6, #0
 800f968:	4630      	mov	r0, r6
 800f96a:	bd70      	pop	{r4, r5, r6, pc}
 800f96c:	220c      	movs	r2, #12
 800f96e:	6002      	str	r2, [r0, #0]
 800f970:	e7f9      	b.n	800f966 <_calloc_r+0x12>
 800f972:	462a      	mov	r2, r5
 800f974:	4621      	mov	r1, r4
 800f976:	f7fd f8ab 	bl	800cad0 <memset>
 800f97a:	e7f5      	b.n	800f968 <_calloc_r+0x14>

0800f97c <rshift>:
 800f97c:	6903      	ldr	r3, [r0, #16]
 800f97e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f986:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f98a:	f100 0414 	add.w	r4, r0, #20
 800f98e:	dd45      	ble.n	800fa1c <rshift+0xa0>
 800f990:	f011 011f 	ands.w	r1, r1, #31
 800f994:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f998:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f99c:	d10c      	bne.n	800f9b8 <rshift+0x3c>
 800f99e:	f100 0710 	add.w	r7, r0, #16
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	42b1      	cmp	r1, r6
 800f9a6:	d334      	bcc.n	800fa12 <rshift+0x96>
 800f9a8:	1a9b      	subs	r3, r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	1eea      	subs	r2, r5, #3
 800f9ae:	4296      	cmp	r6, r2
 800f9b0:	bf38      	it	cc
 800f9b2:	2300      	movcc	r3, #0
 800f9b4:	4423      	add	r3, r4
 800f9b6:	e015      	b.n	800f9e4 <rshift+0x68>
 800f9b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f9bc:	f1c1 0820 	rsb	r8, r1, #32
 800f9c0:	40cf      	lsrs	r7, r1
 800f9c2:	f105 0e04 	add.w	lr, r5, #4
 800f9c6:	46a1      	mov	r9, r4
 800f9c8:	4576      	cmp	r6, lr
 800f9ca:	46f4      	mov	ip, lr
 800f9cc:	d815      	bhi.n	800f9fa <rshift+0x7e>
 800f9ce:	1a9a      	subs	r2, r3, r2
 800f9d0:	0092      	lsls	r2, r2, #2
 800f9d2:	3a04      	subs	r2, #4
 800f9d4:	3501      	adds	r5, #1
 800f9d6:	42ae      	cmp	r6, r5
 800f9d8:	bf38      	it	cc
 800f9da:	2200      	movcc	r2, #0
 800f9dc:	18a3      	adds	r3, r4, r2
 800f9de:	50a7      	str	r7, [r4, r2]
 800f9e0:	b107      	cbz	r7, 800f9e4 <rshift+0x68>
 800f9e2:	3304      	adds	r3, #4
 800f9e4:	1b1a      	subs	r2, r3, r4
 800f9e6:	42a3      	cmp	r3, r4
 800f9e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f9ec:	bf08      	it	eq
 800f9ee:	2300      	moveq	r3, #0
 800f9f0:	6102      	str	r2, [r0, #16]
 800f9f2:	bf08      	it	eq
 800f9f4:	6143      	streq	r3, [r0, #20]
 800f9f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9fa:	f8dc c000 	ldr.w	ip, [ip]
 800f9fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa02:	ea4c 0707 	orr.w	r7, ip, r7
 800fa06:	f849 7b04 	str.w	r7, [r9], #4
 800fa0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa0e:	40cf      	lsrs	r7, r1
 800fa10:	e7da      	b.n	800f9c8 <rshift+0x4c>
 800fa12:	f851 cb04 	ldr.w	ip, [r1], #4
 800fa16:	f847 cf04 	str.w	ip, [r7, #4]!
 800fa1a:	e7c3      	b.n	800f9a4 <rshift+0x28>
 800fa1c:	4623      	mov	r3, r4
 800fa1e:	e7e1      	b.n	800f9e4 <rshift+0x68>

0800fa20 <__hexdig_fun>:
 800fa20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fa24:	2b09      	cmp	r3, #9
 800fa26:	d802      	bhi.n	800fa2e <__hexdig_fun+0xe>
 800fa28:	3820      	subs	r0, #32
 800fa2a:	b2c0      	uxtb	r0, r0
 800fa2c:	4770      	bx	lr
 800fa2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fa32:	2b05      	cmp	r3, #5
 800fa34:	d801      	bhi.n	800fa3a <__hexdig_fun+0x1a>
 800fa36:	3847      	subs	r0, #71	@ 0x47
 800fa38:	e7f7      	b.n	800fa2a <__hexdig_fun+0xa>
 800fa3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fa3e:	2b05      	cmp	r3, #5
 800fa40:	d801      	bhi.n	800fa46 <__hexdig_fun+0x26>
 800fa42:	3827      	subs	r0, #39	@ 0x27
 800fa44:	e7f1      	b.n	800fa2a <__hexdig_fun+0xa>
 800fa46:	2000      	movs	r0, #0
 800fa48:	4770      	bx	lr
	...

0800fa4c <__gethex>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	b085      	sub	sp, #20
 800fa52:	468a      	mov	sl, r1
 800fa54:	9302      	str	r3, [sp, #8]
 800fa56:	680b      	ldr	r3, [r1, #0]
 800fa58:	9001      	str	r0, [sp, #4]
 800fa5a:	4690      	mov	r8, r2
 800fa5c:	1c9c      	adds	r4, r3, #2
 800fa5e:	46a1      	mov	r9, r4
 800fa60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fa64:	2830      	cmp	r0, #48	@ 0x30
 800fa66:	d0fa      	beq.n	800fa5e <__gethex+0x12>
 800fa68:	eba9 0303 	sub.w	r3, r9, r3
 800fa6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800fa70:	f7ff ffd6 	bl	800fa20 <__hexdig_fun>
 800fa74:	4605      	mov	r5, r0
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d168      	bne.n	800fb4c <__gethex+0x100>
 800fa7a:	49a0      	ldr	r1, [pc, #640]	@ (800fcfc <__gethex+0x2b0>)
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	4648      	mov	r0, r9
 800fa80:	f7ff fefe 	bl	800f880 <strncmp>
 800fa84:	4607      	mov	r7, r0
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d167      	bne.n	800fb5a <__gethex+0x10e>
 800fa8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa8e:	4626      	mov	r6, r4
 800fa90:	f7ff ffc6 	bl	800fa20 <__hexdig_fun>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d062      	beq.n	800fb5e <__gethex+0x112>
 800fa98:	4623      	mov	r3, r4
 800fa9a:	7818      	ldrb	r0, [r3, #0]
 800fa9c:	2830      	cmp	r0, #48	@ 0x30
 800fa9e:	4699      	mov	r9, r3
 800faa0:	f103 0301 	add.w	r3, r3, #1
 800faa4:	d0f9      	beq.n	800fa9a <__gethex+0x4e>
 800faa6:	f7ff ffbb 	bl	800fa20 <__hexdig_fun>
 800faaa:	fab0 f580 	clz	r5, r0
 800faae:	096d      	lsrs	r5, r5, #5
 800fab0:	f04f 0b01 	mov.w	fp, #1
 800fab4:	464a      	mov	r2, r9
 800fab6:	4616      	mov	r6, r2
 800fab8:	3201      	adds	r2, #1
 800faba:	7830      	ldrb	r0, [r6, #0]
 800fabc:	f7ff ffb0 	bl	800fa20 <__hexdig_fun>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d1f8      	bne.n	800fab6 <__gethex+0x6a>
 800fac4:	498d      	ldr	r1, [pc, #564]	@ (800fcfc <__gethex+0x2b0>)
 800fac6:	2201      	movs	r2, #1
 800fac8:	4630      	mov	r0, r6
 800faca:	f7ff fed9 	bl	800f880 <strncmp>
 800face:	2800      	cmp	r0, #0
 800fad0:	d13f      	bne.n	800fb52 <__gethex+0x106>
 800fad2:	b944      	cbnz	r4, 800fae6 <__gethex+0x9a>
 800fad4:	1c74      	adds	r4, r6, #1
 800fad6:	4622      	mov	r2, r4
 800fad8:	4616      	mov	r6, r2
 800fada:	3201      	adds	r2, #1
 800fadc:	7830      	ldrb	r0, [r6, #0]
 800fade:	f7ff ff9f 	bl	800fa20 <__hexdig_fun>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d1f8      	bne.n	800fad8 <__gethex+0x8c>
 800fae6:	1ba4      	subs	r4, r4, r6
 800fae8:	00a7      	lsls	r7, r4, #2
 800faea:	7833      	ldrb	r3, [r6, #0]
 800faec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800faf0:	2b50      	cmp	r3, #80	@ 0x50
 800faf2:	d13e      	bne.n	800fb72 <__gethex+0x126>
 800faf4:	7873      	ldrb	r3, [r6, #1]
 800faf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800faf8:	d033      	beq.n	800fb62 <__gethex+0x116>
 800fafa:	2b2d      	cmp	r3, #45	@ 0x2d
 800fafc:	d034      	beq.n	800fb68 <__gethex+0x11c>
 800fafe:	1c71      	adds	r1, r6, #1
 800fb00:	2400      	movs	r4, #0
 800fb02:	7808      	ldrb	r0, [r1, #0]
 800fb04:	f7ff ff8c 	bl	800fa20 <__hexdig_fun>
 800fb08:	1e43      	subs	r3, r0, #1
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	2b18      	cmp	r3, #24
 800fb0e:	d830      	bhi.n	800fb72 <__gethex+0x126>
 800fb10:	f1a0 0210 	sub.w	r2, r0, #16
 800fb14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb18:	f7ff ff82 	bl	800fa20 <__hexdig_fun>
 800fb1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fb20:	fa5f fc8c 	uxtb.w	ip, ip
 800fb24:	f1bc 0f18 	cmp.w	ip, #24
 800fb28:	f04f 030a 	mov.w	r3, #10
 800fb2c:	d91e      	bls.n	800fb6c <__gethex+0x120>
 800fb2e:	b104      	cbz	r4, 800fb32 <__gethex+0xe6>
 800fb30:	4252      	negs	r2, r2
 800fb32:	4417      	add	r7, r2
 800fb34:	f8ca 1000 	str.w	r1, [sl]
 800fb38:	b1ed      	cbz	r5, 800fb76 <__gethex+0x12a>
 800fb3a:	f1bb 0f00 	cmp.w	fp, #0
 800fb3e:	bf0c      	ite	eq
 800fb40:	2506      	moveq	r5, #6
 800fb42:	2500      	movne	r5, #0
 800fb44:	4628      	mov	r0, r5
 800fb46:	b005      	add	sp, #20
 800fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4c:	2500      	movs	r5, #0
 800fb4e:	462c      	mov	r4, r5
 800fb50:	e7b0      	b.n	800fab4 <__gethex+0x68>
 800fb52:	2c00      	cmp	r4, #0
 800fb54:	d1c7      	bne.n	800fae6 <__gethex+0x9a>
 800fb56:	4627      	mov	r7, r4
 800fb58:	e7c7      	b.n	800faea <__gethex+0x9e>
 800fb5a:	464e      	mov	r6, r9
 800fb5c:	462f      	mov	r7, r5
 800fb5e:	2501      	movs	r5, #1
 800fb60:	e7c3      	b.n	800faea <__gethex+0x9e>
 800fb62:	2400      	movs	r4, #0
 800fb64:	1cb1      	adds	r1, r6, #2
 800fb66:	e7cc      	b.n	800fb02 <__gethex+0xb6>
 800fb68:	2401      	movs	r4, #1
 800fb6a:	e7fb      	b.n	800fb64 <__gethex+0x118>
 800fb6c:	fb03 0002 	mla	r0, r3, r2, r0
 800fb70:	e7ce      	b.n	800fb10 <__gethex+0xc4>
 800fb72:	4631      	mov	r1, r6
 800fb74:	e7de      	b.n	800fb34 <__gethex+0xe8>
 800fb76:	eba6 0309 	sub.w	r3, r6, r9
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	2b07      	cmp	r3, #7
 800fb80:	dc0a      	bgt.n	800fb98 <__gethex+0x14c>
 800fb82:	9801      	ldr	r0, [sp, #4]
 800fb84:	f7fd ff84 	bl	800da90 <_Balloc>
 800fb88:	4604      	mov	r4, r0
 800fb8a:	b940      	cbnz	r0, 800fb9e <__gethex+0x152>
 800fb8c:	4b5c      	ldr	r3, [pc, #368]	@ (800fd00 <__gethex+0x2b4>)
 800fb8e:	4602      	mov	r2, r0
 800fb90:	21e4      	movs	r1, #228	@ 0xe4
 800fb92:	485c      	ldr	r0, [pc, #368]	@ (800fd04 <__gethex+0x2b8>)
 800fb94:	f7ff fec0 	bl	800f918 <__assert_func>
 800fb98:	3101      	adds	r1, #1
 800fb9a:	105b      	asrs	r3, r3, #1
 800fb9c:	e7ef      	b.n	800fb7e <__gethex+0x132>
 800fb9e:	f100 0a14 	add.w	sl, r0, #20
 800fba2:	2300      	movs	r3, #0
 800fba4:	4655      	mov	r5, sl
 800fba6:	469b      	mov	fp, r3
 800fba8:	45b1      	cmp	r9, r6
 800fbaa:	d337      	bcc.n	800fc1c <__gethex+0x1d0>
 800fbac:	f845 bb04 	str.w	fp, [r5], #4
 800fbb0:	eba5 050a 	sub.w	r5, r5, sl
 800fbb4:	10ad      	asrs	r5, r5, #2
 800fbb6:	6125      	str	r5, [r4, #16]
 800fbb8:	4658      	mov	r0, fp
 800fbba:	f7fe f85b 	bl	800dc74 <__hi0bits>
 800fbbe:	016d      	lsls	r5, r5, #5
 800fbc0:	f8d8 6000 	ldr.w	r6, [r8]
 800fbc4:	1a2d      	subs	r5, r5, r0
 800fbc6:	42b5      	cmp	r5, r6
 800fbc8:	dd54      	ble.n	800fc74 <__gethex+0x228>
 800fbca:	1bad      	subs	r5, r5, r6
 800fbcc:	4629      	mov	r1, r5
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7fe fbef 	bl	800e3b2 <__any_on>
 800fbd4:	4681      	mov	r9, r0
 800fbd6:	b178      	cbz	r0, 800fbf8 <__gethex+0x1ac>
 800fbd8:	1e6b      	subs	r3, r5, #1
 800fbda:	1159      	asrs	r1, r3, #5
 800fbdc:	f003 021f 	and.w	r2, r3, #31
 800fbe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fbe4:	f04f 0901 	mov.w	r9, #1
 800fbe8:	fa09 f202 	lsl.w	r2, r9, r2
 800fbec:	420a      	tst	r2, r1
 800fbee:	d003      	beq.n	800fbf8 <__gethex+0x1ac>
 800fbf0:	454b      	cmp	r3, r9
 800fbf2:	dc36      	bgt.n	800fc62 <__gethex+0x216>
 800fbf4:	f04f 0902 	mov.w	r9, #2
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f7ff febe 	bl	800f97c <rshift>
 800fc00:	442f      	add	r7, r5
 800fc02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc06:	42bb      	cmp	r3, r7
 800fc08:	da42      	bge.n	800fc90 <__gethex+0x244>
 800fc0a:	9801      	ldr	r0, [sp, #4]
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	f7fd ff7f 	bl	800db10 <_Bfree>
 800fc12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc14:	2300      	movs	r3, #0
 800fc16:	6013      	str	r3, [r2, #0]
 800fc18:	25a3      	movs	r5, #163	@ 0xa3
 800fc1a:	e793      	b.n	800fb44 <__gethex+0xf8>
 800fc1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fc20:	2a2e      	cmp	r2, #46	@ 0x2e
 800fc22:	d012      	beq.n	800fc4a <__gethex+0x1fe>
 800fc24:	2b20      	cmp	r3, #32
 800fc26:	d104      	bne.n	800fc32 <__gethex+0x1e6>
 800fc28:	f845 bb04 	str.w	fp, [r5], #4
 800fc2c:	f04f 0b00 	mov.w	fp, #0
 800fc30:	465b      	mov	r3, fp
 800fc32:	7830      	ldrb	r0, [r6, #0]
 800fc34:	9303      	str	r3, [sp, #12]
 800fc36:	f7ff fef3 	bl	800fa20 <__hexdig_fun>
 800fc3a:	9b03      	ldr	r3, [sp, #12]
 800fc3c:	f000 000f 	and.w	r0, r0, #15
 800fc40:	4098      	lsls	r0, r3
 800fc42:	ea4b 0b00 	orr.w	fp, fp, r0
 800fc46:	3304      	adds	r3, #4
 800fc48:	e7ae      	b.n	800fba8 <__gethex+0x15c>
 800fc4a:	45b1      	cmp	r9, r6
 800fc4c:	d8ea      	bhi.n	800fc24 <__gethex+0x1d8>
 800fc4e:	492b      	ldr	r1, [pc, #172]	@ (800fcfc <__gethex+0x2b0>)
 800fc50:	9303      	str	r3, [sp, #12]
 800fc52:	2201      	movs	r2, #1
 800fc54:	4630      	mov	r0, r6
 800fc56:	f7ff fe13 	bl	800f880 <strncmp>
 800fc5a:	9b03      	ldr	r3, [sp, #12]
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d1e1      	bne.n	800fc24 <__gethex+0x1d8>
 800fc60:	e7a2      	b.n	800fba8 <__gethex+0x15c>
 800fc62:	1ea9      	subs	r1, r5, #2
 800fc64:	4620      	mov	r0, r4
 800fc66:	f7fe fba4 	bl	800e3b2 <__any_on>
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d0c2      	beq.n	800fbf4 <__gethex+0x1a8>
 800fc6e:	f04f 0903 	mov.w	r9, #3
 800fc72:	e7c1      	b.n	800fbf8 <__gethex+0x1ac>
 800fc74:	da09      	bge.n	800fc8a <__gethex+0x23e>
 800fc76:	1b75      	subs	r5, r6, r5
 800fc78:	4621      	mov	r1, r4
 800fc7a:	9801      	ldr	r0, [sp, #4]
 800fc7c:	462a      	mov	r2, r5
 800fc7e:	f7fe f95f 	bl	800df40 <__lshift>
 800fc82:	1b7f      	subs	r7, r7, r5
 800fc84:	4604      	mov	r4, r0
 800fc86:	f100 0a14 	add.w	sl, r0, #20
 800fc8a:	f04f 0900 	mov.w	r9, #0
 800fc8e:	e7b8      	b.n	800fc02 <__gethex+0x1b6>
 800fc90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc94:	42bd      	cmp	r5, r7
 800fc96:	dd6f      	ble.n	800fd78 <__gethex+0x32c>
 800fc98:	1bed      	subs	r5, r5, r7
 800fc9a:	42ae      	cmp	r6, r5
 800fc9c:	dc34      	bgt.n	800fd08 <__gethex+0x2bc>
 800fc9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d022      	beq.n	800fcec <__gethex+0x2a0>
 800fca6:	2b03      	cmp	r3, #3
 800fca8:	d024      	beq.n	800fcf4 <__gethex+0x2a8>
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d115      	bne.n	800fcda <__gethex+0x28e>
 800fcae:	42ae      	cmp	r6, r5
 800fcb0:	d113      	bne.n	800fcda <__gethex+0x28e>
 800fcb2:	2e01      	cmp	r6, #1
 800fcb4:	d10b      	bne.n	800fcce <__gethex+0x282>
 800fcb6:	9a02      	ldr	r2, [sp, #8]
 800fcb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fcbc:	6013      	str	r3, [r2, #0]
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	6123      	str	r3, [r4, #16]
 800fcc2:	f8ca 3000 	str.w	r3, [sl]
 800fcc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcc8:	2562      	movs	r5, #98	@ 0x62
 800fcca:	601c      	str	r4, [r3, #0]
 800fccc:	e73a      	b.n	800fb44 <__gethex+0xf8>
 800fcce:	1e71      	subs	r1, r6, #1
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f7fe fb6e 	bl	800e3b2 <__any_on>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d1ed      	bne.n	800fcb6 <__gethex+0x26a>
 800fcda:	9801      	ldr	r0, [sp, #4]
 800fcdc:	4621      	mov	r1, r4
 800fcde:	f7fd ff17 	bl	800db10 <_Bfree>
 800fce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fce4:	2300      	movs	r3, #0
 800fce6:	6013      	str	r3, [r2, #0]
 800fce8:	2550      	movs	r5, #80	@ 0x50
 800fcea:	e72b      	b.n	800fb44 <__gethex+0xf8>
 800fcec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1f3      	bne.n	800fcda <__gethex+0x28e>
 800fcf2:	e7e0      	b.n	800fcb6 <__gethex+0x26a>
 800fcf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d1dd      	bne.n	800fcb6 <__gethex+0x26a>
 800fcfa:	e7ee      	b.n	800fcda <__gethex+0x28e>
 800fcfc:	08012018 	.word	0x08012018
 800fd00:	08011eb1 	.word	0x08011eb1
 800fd04:	080121c6 	.word	0x080121c6
 800fd08:	1e6f      	subs	r7, r5, #1
 800fd0a:	f1b9 0f00 	cmp.w	r9, #0
 800fd0e:	d130      	bne.n	800fd72 <__gethex+0x326>
 800fd10:	b127      	cbz	r7, 800fd1c <__gethex+0x2d0>
 800fd12:	4639      	mov	r1, r7
 800fd14:	4620      	mov	r0, r4
 800fd16:	f7fe fb4c 	bl	800e3b2 <__any_on>
 800fd1a:	4681      	mov	r9, r0
 800fd1c:	117a      	asrs	r2, r7, #5
 800fd1e:	2301      	movs	r3, #1
 800fd20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fd24:	f007 071f 	and.w	r7, r7, #31
 800fd28:	40bb      	lsls	r3, r7
 800fd2a:	4213      	tst	r3, r2
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	4620      	mov	r0, r4
 800fd30:	bf18      	it	ne
 800fd32:	f049 0902 	orrne.w	r9, r9, #2
 800fd36:	f7ff fe21 	bl	800f97c <rshift>
 800fd3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fd3e:	1b76      	subs	r6, r6, r5
 800fd40:	2502      	movs	r5, #2
 800fd42:	f1b9 0f00 	cmp.w	r9, #0
 800fd46:	d047      	beq.n	800fdd8 <__gethex+0x38c>
 800fd48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d015      	beq.n	800fd7c <__gethex+0x330>
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d017      	beq.n	800fd84 <__gethex+0x338>
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d109      	bne.n	800fd6c <__gethex+0x320>
 800fd58:	f019 0f02 	tst.w	r9, #2
 800fd5c:	d006      	beq.n	800fd6c <__gethex+0x320>
 800fd5e:	f8da 3000 	ldr.w	r3, [sl]
 800fd62:	ea49 0903 	orr.w	r9, r9, r3
 800fd66:	f019 0f01 	tst.w	r9, #1
 800fd6a:	d10e      	bne.n	800fd8a <__gethex+0x33e>
 800fd6c:	f045 0510 	orr.w	r5, r5, #16
 800fd70:	e032      	b.n	800fdd8 <__gethex+0x38c>
 800fd72:	f04f 0901 	mov.w	r9, #1
 800fd76:	e7d1      	b.n	800fd1c <__gethex+0x2d0>
 800fd78:	2501      	movs	r5, #1
 800fd7a:	e7e2      	b.n	800fd42 <__gethex+0x2f6>
 800fd7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd7e:	f1c3 0301 	rsb	r3, r3, #1
 800fd82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d0f0      	beq.n	800fd6c <__gethex+0x320>
 800fd8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd8e:	f104 0314 	add.w	r3, r4, #20
 800fd92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd9a:	f04f 0c00 	mov.w	ip, #0
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fda4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fda8:	d01b      	beq.n	800fde2 <__gethex+0x396>
 800fdaa:	3201      	adds	r2, #1
 800fdac:	6002      	str	r2, [r0, #0]
 800fdae:	2d02      	cmp	r5, #2
 800fdb0:	f104 0314 	add.w	r3, r4, #20
 800fdb4:	d13c      	bne.n	800fe30 <__gethex+0x3e4>
 800fdb6:	f8d8 2000 	ldr.w	r2, [r8]
 800fdba:	3a01      	subs	r2, #1
 800fdbc:	42b2      	cmp	r2, r6
 800fdbe:	d109      	bne.n	800fdd4 <__gethex+0x388>
 800fdc0:	1171      	asrs	r1, r6, #5
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fdc8:	f006 061f 	and.w	r6, r6, #31
 800fdcc:	fa02 f606 	lsl.w	r6, r2, r6
 800fdd0:	421e      	tst	r6, r3
 800fdd2:	d13a      	bne.n	800fe4a <__gethex+0x3fe>
 800fdd4:	f045 0520 	orr.w	r5, r5, #32
 800fdd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdda:	601c      	str	r4, [r3, #0]
 800fddc:	9b02      	ldr	r3, [sp, #8]
 800fdde:	601f      	str	r7, [r3, #0]
 800fde0:	e6b0      	b.n	800fb44 <__gethex+0xf8>
 800fde2:	4299      	cmp	r1, r3
 800fde4:	f843 cc04 	str.w	ip, [r3, #-4]
 800fde8:	d8d9      	bhi.n	800fd9e <__gethex+0x352>
 800fdea:	68a3      	ldr	r3, [r4, #8]
 800fdec:	459b      	cmp	fp, r3
 800fdee:	db17      	blt.n	800fe20 <__gethex+0x3d4>
 800fdf0:	6861      	ldr	r1, [r4, #4]
 800fdf2:	9801      	ldr	r0, [sp, #4]
 800fdf4:	3101      	adds	r1, #1
 800fdf6:	f7fd fe4b 	bl	800da90 <_Balloc>
 800fdfa:	4681      	mov	r9, r0
 800fdfc:	b918      	cbnz	r0, 800fe06 <__gethex+0x3ba>
 800fdfe:	4b1a      	ldr	r3, [pc, #104]	@ (800fe68 <__gethex+0x41c>)
 800fe00:	4602      	mov	r2, r0
 800fe02:	2184      	movs	r1, #132	@ 0x84
 800fe04:	e6c5      	b.n	800fb92 <__gethex+0x146>
 800fe06:	6922      	ldr	r2, [r4, #16]
 800fe08:	3202      	adds	r2, #2
 800fe0a:	f104 010c 	add.w	r1, r4, #12
 800fe0e:	0092      	lsls	r2, r2, #2
 800fe10:	300c      	adds	r0, #12
 800fe12:	f7fc fedc 	bl	800cbce <memcpy>
 800fe16:	4621      	mov	r1, r4
 800fe18:	9801      	ldr	r0, [sp, #4]
 800fe1a:	f7fd fe79 	bl	800db10 <_Bfree>
 800fe1e:	464c      	mov	r4, r9
 800fe20:	6923      	ldr	r3, [r4, #16]
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe28:	6122      	str	r2, [r4, #16]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	615a      	str	r2, [r3, #20]
 800fe2e:	e7be      	b.n	800fdae <__gethex+0x362>
 800fe30:	6922      	ldr	r2, [r4, #16]
 800fe32:	455a      	cmp	r2, fp
 800fe34:	dd0b      	ble.n	800fe4e <__gethex+0x402>
 800fe36:	2101      	movs	r1, #1
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f7ff fd9f 	bl	800f97c <rshift>
 800fe3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe42:	3701      	adds	r7, #1
 800fe44:	42bb      	cmp	r3, r7
 800fe46:	f6ff aee0 	blt.w	800fc0a <__gethex+0x1be>
 800fe4a:	2501      	movs	r5, #1
 800fe4c:	e7c2      	b.n	800fdd4 <__gethex+0x388>
 800fe4e:	f016 061f 	ands.w	r6, r6, #31
 800fe52:	d0fa      	beq.n	800fe4a <__gethex+0x3fe>
 800fe54:	4453      	add	r3, sl
 800fe56:	f1c6 0620 	rsb	r6, r6, #32
 800fe5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fe5e:	f7fd ff09 	bl	800dc74 <__hi0bits>
 800fe62:	42b0      	cmp	r0, r6
 800fe64:	dbe7      	blt.n	800fe36 <__gethex+0x3ea>
 800fe66:	e7f0      	b.n	800fe4a <__gethex+0x3fe>
 800fe68:	08011eb1 	.word	0x08011eb1

0800fe6c <L_shift>:
 800fe6c:	f1c2 0208 	rsb	r2, r2, #8
 800fe70:	0092      	lsls	r2, r2, #2
 800fe72:	b570      	push	{r4, r5, r6, lr}
 800fe74:	f1c2 0620 	rsb	r6, r2, #32
 800fe78:	6843      	ldr	r3, [r0, #4]
 800fe7a:	6804      	ldr	r4, [r0, #0]
 800fe7c:	fa03 f506 	lsl.w	r5, r3, r6
 800fe80:	432c      	orrs	r4, r5
 800fe82:	40d3      	lsrs	r3, r2
 800fe84:	6004      	str	r4, [r0, #0]
 800fe86:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe8a:	4288      	cmp	r0, r1
 800fe8c:	d3f4      	bcc.n	800fe78 <L_shift+0xc>
 800fe8e:	bd70      	pop	{r4, r5, r6, pc}

0800fe90 <__match>:
 800fe90:	b530      	push	{r4, r5, lr}
 800fe92:	6803      	ldr	r3, [r0, #0]
 800fe94:	3301      	adds	r3, #1
 800fe96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe9a:	b914      	cbnz	r4, 800fea2 <__match+0x12>
 800fe9c:	6003      	str	r3, [r0, #0]
 800fe9e:	2001      	movs	r0, #1
 800fea0:	bd30      	pop	{r4, r5, pc}
 800fea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fea6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800feaa:	2d19      	cmp	r5, #25
 800feac:	bf98      	it	ls
 800feae:	3220      	addls	r2, #32
 800feb0:	42a2      	cmp	r2, r4
 800feb2:	d0f0      	beq.n	800fe96 <__match+0x6>
 800feb4:	2000      	movs	r0, #0
 800feb6:	e7f3      	b.n	800fea0 <__match+0x10>

0800feb8 <__hexnan>:
 800feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800febc:	680b      	ldr	r3, [r1, #0]
 800febe:	6801      	ldr	r1, [r0, #0]
 800fec0:	115e      	asrs	r6, r3, #5
 800fec2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fec6:	f013 031f 	ands.w	r3, r3, #31
 800feca:	b087      	sub	sp, #28
 800fecc:	bf18      	it	ne
 800fece:	3604      	addne	r6, #4
 800fed0:	2500      	movs	r5, #0
 800fed2:	1f37      	subs	r7, r6, #4
 800fed4:	4682      	mov	sl, r0
 800fed6:	4690      	mov	r8, r2
 800fed8:	9301      	str	r3, [sp, #4]
 800feda:	f846 5c04 	str.w	r5, [r6, #-4]
 800fede:	46b9      	mov	r9, r7
 800fee0:	463c      	mov	r4, r7
 800fee2:	9502      	str	r5, [sp, #8]
 800fee4:	46ab      	mov	fp, r5
 800fee6:	784a      	ldrb	r2, [r1, #1]
 800fee8:	1c4b      	adds	r3, r1, #1
 800feea:	9303      	str	r3, [sp, #12]
 800feec:	b342      	cbz	r2, 800ff40 <__hexnan+0x88>
 800feee:	4610      	mov	r0, r2
 800fef0:	9105      	str	r1, [sp, #20]
 800fef2:	9204      	str	r2, [sp, #16]
 800fef4:	f7ff fd94 	bl	800fa20 <__hexdig_fun>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d151      	bne.n	800ffa0 <__hexnan+0xe8>
 800fefc:	9a04      	ldr	r2, [sp, #16]
 800fefe:	9905      	ldr	r1, [sp, #20]
 800ff00:	2a20      	cmp	r2, #32
 800ff02:	d818      	bhi.n	800ff36 <__hexnan+0x7e>
 800ff04:	9b02      	ldr	r3, [sp, #8]
 800ff06:	459b      	cmp	fp, r3
 800ff08:	dd13      	ble.n	800ff32 <__hexnan+0x7a>
 800ff0a:	454c      	cmp	r4, r9
 800ff0c:	d206      	bcs.n	800ff1c <__hexnan+0x64>
 800ff0e:	2d07      	cmp	r5, #7
 800ff10:	dc04      	bgt.n	800ff1c <__hexnan+0x64>
 800ff12:	462a      	mov	r2, r5
 800ff14:	4649      	mov	r1, r9
 800ff16:	4620      	mov	r0, r4
 800ff18:	f7ff ffa8 	bl	800fe6c <L_shift>
 800ff1c:	4544      	cmp	r4, r8
 800ff1e:	d952      	bls.n	800ffc6 <__hexnan+0x10e>
 800ff20:	2300      	movs	r3, #0
 800ff22:	f1a4 0904 	sub.w	r9, r4, #4
 800ff26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff2a:	f8cd b008 	str.w	fp, [sp, #8]
 800ff2e:	464c      	mov	r4, r9
 800ff30:	461d      	mov	r5, r3
 800ff32:	9903      	ldr	r1, [sp, #12]
 800ff34:	e7d7      	b.n	800fee6 <__hexnan+0x2e>
 800ff36:	2a29      	cmp	r2, #41	@ 0x29
 800ff38:	d157      	bne.n	800ffea <__hexnan+0x132>
 800ff3a:	3102      	adds	r1, #2
 800ff3c:	f8ca 1000 	str.w	r1, [sl]
 800ff40:	f1bb 0f00 	cmp.w	fp, #0
 800ff44:	d051      	beq.n	800ffea <__hexnan+0x132>
 800ff46:	454c      	cmp	r4, r9
 800ff48:	d206      	bcs.n	800ff58 <__hexnan+0xa0>
 800ff4a:	2d07      	cmp	r5, #7
 800ff4c:	dc04      	bgt.n	800ff58 <__hexnan+0xa0>
 800ff4e:	462a      	mov	r2, r5
 800ff50:	4649      	mov	r1, r9
 800ff52:	4620      	mov	r0, r4
 800ff54:	f7ff ff8a 	bl	800fe6c <L_shift>
 800ff58:	4544      	cmp	r4, r8
 800ff5a:	d936      	bls.n	800ffca <__hexnan+0x112>
 800ff5c:	f1a8 0204 	sub.w	r2, r8, #4
 800ff60:	4623      	mov	r3, r4
 800ff62:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff66:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff6a:	429f      	cmp	r7, r3
 800ff6c:	d2f9      	bcs.n	800ff62 <__hexnan+0xaa>
 800ff6e:	1b3b      	subs	r3, r7, r4
 800ff70:	f023 0303 	bic.w	r3, r3, #3
 800ff74:	3304      	adds	r3, #4
 800ff76:	3401      	adds	r4, #1
 800ff78:	3e03      	subs	r6, #3
 800ff7a:	42b4      	cmp	r4, r6
 800ff7c:	bf88      	it	hi
 800ff7e:	2304      	movhi	r3, #4
 800ff80:	4443      	add	r3, r8
 800ff82:	2200      	movs	r2, #0
 800ff84:	f843 2b04 	str.w	r2, [r3], #4
 800ff88:	429f      	cmp	r7, r3
 800ff8a:	d2fb      	bcs.n	800ff84 <__hexnan+0xcc>
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	b91b      	cbnz	r3, 800ff98 <__hexnan+0xe0>
 800ff90:	4547      	cmp	r7, r8
 800ff92:	d128      	bne.n	800ffe6 <__hexnan+0x12e>
 800ff94:	2301      	movs	r3, #1
 800ff96:	603b      	str	r3, [r7, #0]
 800ff98:	2005      	movs	r0, #5
 800ff9a:	b007      	add	sp, #28
 800ff9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa0:	3501      	adds	r5, #1
 800ffa2:	2d08      	cmp	r5, #8
 800ffa4:	f10b 0b01 	add.w	fp, fp, #1
 800ffa8:	dd06      	ble.n	800ffb8 <__hexnan+0x100>
 800ffaa:	4544      	cmp	r4, r8
 800ffac:	d9c1      	bls.n	800ff32 <__hexnan+0x7a>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ffb4:	2501      	movs	r5, #1
 800ffb6:	3c04      	subs	r4, #4
 800ffb8:	6822      	ldr	r2, [r4, #0]
 800ffba:	f000 000f 	and.w	r0, r0, #15
 800ffbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ffc2:	6020      	str	r0, [r4, #0]
 800ffc4:	e7b5      	b.n	800ff32 <__hexnan+0x7a>
 800ffc6:	2508      	movs	r5, #8
 800ffc8:	e7b3      	b.n	800ff32 <__hexnan+0x7a>
 800ffca:	9b01      	ldr	r3, [sp, #4]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d0dd      	beq.n	800ff8c <__hexnan+0xd4>
 800ffd0:	f1c3 0320 	rsb	r3, r3, #32
 800ffd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd8:	40da      	lsrs	r2, r3
 800ffda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ffde:	4013      	ands	r3, r2
 800ffe0:	f846 3c04 	str.w	r3, [r6, #-4]
 800ffe4:	e7d2      	b.n	800ff8c <__hexnan+0xd4>
 800ffe6:	3f04      	subs	r7, #4
 800ffe8:	e7d0      	b.n	800ff8c <__hexnan+0xd4>
 800ffea:	2004      	movs	r0, #4
 800ffec:	e7d5      	b.n	800ff9a <__hexnan+0xe2>

0800ffee <__ascii_mbtowc>:
 800ffee:	b082      	sub	sp, #8
 800fff0:	b901      	cbnz	r1, 800fff4 <__ascii_mbtowc+0x6>
 800fff2:	a901      	add	r1, sp, #4
 800fff4:	b142      	cbz	r2, 8010008 <__ascii_mbtowc+0x1a>
 800fff6:	b14b      	cbz	r3, 801000c <__ascii_mbtowc+0x1e>
 800fff8:	7813      	ldrb	r3, [r2, #0]
 800fffa:	600b      	str	r3, [r1, #0]
 800fffc:	7812      	ldrb	r2, [r2, #0]
 800fffe:	1e10      	subs	r0, r2, #0
 8010000:	bf18      	it	ne
 8010002:	2001      	movne	r0, #1
 8010004:	b002      	add	sp, #8
 8010006:	4770      	bx	lr
 8010008:	4610      	mov	r0, r2
 801000a:	e7fb      	b.n	8010004 <__ascii_mbtowc+0x16>
 801000c:	f06f 0001 	mvn.w	r0, #1
 8010010:	e7f8      	b.n	8010004 <__ascii_mbtowc+0x16>

08010012 <_realloc_r>:
 8010012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010016:	4680      	mov	r8, r0
 8010018:	4615      	mov	r5, r2
 801001a:	460c      	mov	r4, r1
 801001c:	b921      	cbnz	r1, 8010028 <_realloc_r+0x16>
 801001e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010022:	4611      	mov	r1, r2
 8010024:	f7fd bca8 	b.w	800d978 <_malloc_r>
 8010028:	b92a      	cbnz	r2, 8010036 <_realloc_r+0x24>
 801002a:	f7fd fc31 	bl	800d890 <_free_r>
 801002e:	2400      	movs	r4, #0
 8010030:	4620      	mov	r0, r4
 8010032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010036:	f000 f840 	bl	80100ba <_malloc_usable_size_r>
 801003a:	4285      	cmp	r5, r0
 801003c:	4606      	mov	r6, r0
 801003e:	d802      	bhi.n	8010046 <_realloc_r+0x34>
 8010040:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010044:	d8f4      	bhi.n	8010030 <_realloc_r+0x1e>
 8010046:	4629      	mov	r1, r5
 8010048:	4640      	mov	r0, r8
 801004a:	f7fd fc95 	bl	800d978 <_malloc_r>
 801004e:	4607      	mov	r7, r0
 8010050:	2800      	cmp	r0, #0
 8010052:	d0ec      	beq.n	801002e <_realloc_r+0x1c>
 8010054:	42b5      	cmp	r5, r6
 8010056:	462a      	mov	r2, r5
 8010058:	4621      	mov	r1, r4
 801005a:	bf28      	it	cs
 801005c:	4632      	movcs	r2, r6
 801005e:	f7fc fdb6 	bl	800cbce <memcpy>
 8010062:	4621      	mov	r1, r4
 8010064:	4640      	mov	r0, r8
 8010066:	f7fd fc13 	bl	800d890 <_free_r>
 801006a:	463c      	mov	r4, r7
 801006c:	e7e0      	b.n	8010030 <_realloc_r+0x1e>

0801006e <__ascii_wctomb>:
 801006e:	4603      	mov	r3, r0
 8010070:	4608      	mov	r0, r1
 8010072:	b141      	cbz	r1, 8010086 <__ascii_wctomb+0x18>
 8010074:	2aff      	cmp	r2, #255	@ 0xff
 8010076:	d904      	bls.n	8010082 <__ascii_wctomb+0x14>
 8010078:	228a      	movs	r2, #138	@ 0x8a
 801007a:	601a      	str	r2, [r3, #0]
 801007c:	f04f 30ff 	mov.w	r0, #4294967295
 8010080:	4770      	bx	lr
 8010082:	700a      	strb	r2, [r1, #0]
 8010084:	2001      	movs	r0, #1
 8010086:	4770      	bx	lr

08010088 <fiprintf>:
 8010088:	b40e      	push	{r1, r2, r3}
 801008a:	b503      	push	{r0, r1, lr}
 801008c:	4601      	mov	r1, r0
 801008e:	ab03      	add	r3, sp, #12
 8010090:	4805      	ldr	r0, [pc, #20]	@ (80100a8 <fiprintf+0x20>)
 8010092:	f853 2b04 	ldr.w	r2, [r3], #4
 8010096:	6800      	ldr	r0, [r0, #0]
 8010098:	9301      	str	r3, [sp, #4]
 801009a:	f7ff f9b1 	bl	800f400 <_vfiprintf_r>
 801009e:	b002      	add	sp, #8
 80100a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80100a4:	b003      	add	sp, #12
 80100a6:	4770      	bx	lr
 80100a8:	20000018 	.word	0x20000018

080100ac <abort>:
 80100ac:	b508      	push	{r3, lr}
 80100ae:	2006      	movs	r0, #6
 80100b0:	f000 f834 	bl	801011c <raise>
 80100b4:	2001      	movs	r0, #1
 80100b6:	f7f1 fc2a 	bl	800190e <_exit>

080100ba <_malloc_usable_size_r>:
 80100ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100be:	1f18      	subs	r0, r3, #4
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	bfbc      	itt	lt
 80100c4:	580b      	ldrlt	r3, [r1, r0]
 80100c6:	18c0      	addlt	r0, r0, r3
 80100c8:	4770      	bx	lr

080100ca <_raise_r>:
 80100ca:	291f      	cmp	r1, #31
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4605      	mov	r5, r0
 80100d0:	460c      	mov	r4, r1
 80100d2:	d904      	bls.n	80100de <_raise_r+0x14>
 80100d4:	2316      	movs	r3, #22
 80100d6:	6003      	str	r3, [r0, #0]
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295
 80100dc:	bd38      	pop	{r3, r4, r5, pc}
 80100de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80100e0:	b112      	cbz	r2, 80100e8 <_raise_r+0x1e>
 80100e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100e6:	b94b      	cbnz	r3, 80100fc <_raise_r+0x32>
 80100e8:	4628      	mov	r0, r5
 80100ea:	f000 f831 	bl	8010150 <_getpid_r>
 80100ee:	4622      	mov	r2, r4
 80100f0:	4601      	mov	r1, r0
 80100f2:	4628      	mov	r0, r5
 80100f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100f8:	f000 b818 	b.w	801012c <_kill_r>
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d00a      	beq.n	8010116 <_raise_r+0x4c>
 8010100:	1c59      	adds	r1, r3, #1
 8010102:	d103      	bne.n	801010c <_raise_r+0x42>
 8010104:	2316      	movs	r3, #22
 8010106:	6003      	str	r3, [r0, #0]
 8010108:	2001      	movs	r0, #1
 801010a:	e7e7      	b.n	80100dc <_raise_r+0x12>
 801010c:	2100      	movs	r1, #0
 801010e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010112:	4620      	mov	r0, r4
 8010114:	4798      	blx	r3
 8010116:	2000      	movs	r0, #0
 8010118:	e7e0      	b.n	80100dc <_raise_r+0x12>
	...

0801011c <raise>:
 801011c:	4b02      	ldr	r3, [pc, #8]	@ (8010128 <raise+0xc>)
 801011e:	4601      	mov	r1, r0
 8010120:	6818      	ldr	r0, [r3, #0]
 8010122:	f7ff bfd2 	b.w	80100ca <_raise_r>
 8010126:	bf00      	nop
 8010128:	20000018 	.word	0x20000018

0801012c <_kill_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d07      	ldr	r5, [pc, #28]	@ (801014c <_kill_r+0x20>)
 8010130:	2300      	movs	r3, #0
 8010132:	4604      	mov	r4, r0
 8010134:	4608      	mov	r0, r1
 8010136:	4611      	mov	r1, r2
 8010138:	602b      	str	r3, [r5, #0]
 801013a:	f7f1 fbd8 	bl	80018ee <_kill>
 801013e:	1c43      	adds	r3, r0, #1
 8010140:	d102      	bne.n	8010148 <_kill_r+0x1c>
 8010142:	682b      	ldr	r3, [r5, #0]
 8010144:	b103      	cbz	r3, 8010148 <_kill_r+0x1c>
 8010146:	6023      	str	r3, [r4, #0]
 8010148:	bd38      	pop	{r3, r4, r5, pc}
 801014a:	bf00      	nop
 801014c:	200016bc 	.word	0x200016bc

08010150 <_getpid_r>:
 8010150:	f7f1 bbc5 	b.w	80018de <_getpid>

08010154 <atan2>:
 8010154:	f000 baec 	b.w	8010730 <__ieee754_atan2>

08010158 <sqrt>:
 8010158:	b538      	push	{r3, r4, r5, lr}
 801015a:	ed2d 8b02 	vpush	{d8}
 801015e:	ec55 4b10 	vmov	r4, r5, d0
 8010162:	f000 f911 	bl	8010388 <__ieee754_sqrt>
 8010166:	4622      	mov	r2, r4
 8010168:	462b      	mov	r3, r5
 801016a:	4620      	mov	r0, r4
 801016c:	4629      	mov	r1, r5
 801016e:	eeb0 8a40 	vmov.f32	s16, s0
 8010172:	eef0 8a60 	vmov.f32	s17, s1
 8010176:	f7f0 fcd9 	bl	8000b2c <__aeabi_dcmpun>
 801017a:	b990      	cbnz	r0, 80101a2 <sqrt+0x4a>
 801017c:	2200      	movs	r2, #0
 801017e:	2300      	movs	r3, #0
 8010180:	4620      	mov	r0, r4
 8010182:	4629      	mov	r1, r5
 8010184:	f7f0 fcaa 	bl	8000adc <__aeabi_dcmplt>
 8010188:	b158      	cbz	r0, 80101a2 <sqrt+0x4a>
 801018a:	f7fc fcf3 	bl	800cb74 <__errno>
 801018e:	2321      	movs	r3, #33	@ 0x21
 8010190:	6003      	str	r3, [r0, #0]
 8010192:	2200      	movs	r2, #0
 8010194:	2300      	movs	r3, #0
 8010196:	4610      	mov	r0, r2
 8010198:	4619      	mov	r1, r3
 801019a:	f7f0 fb57 	bl	800084c <__aeabi_ddiv>
 801019e:	ec41 0b18 	vmov	d8, r0, r1
 80101a2:	eeb0 0a48 	vmov.f32	s0, s16
 80101a6:	eef0 0a68 	vmov.f32	s1, s17
 80101aa:	ecbd 8b02 	vpop	{d8}
 80101ae:	bd38      	pop	{r3, r4, r5, pc}

080101b0 <asinf>:
 80101b0:	b508      	push	{r3, lr}
 80101b2:	ed2d 8b02 	vpush	{d8}
 80101b6:	eeb0 8a40 	vmov.f32	s16, s0
 80101ba:	f000 fea1 	bl	8010f00 <__ieee754_asinf>
 80101be:	eeb4 8a48 	vcmp.f32	s16, s16
 80101c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c6:	eef0 8a40 	vmov.f32	s17, s0
 80101ca:	d615      	bvs.n	80101f8 <asinf+0x48>
 80101cc:	eeb0 0a48 	vmov.f32	s0, s16
 80101d0:	f000 f860 	bl	8010294 <fabsf>
 80101d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80101d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80101dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e0:	dd0a      	ble.n	80101f8 <asinf+0x48>
 80101e2:	f7fc fcc7 	bl	800cb74 <__errno>
 80101e6:	ecbd 8b02 	vpop	{d8}
 80101ea:	2321      	movs	r3, #33	@ 0x21
 80101ec:	6003      	str	r3, [r0, #0]
 80101ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80101f2:	4804      	ldr	r0, [pc, #16]	@ (8010204 <asinf+0x54>)
 80101f4:	f7fc bcfa 	b.w	800cbec <nanf>
 80101f8:	eeb0 0a68 	vmov.f32	s0, s17
 80101fc:	ecbd 8b02 	vpop	{d8}
 8010200:	bd08      	pop	{r3, pc}
 8010202:	bf00      	nop
 8010204:	080121c5 	.word	0x080121c5

08010208 <atan2f>:
 8010208:	f000 bf60 	b.w	80110cc <__ieee754_atan2f>

0801020c <cosf>:
 801020c:	ee10 3a10 	vmov	r3, s0
 8010210:	b507      	push	{r0, r1, r2, lr}
 8010212:	4a1e      	ldr	r2, [pc, #120]	@ (801028c <cosf+0x80>)
 8010214:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010218:	4293      	cmp	r3, r2
 801021a:	d806      	bhi.n	801022a <cosf+0x1e>
 801021c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010290 <cosf+0x84>
 8010220:	b003      	add	sp, #12
 8010222:	f85d eb04 	ldr.w	lr, [sp], #4
 8010226:	f000 bceb 	b.w	8010c00 <__kernel_cosf>
 801022a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801022e:	d304      	bcc.n	801023a <cosf+0x2e>
 8010230:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010234:	b003      	add	sp, #12
 8010236:	f85d fb04 	ldr.w	pc, [sp], #4
 801023a:	4668      	mov	r0, sp
 801023c:	f000 ffe6 	bl	801120c <__ieee754_rem_pio2f>
 8010240:	f000 0003 	and.w	r0, r0, #3
 8010244:	2801      	cmp	r0, #1
 8010246:	d009      	beq.n	801025c <cosf+0x50>
 8010248:	2802      	cmp	r0, #2
 801024a:	d010      	beq.n	801026e <cosf+0x62>
 801024c:	b9b0      	cbnz	r0, 801027c <cosf+0x70>
 801024e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010252:	ed9d 0a00 	vldr	s0, [sp]
 8010256:	f000 fcd3 	bl	8010c00 <__kernel_cosf>
 801025a:	e7eb      	b.n	8010234 <cosf+0x28>
 801025c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010260:	ed9d 0a00 	vldr	s0, [sp]
 8010264:	f000 fd24 	bl	8010cb0 <__kernel_sinf>
 8010268:	eeb1 0a40 	vneg.f32	s0, s0
 801026c:	e7e2      	b.n	8010234 <cosf+0x28>
 801026e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010272:	ed9d 0a00 	vldr	s0, [sp]
 8010276:	f000 fcc3 	bl	8010c00 <__kernel_cosf>
 801027a:	e7f5      	b.n	8010268 <cosf+0x5c>
 801027c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010280:	ed9d 0a00 	vldr	s0, [sp]
 8010284:	2001      	movs	r0, #1
 8010286:	f000 fd13 	bl	8010cb0 <__kernel_sinf>
 801028a:	e7d3      	b.n	8010234 <cosf+0x28>
 801028c:	3f490fd8 	.word	0x3f490fd8
 8010290:	00000000 	.word	0x00000000

08010294 <fabsf>:
 8010294:	ee10 3a10 	vmov	r3, s0
 8010298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801029c:	ee00 3a10 	vmov	s0, r3
 80102a0:	4770      	bx	lr
	...

080102a4 <sinf>:
 80102a4:	ee10 3a10 	vmov	r3, s0
 80102a8:	b507      	push	{r0, r1, r2, lr}
 80102aa:	4a1f      	ldr	r2, [pc, #124]	@ (8010328 <sinf+0x84>)
 80102ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d807      	bhi.n	80102c4 <sinf+0x20>
 80102b4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801032c <sinf+0x88>
 80102b8:	2000      	movs	r0, #0
 80102ba:	b003      	add	sp, #12
 80102bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80102c0:	f000 bcf6 	b.w	8010cb0 <__kernel_sinf>
 80102c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80102c8:	d304      	bcc.n	80102d4 <sinf+0x30>
 80102ca:	ee30 0a40 	vsub.f32	s0, s0, s0
 80102ce:	b003      	add	sp, #12
 80102d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80102d4:	4668      	mov	r0, sp
 80102d6:	f000 ff99 	bl	801120c <__ieee754_rem_pio2f>
 80102da:	f000 0003 	and.w	r0, r0, #3
 80102de:	2801      	cmp	r0, #1
 80102e0:	d00a      	beq.n	80102f8 <sinf+0x54>
 80102e2:	2802      	cmp	r0, #2
 80102e4:	d00f      	beq.n	8010306 <sinf+0x62>
 80102e6:	b9c0      	cbnz	r0, 801031a <sinf+0x76>
 80102e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80102ec:	ed9d 0a00 	vldr	s0, [sp]
 80102f0:	2001      	movs	r0, #1
 80102f2:	f000 fcdd 	bl	8010cb0 <__kernel_sinf>
 80102f6:	e7ea      	b.n	80102ce <sinf+0x2a>
 80102f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80102fc:	ed9d 0a00 	vldr	s0, [sp]
 8010300:	f000 fc7e 	bl	8010c00 <__kernel_cosf>
 8010304:	e7e3      	b.n	80102ce <sinf+0x2a>
 8010306:	eddd 0a01 	vldr	s1, [sp, #4]
 801030a:	ed9d 0a00 	vldr	s0, [sp]
 801030e:	2001      	movs	r0, #1
 8010310:	f000 fcce 	bl	8010cb0 <__kernel_sinf>
 8010314:	eeb1 0a40 	vneg.f32	s0, s0
 8010318:	e7d9      	b.n	80102ce <sinf+0x2a>
 801031a:	eddd 0a01 	vldr	s1, [sp, #4]
 801031e:	ed9d 0a00 	vldr	s0, [sp]
 8010322:	f000 fc6d 	bl	8010c00 <__kernel_cosf>
 8010326:	e7f5      	b.n	8010314 <sinf+0x70>
 8010328:	3f490fd8 	.word	0x3f490fd8
 801032c:	00000000 	.word	0x00000000

08010330 <tanf>:
 8010330:	ee10 3a10 	vmov	r3, s0
 8010334:	b507      	push	{r0, r1, r2, lr}
 8010336:	4a12      	ldr	r2, [pc, #72]	@ (8010380 <tanf+0x50>)
 8010338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801033c:	4293      	cmp	r3, r2
 801033e:	d807      	bhi.n	8010350 <tanf+0x20>
 8010340:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8010384 <tanf+0x54>
 8010344:	2001      	movs	r0, #1
 8010346:	b003      	add	sp, #12
 8010348:	f85d eb04 	ldr.w	lr, [sp], #4
 801034c:	f000 bcf8 	b.w	8010d40 <__kernel_tanf>
 8010350:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010354:	d304      	bcc.n	8010360 <tanf+0x30>
 8010356:	ee30 0a40 	vsub.f32	s0, s0, s0
 801035a:	b003      	add	sp, #12
 801035c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010360:	4668      	mov	r0, sp
 8010362:	f000 ff53 	bl	801120c <__ieee754_rem_pio2f>
 8010366:	0040      	lsls	r0, r0, #1
 8010368:	f000 0002 	and.w	r0, r0, #2
 801036c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010370:	ed9d 0a00 	vldr	s0, [sp]
 8010374:	f1c0 0001 	rsb	r0, r0, #1
 8010378:	f000 fce2 	bl	8010d40 <__kernel_tanf>
 801037c:	e7ed      	b.n	801035a <tanf+0x2a>
 801037e:	bf00      	nop
 8010380:	3f490fda 	.word	0x3f490fda
 8010384:	00000000 	.word	0x00000000

08010388 <__ieee754_sqrt>:
 8010388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038c:	4a68      	ldr	r2, [pc, #416]	@ (8010530 <__ieee754_sqrt+0x1a8>)
 801038e:	ec55 4b10 	vmov	r4, r5, d0
 8010392:	43aa      	bics	r2, r5
 8010394:	462b      	mov	r3, r5
 8010396:	4621      	mov	r1, r4
 8010398:	d110      	bne.n	80103bc <__ieee754_sqrt+0x34>
 801039a:	4622      	mov	r2, r4
 801039c:	4620      	mov	r0, r4
 801039e:	4629      	mov	r1, r5
 80103a0:	f7f0 f92a 	bl	80005f8 <__aeabi_dmul>
 80103a4:	4602      	mov	r2, r0
 80103a6:	460b      	mov	r3, r1
 80103a8:	4620      	mov	r0, r4
 80103aa:	4629      	mov	r1, r5
 80103ac:	f7ef ff6e 	bl	800028c <__adddf3>
 80103b0:	4604      	mov	r4, r0
 80103b2:	460d      	mov	r5, r1
 80103b4:	ec45 4b10 	vmov	d0, r4, r5
 80103b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103bc:	2d00      	cmp	r5, #0
 80103be:	dc0e      	bgt.n	80103de <__ieee754_sqrt+0x56>
 80103c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80103c4:	4322      	orrs	r2, r4
 80103c6:	d0f5      	beq.n	80103b4 <__ieee754_sqrt+0x2c>
 80103c8:	b19d      	cbz	r5, 80103f2 <__ieee754_sqrt+0x6a>
 80103ca:	4622      	mov	r2, r4
 80103cc:	4620      	mov	r0, r4
 80103ce:	4629      	mov	r1, r5
 80103d0:	f7ef ff5a 	bl	8000288 <__aeabi_dsub>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	f7f0 fa38 	bl	800084c <__aeabi_ddiv>
 80103dc:	e7e8      	b.n	80103b0 <__ieee754_sqrt+0x28>
 80103de:	152a      	asrs	r2, r5, #20
 80103e0:	d115      	bne.n	801040e <__ieee754_sqrt+0x86>
 80103e2:	2000      	movs	r0, #0
 80103e4:	e009      	b.n	80103fa <__ieee754_sqrt+0x72>
 80103e6:	0acb      	lsrs	r3, r1, #11
 80103e8:	3a15      	subs	r2, #21
 80103ea:	0549      	lsls	r1, r1, #21
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d0fa      	beq.n	80103e6 <__ieee754_sqrt+0x5e>
 80103f0:	e7f7      	b.n	80103e2 <__ieee754_sqrt+0x5a>
 80103f2:	462a      	mov	r2, r5
 80103f4:	e7fa      	b.n	80103ec <__ieee754_sqrt+0x64>
 80103f6:	005b      	lsls	r3, r3, #1
 80103f8:	3001      	adds	r0, #1
 80103fa:	02dc      	lsls	r4, r3, #11
 80103fc:	d5fb      	bpl.n	80103f6 <__ieee754_sqrt+0x6e>
 80103fe:	1e44      	subs	r4, r0, #1
 8010400:	1b12      	subs	r2, r2, r4
 8010402:	f1c0 0420 	rsb	r4, r0, #32
 8010406:	fa21 f404 	lsr.w	r4, r1, r4
 801040a:	4323      	orrs	r3, r4
 801040c:	4081      	lsls	r1, r0
 801040e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010412:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801041a:	07d2      	lsls	r2, r2, #31
 801041c:	bf5c      	itt	pl
 801041e:	005b      	lslpl	r3, r3, #1
 8010420:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010424:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010428:	bf58      	it	pl
 801042a:	0049      	lslpl	r1, r1, #1
 801042c:	2600      	movs	r6, #0
 801042e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010432:	106d      	asrs	r5, r5, #1
 8010434:	0049      	lsls	r1, r1, #1
 8010436:	2016      	movs	r0, #22
 8010438:	4632      	mov	r2, r6
 801043a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801043e:	1917      	adds	r7, r2, r4
 8010440:	429f      	cmp	r7, r3
 8010442:	bfde      	ittt	le
 8010444:	193a      	addle	r2, r7, r4
 8010446:	1bdb      	suble	r3, r3, r7
 8010448:	1936      	addle	r6, r6, r4
 801044a:	0fcf      	lsrs	r7, r1, #31
 801044c:	3801      	subs	r0, #1
 801044e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010452:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010456:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801045a:	d1f0      	bne.n	801043e <__ieee754_sqrt+0xb6>
 801045c:	4604      	mov	r4, r0
 801045e:	2720      	movs	r7, #32
 8010460:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010464:	429a      	cmp	r2, r3
 8010466:	eb00 0e0c 	add.w	lr, r0, ip
 801046a:	db02      	blt.n	8010472 <__ieee754_sqrt+0xea>
 801046c:	d113      	bne.n	8010496 <__ieee754_sqrt+0x10e>
 801046e:	458e      	cmp	lr, r1
 8010470:	d811      	bhi.n	8010496 <__ieee754_sqrt+0x10e>
 8010472:	f1be 0f00 	cmp.w	lr, #0
 8010476:	eb0e 000c 	add.w	r0, lr, ip
 801047a:	da42      	bge.n	8010502 <__ieee754_sqrt+0x17a>
 801047c:	2800      	cmp	r0, #0
 801047e:	db40      	blt.n	8010502 <__ieee754_sqrt+0x17a>
 8010480:	f102 0801 	add.w	r8, r2, #1
 8010484:	1a9b      	subs	r3, r3, r2
 8010486:	458e      	cmp	lr, r1
 8010488:	bf88      	it	hi
 801048a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801048e:	eba1 010e 	sub.w	r1, r1, lr
 8010492:	4464      	add	r4, ip
 8010494:	4642      	mov	r2, r8
 8010496:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801049a:	3f01      	subs	r7, #1
 801049c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80104a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80104a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80104a8:	d1dc      	bne.n	8010464 <__ieee754_sqrt+0xdc>
 80104aa:	4319      	orrs	r1, r3
 80104ac:	d01b      	beq.n	80104e6 <__ieee754_sqrt+0x15e>
 80104ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010534 <__ieee754_sqrt+0x1ac>
 80104b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010538 <__ieee754_sqrt+0x1b0>
 80104b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80104ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80104be:	f7ef fee3 	bl	8000288 <__aeabi_dsub>
 80104c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80104c6:	4602      	mov	r2, r0
 80104c8:	460b      	mov	r3, r1
 80104ca:	4640      	mov	r0, r8
 80104cc:	4649      	mov	r1, r9
 80104ce:	f7f0 fb0f 	bl	8000af0 <__aeabi_dcmple>
 80104d2:	b140      	cbz	r0, 80104e6 <__ieee754_sqrt+0x15e>
 80104d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80104d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80104dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80104e0:	d111      	bne.n	8010506 <__ieee754_sqrt+0x17e>
 80104e2:	3601      	adds	r6, #1
 80104e4:	463c      	mov	r4, r7
 80104e6:	1072      	asrs	r2, r6, #1
 80104e8:	0863      	lsrs	r3, r4, #1
 80104ea:	07f1      	lsls	r1, r6, #31
 80104ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80104f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80104f4:	bf48      	it	mi
 80104f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80104fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80104fe:	4618      	mov	r0, r3
 8010500:	e756      	b.n	80103b0 <__ieee754_sqrt+0x28>
 8010502:	4690      	mov	r8, r2
 8010504:	e7be      	b.n	8010484 <__ieee754_sqrt+0xfc>
 8010506:	f7ef fec1 	bl	800028c <__adddf3>
 801050a:	e9da 8900 	ldrd	r8, r9, [sl]
 801050e:	4602      	mov	r2, r0
 8010510:	460b      	mov	r3, r1
 8010512:	4640      	mov	r0, r8
 8010514:	4649      	mov	r1, r9
 8010516:	f7f0 fae1 	bl	8000adc <__aeabi_dcmplt>
 801051a:	b120      	cbz	r0, 8010526 <__ieee754_sqrt+0x19e>
 801051c:	1ca0      	adds	r0, r4, #2
 801051e:	bf08      	it	eq
 8010520:	3601      	addeq	r6, #1
 8010522:	3402      	adds	r4, #2
 8010524:	e7df      	b.n	80104e6 <__ieee754_sqrt+0x15e>
 8010526:	1c63      	adds	r3, r4, #1
 8010528:	f023 0401 	bic.w	r4, r3, #1
 801052c:	e7db      	b.n	80104e6 <__ieee754_sqrt+0x15e>
 801052e:	bf00      	nop
 8010530:	7ff00000 	.word	0x7ff00000
 8010534:	200001e0 	.word	0x200001e0
 8010538:	200001d8 	.word	0x200001d8
 801053c:	00000000 	.word	0x00000000

08010540 <ceil>:
 8010540:	ec51 0b10 	vmov	r0, r1, d0
 8010544:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801054c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010550:	2e13      	cmp	r6, #19
 8010552:	460c      	mov	r4, r1
 8010554:	4605      	mov	r5, r0
 8010556:	4680      	mov	r8, r0
 8010558:	dc2e      	bgt.n	80105b8 <ceil+0x78>
 801055a:	2e00      	cmp	r6, #0
 801055c:	da11      	bge.n	8010582 <ceil+0x42>
 801055e:	a332      	add	r3, pc, #200	@ (adr r3, 8010628 <ceil+0xe8>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	f7ef fe92 	bl	800028c <__adddf3>
 8010568:	2200      	movs	r2, #0
 801056a:	2300      	movs	r3, #0
 801056c:	f7f0 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 8010570:	b120      	cbz	r0, 801057c <ceil+0x3c>
 8010572:	2c00      	cmp	r4, #0
 8010574:	db4f      	blt.n	8010616 <ceil+0xd6>
 8010576:	4325      	orrs	r5, r4
 8010578:	d151      	bne.n	801061e <ceil+0xde>
 801057a:	462c      	mov	r4, r5
 801057c:	4621      	mov	r1, r4
 801057e:	4628      	mov	r0, r5
 8010580:	e023      	b.n	80105ca <ceil+0x8a>
 8010582:	4f2b      	ldr	r7, [pc, #172]	@ (8010630 <ceil+0xf0>)
 8010584:	4137      	asrs	r7, r6
 8010586:	ea01 0307 	and.w	r3, r1, r7
 801058a:	4303      	orrs	r3, r0
 801058c:	d01d      	beq.n	80105ca <ceil+0x8a>
 801058e:	a326      	add	r3, pc, #152	@ (adr r3, 8010628 <ceil+0xe8>)
 8010590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010594:	f7ef fe7a 	bl	800028c <__adddf3>
 8010598:	2200      	movs	r2, #0
 801059a:	2300      	movs	r3, #0
 801059c:	f7f0 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d0eb      	beq.n	801057c <ceil+0x3c>
 80105a4:	2c00      	cmp	r4, #0
 80105a6:	bfc2      	ittt	gt
 80105a8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80105ac:	4133      	asrgt	r3, r6
 80105ae:	18e4      	addgt	r4, r4, r3
 80105b0:	ea24 0407 	bic.w	r4, r4, r7
 80105b4:	2500      	movs	r5, #0
 80105b6:	e7e1      	b.n	801057c <ceil+0x3c>
 80105b8:	2e33      	cmp	r6, #51	@ 0x33
 80105ba:	dd0a      	ble.n	80105d2 <ceil+0x92>
 80105bc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80105c0:	d103      	bne.n	80105ca <ceil+0x8a>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	f7ef fe61 	bl	800028c <__adddf3>
 80105ca:	ec41 0b10 	vmov	d0, r0, r1
 80105ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80105d6:	f04f 37ff 	mov.w	r7, #4294967295
 80105da:	40df      	lsrs	r7, r3
 80105dc:	4238      	tst	r0, r7
 80105de:	d0f4      	beq.n	80105ca <ceil+0x8a>
 80105e0:	a311      	add	r3, pc, #68	@ (adr r3, 8010628 <ceil+0xe8>)
 80105e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e6:	f7ef fe51 	bl	800028c <__adddf3>
 80105ea:	2200      	movs	r2, #0
 80105ec:	2300      	movs	r3, #0
 80105ee:	f7f0 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d0c2      	beq.n	801057c <ceil+0x3c>
 80105f6:	2c00      	cmp	r4, #0
 80105f8:	dd0a      	ble.n	8010610 <ceil+0xd0>
 80105fa:	2e14      	cmp	r6, #20
 80105fc:	d101      	bne.n	8010602 <ceil+0xc2>
 80105fe:	3401      	adds	r4, #1
 8010600:	e006      	b.n	8010610 <ceil+0xd0>
 8010602:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010606:	2301      	movs	r3, #1
 8010608:	40b3      	lsls	r3, r6
 801060a:	441d      	add	r5, r3
 801060c:	45a8      	cmp	r8, r5
 801060e:	d8f6      	bhi.n	80105fe <ceil+0xbe>
 8010610:	ea25 0507 	bic.w	r5, r5, r7
 8010614:	e7b2      	b.n	801057c <ceil+0x3c>
 8010616:	2500      	movs	r5, #0
 8010618:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801061c:	e7ae      	b.n	801057c <ceil+0x3c>
 801061e:	4c05      	ldr	r4, [pc, #20]	@ (8010634 <ceil+0xf4>)
 8010620:	2500      	movs	r5, #0
 8010622:	e7ab      	b.n	801057c <ceil+0x3c>
 8010624:	f3af 8000 	nop.w
 8010628:	8800759c 	.word	0x8800759c
 801062c:	7e37e43c 	.word	0x7e37e43c
 8010630:	000fffff 	.word	0x000fffff
 8010634:	3ff00000 	.word	0x3ff00000

08010638 <floor>:
 8010638:	ec51 0b10 	vmov	r0, r1, d0
 801063c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010644:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010648:	2e13      	cmp	r6, #19
 801064a:	460c      	mov	r4, r1
 801064c:	4605      	mov	r5, r0
 801064e:	4680      	mov	r8, r0
 8010650:	dc34      	bgt.n	80106bc <floor+0x84>
 8010652:	2e00      	cmp	r6, #0
 8010654:	da17      	bge.n	8010686 <floor+0x4e>
 8010656:	a332      	add	r3, pc, #200	@ (adr r3, 8010720 <floor+0xe8>)
 8010658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065c:	f7ef fe16 	bl	800028c <__adddf3>
 8010660:	2200      	movs	r2, #0
 8010662:	2300      	movs	r3, #0
 8010664:	f7f0 fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8010668:	b150      	cbz	r0, 8010680 <floor+0x48>
 801066a:	2c00      	cmp	r4, #0
 801066c:	da55      	bge.n	801071a <floor+0xe2>
 801066e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010672:	432c      	orrs	r4, r5
 8010674:	2500      	movs	r5, #0
 8010676:	42ac      	cmp	r4, r5
 8010678:	4c2b      	ldr	r4, [pc, #172]	@ (8010728 <floor+0xf0>)
 801067a:	bf08      	it	eq
 801067c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010680:	4621      	mov	r1, r4
 8010682:	4628      	mov	r0, r5
 8010684:	e023      	b.n	80106ce <floor+0x96>
 8010686:	4f29      	ldr	r7, [pc, #164]	@ (801072c <floor+0xf4>)
 8010688:	4137      	asrs	r7, r6
 801068a:	ea01 0307 	and.w	r3, r1, r7
 801068e:	4303      	orrs	r3, r0
 8010690:	d01d      	beq.n	80106ce <floor+0x96>
 8010692:	a323      	add	r3, pc, #140	@ (adr r3, 8010720 <floor+0xe8>)
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	f7ef fdf8 	bl	800028c <__adddf3>
 801069c:	2200      	movs	r2, #0
 801069e:	2300      	movs	r3, #0
 80106a0:	f7f0 fa3a 	bl	8000b18 <__aeabi_dcmpgt>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d0eb      	beq.n	8010680 <floor+0x48>
 80106a8:	2c00      	cmp	r4, #0
 80106aa:	bfbe      	ittt	lt
 80106ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80106b0:	4133      	asrlt	r3, r6
 80106b2:	18e4      	addlt	r4, r4, r3
 80106b4:	ea24 0407 	bic.w	r4, r4, r7
 80106b8:	2500      	movs	r5, #0
 80106ba:	e7e1      	b.n	8010680 <floor+0x48>
 80106bc:	2e33      	cmp	r6, #51	@ 0x33
 80106be:	dd0a      	ble.n	80106d6 <floor+0x9e>
 80106c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80106c4:	d103      	bne.n	80106ce <floor+0x96>
 80106c6:	4602      	mov	r2, r0
 80106c8:	460b      	mov	r3, r1
 80106ca:	f7ef fddf 	bl	800028c <__adddf3>
 80106ce:	ec41 0b10 	vmov	d0, r0, r1
 80106d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80106da:	f04f 37ff 	mov.w	r7, #4294967295
 80106de:	40df      	lsrs	r7, r3
 80106e0:	4207      	tst	r7, r0
 80106e2:	d0f4      	beq.n	80106ce <floor+0x96>
 80106e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8010720 <floor+0xe8>)
 80106e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ea:	f7ef fdcf 	bl	800028c <__adddf3>
 80106ee:	2200      	movs	r2, #0
 80106f0:	2300      	movs	r3, #0
 80106f2:	f7f0 fa11 	bl	8000b18 <__aeabi_dcmpgt>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d0c2      	beq.n	8010680 <floor+0x48>
 80106fa:	2c00      	cmp	r4, #0
 80106fc:	da0a      	bge.n	8010714 <floor+0xdc>
 80106fe:	2e14      	cmp	r6, #20
 8010700:	d101      	bne.n	8010706 <floor+0xce>
 8010702:	3401      	adds	r4, #1
 8010704:	e006      	b.n	8010714 <floor+0xdc>
 8010706:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801070a:	2301      	movs	r3, #1
 801070c:	40b3      	lsls	r3, r6
 801070e:	441d      	add	r5, r3
 8010710:	4545      	cmp	r5, r8
 8010712:	d3f6      	bcc.n	8010702 <floor+0xca>
 8010714:	ea25 0507 	bic.w	r5, r5, r7
 8010718:	e7b2      	b.n	8010680 <floor+0x48>
 801071a:	2500      	movs	r5, #0
 801071c:	462c      	mov	r4, r5
 801071e:	e7af      	b.n	8010680 <floor+0x48>
 8010720:	8800759c 	.word	0x8800759c
 8010724:	7e37e43c 	.word	0x7e37e43c
 8010728:	bff00000 	.word	0xbff00000
 801072c:	000fffff 	.word	0x000fffff

08010730 <__ieee754_atan2>:
 8010730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010734:	ec57 6b11 	vmov	r6, r7, d1
 8010738:	4273      	negs	r3, r6
 801073a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80108b8 <__ieee754_atan2+0x188>
 801073e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8010742:	4333      	orrs	r3, r6
 8010744:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010748:	4543      	cmp	r3, r8
 801074a:	ec51 0b10 	vmov	r0, r1, d0
 801074e:	4635      	mov	r5, r6
 8010750:	d809      	bhi.n	8010766 <__ieee754_atan2+0x36>
 8010752:	4244      	negs	r4, r0
 8010754:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010758:	4304      	orrs	r4, r0
 801075a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801075e:	4544      	cmp	r4, r8
 8010760:	468e      	mov	lr, r1
 8010762:	4681      	mov	r9, r0
 8010764:	d907      	bls.n	8010776 <__ieee754_atan2+0x46>
 8010766:	4632      	mov	r2, r6
 8010768:	463b      	mov	r3, r7
 801076a:	f7ef fd8f 	bl	800028c <__adddf3>
 801076e:	ec41 0b10 	vmov	d0, r0, r1
 8010772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010776:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801077a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801077e:	4334      	orrs	r4, r6
 8010780:	d103      	bne.n	801078a <__ieee754_atan2+0x5a>
 8010782:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010786:	f000 b89b 	b.w	80108c0 <atan>
 801078a:	17bc      	asrs	r4, r7, #30
 801078c:	f004 0402 	and.w	r4, r4, #2
 8010790:	ea53 0909 	orrs.w	r9, r3, r9
 8010794:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010798:	d107      	bne.n	80107aa <__ieee754_atan2+0x7a>
 801079a:	2c02      	cmp	r4, #2
 801079c:	d05f      	beq.n	801085e <__ieee754_atan2+0x12e>
 801079e:	2c03      	cmp	r4, #3
 80107a0:	d1e5      	bne.n	801076e <__ieee754_atan2+0x3e>
 80107a2:	a141      	add	r1, pc, #260	@ (adr r1, 80108a8 <__ieee754_atan2+0x178>)
 80107a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107a8:	e7e1      	b.n	801076e <__ieee754_atan2+0x3e>
 80107aa:	4315      	orrs	r5, r2
 80107ac:	d106      	bne.n	80107bc <__ieee754_atan2+0x8c>
 80107ae:	f1be 0f00 	cmp.w	lr, #0
 80107b2:	da5f      	bge.n	8010874 <__ieee754_atan2+0x144>
 80107b4:	a13e      	add	r1, pc, #248	@ (adr r1, 80108b0 <__ieee754_atan2+0x180>)
 80107b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107ba:	e7d8      	b.n	801076e <__ieee754_atan2+0x3e>
 80107bc:	4542      	cmp	r2, r8
 80107be:	d10f      	bne.n	80107e0 <__ieee754_atan2+0xb0>
 80107c0:	4293      	cmp	r3, r2
 80107c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80107c6:	d107      	bne.n	80107d8 <__ieee754_atan2+0xa8>
 80107c8:	2c02      	cmp	r4, #2
 80107ca:	d84c      	bhi.n	8010866 <__ieee754_atan2+0x136>
 80107cc:	4b34      	ldr	r3, [pc, #208]	@ (80108a0 <__ieee754_atan2+0x170>)
 80107ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80107d6:	e7ca      	b.n	801076e <__ieee754_atan2+0x3e>
 80107d8:	2c02      	cmp	r4, #2
 80107da:	d848      	bhi.n	801086e <__ieee754_atan2+0x13e>
 80107dc:	4b31      	ldr	r3, [pc, #196]	@ (80108a4 <__ieee754_atan2+0x174>)
 80107de:	e7f6      	b.n	80107ce <__ieee754_atan2+0x9e>
 80107e0:	4543      	cmp	r3, r8
 80107e2:	d0e4      	beq.n	80107ae <__ieee754_atan2+0x7e>
 80107e4:	1a9b      	subs	r3, r3, r2
 80107e6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80107ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80107ee:	da1e      	bge.n	801082e <__ieee754_atan2+0xfe>
 80107f0:	2f00      	cmp	r7, #0
 80107f2:	da01      	bge.n	80107f8 <__ieee754_atan2+0xc8>
 80107f4:	323c      	adds	r2, #60	@ 0x3c
 80107f6:	db1e      	blt.n	8010836 <__ieee754_atan2+0x106>
 80107f8:	4632      	mov	r2, r6
 80107fa:	463b      	mov	r3, r7
 80107fc:	f7f0 f826 	bl	800084c <__aeabi_ddiv>
 8010800:	ec41 0b10 	vmov	d0, r0, r1
 8010804:	f000 f9f4 	bl	8010bf0 <fabs>
 8010808:	f000 f85a 	bl	80108c0 <atan>
 801080c:	ec51 0b10 	vmov	r0, r1, d0
 8010810:	2c01      	cmp	r4, #1
 8010812:	d013      	beq.n	801083c <__ieee754_atan2+0x10c>
 8010814:	2c02      	cmp	r4, #2
 8010816:	d015      	beq.n	8010844 <__ieee754_atan2+0x114>
 8010818:	2c00      	cmp	r4, #0
 801081a:	d0a8      	beq.n	801076e <__ieee754_atan2+0x3e>
 801081c:	a318      	add	r3, pc, #96	@ (adr r3, 8010880 <__ieee754_atan2+0x150>)
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	f7ef fd31 	bl	8000288 <__aeabi_dsub>
 8010826:	a318      	add	r3, pc, #96	@ (adr r3, 8010888 <__ieee754_atan2+0x158>)
 8010828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082c:	e014      	b.n	8010858 <__ieee754_atan2+0x128>
 801082e:	a118      	add	r1, pc, #96	@ (adr r1, 8010890 <__ieee754_atan2+0x160>)
 8010830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010834:	e7ec      	b.n	8010810 <__ieee754_atan2+0xe0>
 8010836:	2000      	movs	r0, #0
 8010838:	2100      	movs	r1, #0
 801083a:	e7e9      	b.n	8010810 <__ieee754_atan2+0xe0>
 801083c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010840:	4619      	mov	r1, r3
 8010842:	e794      	b.n	801076e <__ieee754_atan2+0x3e>
 8010844:	a30e      	add	r3, pc, #56	@ (adr r3, 8010880 <__ieee754_atan2+0x150>)
 8010846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084a:	f7ef fd1d 	bl	8000288 <__aeabi_dsub>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	a10d      	add	r1, pc, #52	@ (adr r1, 8010888 <__ieee754_atan2+0x158>)
 8010854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010858:	f7ef fd16 	bl	8000288 <__aeabi_dsub>
 801085c:	e787      	b.n	801076e <__ieee754_atan2+0x3e>
 801085e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010888 <__ieee754_atan2+0x158>)
 8010860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010864:	e783      	b.n	801076e <__ieee754_atan2+0x3e>
 8010866:	a10c      	add	r1, pc, #48	@ (adr r1, 8010898 <__ieee754_atan2+0x168>)
 8010868:	e9d1 0100 	ldrd	r0, r1, [r1]
 801086c:	e77f      	b.n	801076e <__ieee754_atan2+0x3e>
 801086e:	2000      	movs	r0, #0
 8010870:	2100      	movs	r1, #0
 8010872:	e77c      	b.n	801076e <__ieee754_atan2+0x3e>
 8010874:	a106      	add	r1, pc, #24	@ (adr r1, 8010890 <__ieee754_atan2+0x160>)
 8010876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801087a:	e778      	b.n	801076e <__ieee754_atan2+0x3e>
 801087c:	f3af 8000 	nop.w
 8010880:	33145c07 	.word	0x33145c07
 8010884:	3ca1a626 	.word	0x3ca1a626
 8010888:	54442d18 	.word	0x54442d18
 801088c:	400921fb 	.word	0x400921fb
 8010890:	54442d18 	.word	0x54442d18
 8010894:	3ff921fb 	.word	0x3ff921fb
 8010898:	54442d18 	.word	0x54442d18
 801089c:	3fe921fb 	.word	0x3fe921fb
 80108a0:	08012240 	.word	0x08012240
 80108a4:	08012228 	.word	0x08012228
 80108a8:	54442d18 	.word	0x54442d18
 80108ac:	c00921fb 	.word	0xc00921fb
 80108b0:	54442d18 	.word	0x54442d18
 80108b4:	bff921fb 	.word	0xbff921fb
 80108b8:	7ff00000 	.word	0x7ff00000
 80108bc:	00000000 	.word	0x00000000

080108c0 <atan>:
 80108c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c4:	ec55 4b10 	vmov	r4, r5, d0
 80108c8:	4bbf      	ldr	r3, [pc, #764]	@ (8010bc8 <atan+0x308>)
 80108ca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80108ce:	429e      	cmp	r6, r3
 80108d0:	46ab      	mov	fp, r5
 80108d2:	d918      	bls.n	8010906 <atan+0x46>
 80108d4:	4bbd      	ldr	r3, [pc, #756]	@ (8010bcc <atan+0x30c>)
 80108d6:	429e      	cmp	r6, r3
 80108d8:	d801      	bhi.n	80108de <atan+0x1e>
 80108da:	d109      	bne.n	80108f0 <atan+0x30>
 80108dc:	b144      	cbz	r4, 80108f0 <atan+0x30>
 80108de:	4622      	mov	r2, r4
 80108e0:	462b      	mov	r3, r5
 80108e2:	4620      	mov	r0, r4
 80108e4:	4629      	mov	r1, r5
 80108e6:	f7ef fcd1 	bl	800028c <__adddf3>
 80108ea:	4604      	mov	r4, r0
 80108ec:	460d      	mov	r5, r1
 80108ee:	e006      	b.n	80108fe <atan+0x3e>
 80108f0:	f1bb 0f00 	cmp.w	fp, #0
 80108f4:	f340 812b 	ble.w	8010b4e <atan+0x28e>
 80108f8:	a597      	add	r5, pc, #604	@ (adr r5, 8010b58 <atan+0x298>)
 80108fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80108fe:	ec45 4b10 	vmov	d0, r4, r5
 8010902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010906:	4bb2      	ldr	r3, [pc, #712]	@ (8010bd0 <atan+0x310>)
 8010908:	429e      	cmp	r6, r3
 801090a:	d813      	bhi.n	8010934 <atan+0x74>
 801090c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010910:	429e      	cmp	r6, r3
 8010912:	d80c      	bhi.n	801092e <atan+0x6e>
 8010914:	a392      	add	r3, pc, #584	@ (adr r3, 8010b60 <atan+0x2a0>)
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	4620      	mov	r0, r4
 801091c:	4629      	mov	r1, r5
 801091e:	f7ef fcb5 	bl	800028c <__adddf3>
 8010922:	4bac      	ldr	r3, [pc, #688]	@ (8010bd4 <atan+0x314>)
 8010924:	2200      	movs	r2, #0
 8010926:	f7f0 f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 801092a:	2800      	cmp	r0, #0
 801092c:	d1e7      	bne.n	80108fe <atan+0x3e>
 801092e:	f04f 3aff 	mov.w	sl, #4294967295
 8010932:	e029      	b.n	8010988 <atan+0xc8>
 8010934:	f000 f95c 	bl	8010bf0 <fabs>
 8010938:	4ba7      	ldr	r3, [pc, #668]	@ (8010bd8 <atan+0x318>)
 801093a:	429e      	cmp	r6, r3
 801093c:	ec55 4b10 	vmov	r4, r5, d0
 8010940:	f200 80bc 	bhi.w	8010abc <atan+0x1fc>
 8010944:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010948:	429e      	cmp	r6, r3
 801094a:	f200 809e 	bhi.w	8010a8a <atan+0x1ca>
 801094e:	4622      	mov	r2, r4
 8010950:	462b      	mov	r3, r5
 8010952:	4620      	mov	r0, r4
 8010954:	4629      	mov	r1, r5
 8010956:	f7ef fc99 	bl	800028c <__adddf3>
 801095a:	4b9e      	ldr	r3, [pc, #632]	@ (8010bd4 <atan+0x314>)
 801095c:	2200      	movs	r2, #0
 801095e:	f7ef fc93 	bl	8000288 <__aeabi_dsub>
 8010962:	2200      	movs	r2, #0
 8010964:	4606      	mov	r6, r0
 8010966:	460f      	mov	r7, r1
 8010968:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801096c:	4620      	mov	r0, r4
 801096e:	4629      	mov	r1, r5
 8010970:	f7ef fc8c 	bl	800028c <__adddf3>
 8010974:	4602      	mov	r2, r0
 8010976:	460b      	mov	r3, r1
 8010978:	4630      	mov	r0, r6
 801097a:	4639      	mov	r1, r7
 801097c:	f7ef ff66 	bl	800084c <__aeabi_ddiv>
 8010980:	f04f 0a00 	mov.w	sl, #0
 8010984:	4604      	mov	r4, r0
 8010986:	460d      	mov	r5, r1
 8010988:	4622      	mov	r2, r4
 801098a:	462b      	mov	r3, r5
 801098c:	4620      	mov	r0, r4
 801098e:	4629      	mov	r1, r5
 8010990:	f7ef fe32 	bl	80005f8 <__aeabi_dmul>
 8010994:	4602      	mov	r2, r0
 8010996:	460b      	mov	r3, r1
 8010998:	4680      	mov	r8, r0
 801099a:	4689      	mov	r9, r1
 801099c:	f7ef fe2c 	bl	80005f8 <__aeabi_dmul>
 80109a0:	a371      	add	r3, pc, #452	@ (adr r3, 8010b68 <atan+0x2a8>)
 80109a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a6:	4606      	mov	r6, r0
 80109a8:	460f      	mov	r7, r1
 80109aa:	f7ef fe25 	bl	80005f8 <__aeabi_dmul>
 80109ae:	a370      	add	r3, pc, #448	@ (adr r3, 8010b70 <atan+0x2b0>)
 80109b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b4:	f7ef fc6a 	bl	800028c <__adddf3>
 80109b8:	4632      	mov	r2, r6
 80109ba:	463b      	mov	r3, r7
 80109bc:	f7ef fe1c 	bl	80005f8 <__aeabi_dmul>
 80109c0:	a36d      	add	r3, pc, #436	@ (adr r3, 8010b78 <atan+0x2b8>)
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	f7ef fc61 	bl	800028c <__adddf3>
 80109ca:	4632      	mov	r2, r6
 80109cc:	463b      	mov	r3, r7
 80109ce:	f7ef fe13 	bl	80005f8 <__aeabi_dmul>
 80109d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010b80 <atan+0x2c0>)
 80109d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d8:	f7ef fc58 	bl	800028c <__adddf3>
 80109dc:	4632      	mov	r2, r6
 80109de:	463b      	mov	r3, r7
 80109e0:	f7ef fe0a 	bl	80005f8 <__aeabi_dmul>
 80109e4:	a368      	add	r3, pc, #416	@ (adr r3, 8010b88 <atan+0x2c8>)
 80109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ea:	f7ef fc4f 	bl	800028c <__adddf3>
 80109ee:	4632      	mov	r2, r6
 80109f0:	463b      	mov	r3, r7
 80109f2:	f7ef fe01 	bl	80005f8 <__aeabi_dmul>
 80109f6:	a366      	add	r3, pc, #408	@ (adr r3, 8010b90 <atan+0x2d0>)
 80109f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fc:	f7ef fc46 	bl	800028c <__adddf3>
 8010a00:	4642      	mov	r2, r8
 8010a02:	464b      	mov	r3, r9
 8010a04:	f7ef fdf8 	bl	80005f8 <__aeabi_dmul>
 8010a08:	a363      	add	r3, pc, #396	@ (adr r3, 8010b98 <atan+0x2d8>)
 8010a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0e:	4680      	mov	r8, r0
 8010a10:	4689      	mov	r9, r1
 8010a12:	4630      	mov	r0, r6
 8010a14:	4639      	mov	r1, r7
 8010a16:	f7ef fdef 	bl	80005f8 <__aeabi_dmul>
 8010a1a:	a361      	add	r3, pc, #388	@ (adr r3, 8010ba0 <atan+0x2e0>)
 8010a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a20:	f7ef fc32 	bl	8000288 <__aeabi_dsub>
 8010a24:	4632      	mov	r2, r6
 8010a26:	463b      	mov	r3, r7
 8010a28:	f7ef fde6 	bl	80005f8 <__aeabi_dmul>
 8010a2c:	a35e      	add	r3, pc, #376	@ (adr r3, 8010ba8 <atan+0x2e8>)
 8010a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a32:	f7ef fc29 	bl	8000288 <__aeabi_dsub>
 8010a36:	4632      	mov	r2, r6
 8010a38:	463b      	mov	r3, r7
 8010a3a:	f7ef fddd 	bl	80005f8 <__aeabi_dmul>
 8010a3e:	a35c      	add	r3, pc, #368	@ (adr r3, 8010bb0 <atan+0x2f0>)
 8010a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a44:	f7ef fc20 	bl	8000288 <__aeabi_dsub>
 8010a48:	4632      	mov	r2, r6
 8010a4a:	463b      	mov	r3, r7
 8010a4c:	f7ef fdd4 	bl	80005f8 <__aeabi_dmul>
 8010a50:	a359      	add	r3, pc, #356	@ (adr r3, 8010bb8 <atan+0x2f8>)
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	f7ef fc17 	bl	8000288 <__aeabi_dsub>
 8010a5a:	4632      	mov	r2, r6
 8010a5c:	463b      	mov	r3, r7
 8010a5e:	f7ef fdcb 	bl	80005f8 <__aeabi_dmul>
 8010a62:	4602      	mov	r2, r0
 8010a64:	460b      	mov	r3, r1
 8010a66:	4640      	mov	r0, r8
 8010a68:	4649      	mov	r1, r9
 8010a6a:	f7ef fc0f 	bl	800028c <__adddf3>
 8010a6e:	4622      	mov	r2, r4
 8010a70:	462b      	mov	r3, r5
 8010a72:	f7ef fdc1 	bl	80005f8 <__aeabi_dmul>
 8010a76:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	d148      	bne.n	8010b12 <atan+0x252>
 8010a80:	4620      	mov	r0, r4
 8010a82:	4629      	mov	r1, r5
 8010a84:	f7ef fc00 	bl	8000288 <__aeabi_dsub>
 8010a88:	e72f      	b.n	80108ea <atan+0x2a>
 8010a8a:	4b52      	ldr	r3, [pc, #328]	@ (8010bd4 <atan+0x314>)
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	4620      	mov	r0, r4
 8010a90:	4629      	mov	r1, r5
 8010a92:	f7ef fbf9 	bl	8000288 <__aeabi_dsub>
 8010a96:	4b4f      	ldr	r3, [pc, #316]	@ (8010bd4 <atan+0x314>)
 8010a98:	4606      	mov	r6, r0
 8010a9a:	460f      	mov	r7, r1
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	f7ef fbf3 	bl	800028c <__adddf3>
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	4630      	mov	r0, r6
 8010aac:	4639      	mov	r1, r7
 8010aae:	f7ef fecd 	bl	800084c <__aeabi_ddiv>
 8010ab2:	f04f 0a01 	mov.w	sl, #1
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	460d      	mov	r5, r1
 8010aba:	e765      	b.n	8010988 <atan+0xc8>
 8010abc:	4b47      	ldr	r3, [pc, #284]	@ (8010bdc <atan+0x31c>)
 8010abe:	429e      	cmp	r6, r3
 8010ac0:	d21c      	bcs.n	8010afc <atan+0x23c>
 8010ac2:	4b47      	ldr	r3, [pc, #284]	@ (8010be0 <atan+0x320>)
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	4629      	mov	r1, r5
 8010aca:	f7ef fbdd 	bl	8000288 <__aeabi_dsub>
 8010ace:	4b44      	ldr	r3, [pc, #272]	@ (8010be0 <atan+0x320>)
 8010ad0:	4606      	mov	r6, r0
 8010ad2:	460f      	mov	r7, r1
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	4629      	mov	r1, r5
 8010ada:	f7ef fd8d 	bl	80005f8 <__aeabi_dmul>
 8010ade:	4b3d      	ldr	r3, [pc, #244]	@ (8010bd4 <atan+0x314>)
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f7ef fbd3 	bl	800028c <__adddf3>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	4630      	mov	r0, r6
 8010aec:	4639      	mov	r1, r7
 8010aee:	f7ef fead 	bl	800084c <__aeabi_ddiv>
 8010af2:	f04f 0a02 	mov.w	sl, #2
 8010af6:	4604      	mov	r4, r0
 8010af8:	460d      	mov	r5, r1
 8010afa:	e745      	b.n	8010988 <atan+0xc8>
 8010afc:	4622      	mov	r2, r4
 8010afe:	462b      	mov	r3, r5
 8010b00:	4938      	ldr	r1, [pc, #224]	@ (8010be4 <atan+0x324>)
 8010b02:	2000      	movs	r0, #0
 8010b04:	f7ef fea2 	bl	800084c <__aeabi_ddiv>
 8010b08:	f04f 0a03 	mov.w	sl, #3
 8010b0c:	4604      	mov	r4, r0
 8010b0e:	460d      	mov	r5, r1
 8010b10:	e73a      	b.n	8010988 <atan+0xc8>
 8010b12:	4b35      	ldr	r3, [pc, #212]	@ (8010be8 <atan+0x328>)
 8010b14:	4e35      	ldr	r6, [pc, #212]	@ (8010bec <atan+0x32c>)
 8010b16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1e:	f7ef fbb3 	bl	8000288 <__aeabi_dsub>
 8010b22:	4622      	mov	r2, r4
 8010b24:	462b      	mov	r3, r5
 8010b26:	f7ef fbaf 	bl	8000288 <__aeabi_dsub>
 8010b2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010b36:	f7ef fba7 	bl	8000288 <__aeabi_dsub>
 8010b3a:	f1bb 0f00 	cmp.w	fp, #0
 8010b3e:	4604      	mov	r4, r0
 8010b40:	460d      	mov	r5, r1
 8010b42:	f6bf aedc 	bge.w	80108fe <atan+0x3e>
 8010b46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010b4a:	461d      	mov	r5, r3
 8010b4c:	e6d7      	b.n	80108fe <atan+0x3e>
 8010b4e:	a51c      	add	r5, pc, #112	@ (adr r5, 8010bc0 <atan+0x300>)
 8010b50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b54:	e6d3      	b.n	80108fe <atan+0x3e>
 8010b56:	bf00      	nop
 8010b58:	54442d18 	.word	0x54442d18
 8010b5c:	3ff921fb 	.word	0x3ff921fb
 8010b60:	8800759c 	.word	0x8800759c
 8010b64:	7e37e43c 	.word	0x7e37e43c
 8010b68:	e322da11 	.word	0xe322da11
 8010b6c:	3f90ad3a 	.word	0x3f90ad3a
 8010b70:	24760deb 	.word	0x24760deb
 8010b74:	3fa97b4b 	.word	0x3fa97b4b
 8010b78:	a0d03d51 	.word	0xa0d03d51
 8010b7c:	3fb10d66 	.word	0x3fb10d66
 8010b80:	c54c206e 	.word	0xc54c206e
 8010b84:	3fb745cd 	.word	0x3fb745cd
 8010b88:	920083ff 	.word	0x920083ff
 8010b8c:	3fc24924 	.word	0x3fc24924
 8010b90:	5555550d 	.word	0x5555550d
 8010b94:	3fd55555 	.word	0x3fd55555
 8010b98:	2c6a6c2f 	.word	0x2c6a6c2f
 8010b9c:	bfa2b444 	.word	0xbfa2b444
 8010ba0:	52defd9a 	.word	0x52defd9a
 8010ba4:	3fadde2d 	.word	0x3fadde2d
 8010ba8:	af749a6d 	.word	0xaf749a6d
 8010bac:	3fb3b0f2 	.word	0x3fb3b0f2
 8010bb0:	fe231671 	.word	0xfe231671
 8010bb4:	3fbc71c6 	.word	0x3fbc71c6
 8010bb8:	9998ebc4 	.word	0x9998ebc4
 8010bbc:	3fc99999 	.word	0x3fc99999
 8010bc0:	54442d18 	.word	0x54442d18
 8010bc4:	bff921fb 	.word	0xbff921fb
 8010bc8:	440fffff 	.word	0x440fffff
 8010bcc:	7ff00000 	.word	0x7ff00000
 8010bd0:	3fdbffff 	.word	0x3fdbffff
 8010bd4:	3ff00000 	.word	0x3ff00000
 8010bd8:	3ff2ffff 	.word	0x3ff2ffff
 8010bdc:	40038000 	.word	0x40038000
 8010be0:	3ff80000 	.word	0x3ff80000
 8010be4:	bff00000 	.word	0xbff00000
 8010be8:	08012258 	.word	0x08012258
 8010bec:	08012278 	.word	0x08012278

08010bf0 <fabs>:
 8010bf0:	ec51 0b10 	vmov	r0, r1, d0
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010bfa:	ec43 2b10 	vmov	d0, r2, r3
 8010bfe:	4770      	bx	lr

08010c00 <__kernel_cosf>:
 8010c00:	ee10 3a10 	vmov	r3, s0
 8010c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c08:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010c0c:	eef0 6a40 	vmov.f32	s13, s0
 8010c10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010c14:	d204      	bcs.n	8010c20 <__kernel_cosf+0x20>
 8010c16:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010c1a:	ee17 2a90 	vmov	r2, s15
 8010c1e:	b342      	cbz	r2, 8010c72 <__kernel_cosf+0x72>
 8010c20:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010c24:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010c90 <__kernel_cosf+0x90>
 8010c28:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010c94 <__kernel_cosf+0x94>
 8010c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8010c98 <__kernel_cosf+0x98>)
 8010c2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010c32:	4293      	cmp	r3, r2
 8010c34:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010c9c <__kernel_cosf+0x9c>
 8010c38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010c3c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010ca0 <__kernel_cosf+0xa0>
 8010c40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010c44:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010ca4 <__kernel_cosf+0xa4>
 8010c48:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010c4c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010ca8 <__kernel_cosf+0xa8>
 8010c50:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010c54:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010c58:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010c5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010c60:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c68:	d804      	bhi.n	8010c74 <__kernel_cosf+0x74>
 8010c6a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010c6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010c72:	4770      	bx	lr
 8010c74:	4a0d      	ldr	r2, [pc, #52]	@ (8010cac <__kernel_cosf+0xac>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	bf9a      	itte	ls
 8010c7a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010c7e:	ee07 3a10 	vmovls	s14, r3
 8010c82:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010c86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c8e:	e7ec      	b.n	8010c6a <__kernel_cosf+0x6a>
 8010c90:	ad47d74e 	.word	0xad47d74e
 8010c94:	310f74f6 	.word	0x310f74f6
 8010c98:	3e999999 	.word	0x3e999999
 8010c9c:	b493f27c 	.word	0xb493f27c
 8010ca0:	37d00d01 	.word	0x37d00d01
 8010ca4:	bab60b61 	.word	0xbab60b61
 8010ca8:	3d2aaaab 	.word	0x3d2aaaab
 8010cac:	3f480000 	.word	0x3f480000

08010cb0 <__kernel_sinf>:
 8010cb0:	ee10 3a10 	vmov	r3, s0
 8010cb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010cb8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010cbc:	d204      	bcs.n	8010cc8 <__kernel_sinf+0x18>
 8010cbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010cc2:	ee17 3a90 	vmov	r3, s15
 8010cc6:	b35b      	cbz	r3, 8010d20 <__kernel_sinf+0x70>
 8010cc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010ccc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010d24 <__kernel_sinf+0x74>
 8010cd0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010d28 <__kernel_sinf+0x78>
 8010cd4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010cd8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010d2c <__kernel_sinf+0x7c>
 8010cdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010ce0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010d30 <__kernel_sinf+0x80>
 8010ce4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010ce8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010d34 <__kernel_sinf+0x84>
 8010cec:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010cf0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010cf4:	b930      	cbnz	r0, 8010d04 <__kernel_sinf+0x54>
 8010cf6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010d38 <__kernel_sinf+0x88>
 8010cfa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010cfe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010d02:	4770      	bx	lr
 8010d04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010d08:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010d0c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010d10:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010d14:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010d3c <__kernel_sinf+0x8c>
 8010d18:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010d1c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	2f2ec9d3 	.word	0x2f2ec9d3
 8010d28:	b2d72f34 	.word	0xb2d72f34
 8010d2c:	3638ef1b 	.word	0x3638ef1b
 8010d30:	b9500d01 	.word	0xb9500d01
 8010d34:	3c088889 	.word	0x3c088889
 8010d38:	be2aaaab 	.word	0xbe2aaaab
 8010d3c:	3e2aaaab 	.word	0x3e2aaaab

08010d40 <__kernel_tanf>:
 8010d40:	b508      	push	{r3, lr}
 8010d42:	ee10 3a10 	vmov	r3, s0
 8010d46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010d4a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8010d4e:	eef0 7a40 	vmov.f32	s15, s0
 8010d52:	d217      	bcs.n	8010d84 <__kernel_tanf+0x44>
 8010d54:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8010d58:	ee17 1a10 	vmov	r1, s14
 8010d5c:	bb41      	cbnz	r1, 8010db0 <__kernel_tanf+0x70>
 8010d5e:	1c43      	adds	r3, r0, #1
 8010d60:	4313      	orrs	r3, r2
 8010d62:	d108      	bne.n	8010d76 <__kernel_tanf+0x36>
 8010d64:	f7ff fa96 	bl	8010294 <fabsf>
 8010d68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010d70:	eeb0 0a67 	vmov.f32	s0, s15
 8010d74:	bd08      	pop	{r3, pc}
 8010d76:	2801      	cmp	r0, #1
 8010d78:	d0fa      	beq.n	8010d70 <__kernel_tanf+0x30>
 8010d7a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010d7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010d82:	e7f5      	b.n	8010d70 <__kernel_tanf+0x30>
 8010d84:	494c      	ldr	r1, [pc, #304]	@ (8010eb8 <__kernel_tanf+0x178>)
 8010d86:	428a      	cmp	r2, r1
 8010d88:	d312      	bcc.n	8010db0 <__kernel_tanf+0x70>
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8010ebc <__kernel_tanf+0x17c>
 8010d90:	bfb8      	it	lt
 8010d92:	eef1 7a40 	vneglt.f32	s15, s0
 8010d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010d9a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010ec0 <__kernel_tanf+0x180>
 8010d9e:	bfb8      	it	lt
 8010da0:	eef1 0a60 	vneglt.f32	s1, s1
 8010da4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010da8:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8010ec4 <__kernel_tanf+0x184>
 8010dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010db0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010db4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010ec8 <__kernel_tanf+0x188>
 8010db8:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8010ecc <__kernel_tanf+0x18c>
 8010dbc:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8010ed0 <__kernel_tanf+0x190>
 8010dc0:	493d      	ldr	r1, [pc, #244]	@ (8010eb8 <__kernel_tanf+0x178>)
 8010dc2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010dc6:	428a      	cmp	r2, r1
 8010dc8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010dcc:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8010ed4 <__kernel_tanf+0x194>
 8010dd0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010dd4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8010ed8 <__kernel_tanf+0x198>
 8010dd8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010ddc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010edc <__kernel_tanf+0x19c>
 8010de0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010de4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8010ee0 <__kernel_tanf+0x1a0>
 8010de8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010dec:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8010ee4 <__kernel_tanf+0x1a4>
 8010df0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8010df4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8010ee8 <__kernel_tanf+0x1a8>
 8010df8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010dfc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010eec <__kernel_tanf+0x1ac>
 8010e00:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010e04:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8010ef0 <__kernel_tanf+0x1b0>
 8010e08:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010e0c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8010ef4 <__kernel_tanf+0x1b4>
 8010e10:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010e14:	eeb0 7a46 	vmov.f32	s14, s12
 8010e18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010e1c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8010e20:	eeb0 6a60 	vmov.f32	s12, s1
 8010e24:	eea7 6a05 	vfma.f32	s12, s14, s10
 8010e28:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8010ef8 <__kernel_tanf+0x1b8>
 8010e2c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8010e30:	eee5 0a07 	vfma.f32	s1, s10, s14
 8010e34:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8010e38:	d31d      	bcc.n	8010e76 <__kernel_tanf+0x136>
 8010e3a:	ee07 0a10 	vmov	s14, r0
 8010e3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e42:	ee26 5a06 	vmul.f32	s10, s12, s12
 8010e46:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010e4a:	179b      	asrs	r3, r3, #30
 8010e4c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8010e50:	f003 0302 	and.w	r3, r3, #2
 8010e54:	f1c3 0301 	rsb	r3, r3, #1
 8010e58:	ee06 3a90 	vmov	s13, r3
 8010e5c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8010e60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010e64:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010e68:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010e6c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8010e70:	ee66 7a87 	vmul.f32	s15, s13, s14
 8010e74:	e77c      	b.n	8010d70 <__kernel_tanf+0x30>
 8010e76:	2801      	cmp	r0, #1
 8010e78:	d01b      	beq.n	8010eb2 <__kernel_tanf+0x172>
 8010e7a:	4b20      	ldr	r3, [pc, #128]	@ (8010efc <__kernel_tanf+0x1bc>)
 8010e7c:	ee16 2a10 	vmov	r2, s12
 8010e80:	401a      	ands	r2, r3
 8010e82:	ee05 2a90 	vmov	s11, r2
 8010e86:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010e8e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010e92:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8010e96:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8010e9a:	ee16 2a90 	vmov	r2, s13
 8010e9e:	4013      	ands	r3, r2
 8010ea0:	ee07 3a90 	vmov	s15, r3
 8010ea4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010ea8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8010eac:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010eb0:	e75e      	b.n	8010d70 <__kernel_tanf+0x30>
 8010eb2:	eef0 7a46 	vmov.f32	s15, s12
 8010eb6:	e75b      	b.n	8010d70 <__kernel_tanf+0x30>
 8010eb8:	3f2ca140 	.word	0x3f2ca140
 8010ebc:	3f490fda 	.word	0x3f490fda
 8010ec0:	33222168 	.word	0x33222168
 8010ec4:	00000000 	.word	0x00000000
 8010ec8:	b79bae5f 	.word	0xb79bae5f
 8010ecc:	38a3f445 	.word	0x38a3f445
 8010ed0:	37d95384 	.word	0x37d95384
 8010ed4:	3a1a26c8 	.word	0x3a1a26c8
 8010ed8:	3b6b6916 	.word	0x3b6b6916
 8010edc:	3cb327a4 	.word	0x3cb327a4
 8010ee0:	3e088889 	.word	0x3e088889
 8010ee4:	3895c07a 	.word	0x3895c07a
 8010ee8:	398137b9 	.word	0x398137b9
 8010eec:	3abede48 	.word	0x3abede48
 8010ef0:	3c11371f 	.word	0x3c11371f
 8010ef4:	3d5d0dd1 	.word	0x3d5d0dd1
 8010ef8:	3eaaaaab 	.word	0x3eaaaaab
 8010efc:	fffff000 	.word	0xfffff000

08010f00 <__ieee754_asinf>:
 8010f00:	b538      	push	{r3, r4, r5, lr}
 8010f02:	ee10 5a10 	vmov	r5, s0
 8010f06:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010f0a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8010f0e:	ed2d 8b04 	vpush	{d8-d9}
 8010f12:	d10c      	bne.n	8010f2e <__ieee754_asinf+0x2e>
 8010f14:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801108c <__ieee754_asinf+0x18c>
 8010f18:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011090 <__ieee754_asinf+0x190>
 8010f1c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010f20:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010f24:	eeb0 0a67 	vmov.f32	s0, s15
 8010f28:	ecbd 8b04 	vpop	{d8-d9}
 8010f2c:	bd38      	pop	{r3, r4, r5, pc}
 8010f2e:	d904      	bls.n	8010f3a <__ieee754_asinf+0x3a>
 8010f30:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010f34:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010f38:	e7f6      	b.n	8010f28 <__ieee754_asinf+0x28>
 8010f3a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010f3e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010f42:	d20b      	bcs.n	8010f5c <__ieee754_asinf+0x5c>
 8010f44:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010f48:	d252      	bcs.n	8010ff0 <__ieee754_asinf+0xf0>
 8010f4a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011094 <__ieee754_asinf+0x194>
 8010f4e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010f52:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5a:	dce5      	bgt.n	8010f28 <__ieee754_asinf+0x28>
 8010f5c:	f7ff f99a 	bl	8010294 <fabsf>
 8010f60:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8010f64:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f68:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010f6c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011098 <__ieee754_asinf+0x198>
 8010f70:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801109c <__ieee754_asinf+0x19c>
 8010f74:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80110a0 <__ieee754_asinf+0x1a0>
 8010f78:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010f7c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80110a4 <__ieee754_asinf+0x1a4>
 8010f80:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010f84:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80110a8 <__ieee754_asinf+0x1a8>
 8010f88:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010f8c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80110ac <__ieee754_asinf+0x1ac>
 8010f90:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010f94:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80110b0 <__ieee754_asinf+0x1b0>
 8010f98:	eea7 9a88 	vfma.f32	s18, s15, s16
 8010f9c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80110b4 <__ieee754_asinf+0x1b4>
 8010fa0:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010fa4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80110b8 <__ieee754_asinf+0x1b8>
 8010fa8:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010fac:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80110bc <__ieee754_asinf+0x1bc>
 8010fb0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8010fb8:	eee7 8a88 	vfma.f32	s17, s15, s16
 8010fbc:	f000 fb2a 	bl	8011614 <__ieee754_sqrtf>
 8010fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80110c0 <__ieee754_asinf+0x1c0>)
 8010fc2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010fc6:	429c      	cmp	r4, r3
 8010fc8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8010fcc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010fd0:	d93d      	bls.n	801104e <__ieee754_asinf+0x14e>
 8010fd2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010fd6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80110c4 <__ieee754_asinf+0x1c4>
 8010fda:	eee0 7a26 	vfma.f32	s15, s0, s13
 8010fde:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011090 <__ieee754_asinf+0x190>
 8010fe2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010fe6:	2d00      	cmp	r5, #0
 8010fe8:	bfd8      	it	le
 8010fea:	eeb1 0a40 	vnegle.f32	s0, s0
 8010fee:	e79b      	b.n	8010f28 <__ieee754_asinf+0x28>
 8010ff0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010ff4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801109c <__ieee754_asinf+0x19c>
 8010ff8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011098 <__ieee754_asinf+0x198>
 8010ffc:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80110b0 <__ieee754_asinf+0x1b0>
 8011000:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011004:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80110a4 <__ieee754_asinf+0x1a4>
 8011008:	eee7 6a27 	vfma.f32	s13, s14, s15
 801100c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80110a8 <__ieee754_asinf+0x1a8>
 8011010:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011014:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80110ac <__ieee754_asinf+0x1ac>
 8011018:	eee7 6a27 	vfma.f32	s13, s14, s15
 801101c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80110a0 <__ieee754_asinf+0x1a0>
 8011020:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011024:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80110b4 <__ieee754_asinf+0x1b4>
 8011028:	eee7 6a86 	vfma.f32	s13, s15, s12
 801102c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80110b8 <__ieee754_asinf+0x1b8>
 8011030:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011034:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80110bc <__ieee754_asinf+0x1bc>
 8011038:	eee6 6a27 	vfma.f32	s13, s12, s15
 801103c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011040:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011044:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011048:	eea0 0a27 	vfma.f32	s0, s0, s15
 801104c:	e76c      	b.n	8010f28 <__ieee754_asinf+0x28>
 801104e:	ee10 3a10 	vmov	r3, s0
 8011052:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011056:	f023 030f 	bic.w	r3, r3, #15
 801105a:	ee07 3a10 	vmov	s14, r3
 801105e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011062:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011066:	ee30 0a07 	vadd.f32	s0, s0, s14
 801106a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801108c <__ieee754_asinf+0x18c>
 801106e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011072:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80110c8 <__ieee754_asinf+0x1c8>
 8011076:	eee5 7a66 	vfms.f32	s15, s10, s13
 801107a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801107e:	eeb0 6a40 	vmov.f32	s12, s0
 8011082:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011086:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801108a:	e7aa      	b.n	8010fe2 <__ieee754_asinf+0xe2>
 801108c:	b33bbd2e 	.word	0xb33bbd2e
 8011090:	3fc90fdb 	.word	0x3fc90fdb
 8011094:	7149f2ca 	.word	0x7149f2ca
 8011098:	3a4f7f04 	.word	0x3a4f7f04
 801109c:	3811ef08 	.word	0x3811ef08
 80110a0:	3e2aaaab 	.word	0x3e2aaaab
 80110a4:	bd241146 	.word	0xbd241146
 80110a8:	3e4e0aa8 	.word	0x3e4e0aa8
 80110ac:	bea6b090 	.word	0xbea6b090
 80110b0:	3d9dc62e 	.word	0x3d9dc62e
 80110b4:	bf303361 	.word	0xbf303361
 80110b8:	4001572d 	.word	0x4001572d
 80110bc:	c019d139 	.word	0xc019d139
 80110c0:	3f799999 	.word	0x3f799999
 80110c4:	333bbd2e 	.word	0x333bbd2e
 80110c8:	3f490fdb 	.word	0x3f490fdb

080110cc <__ieee754_atan2f>:
 80110cc:	ee10 2a90 	vmov	r2, s1
 80110d0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80110d4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80110d8:	b510      	push	{r4, lr}
 80110da:	eef0 7a40 	vmov.f32	s15, s0
 80110de:	d806      	bhi.n	80110ee <__ieee754_atan2f+0x22>
 80110e0:	ee10 0a10 	vmov	r0, s0
 80110e4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80110e8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80110ec:	d904      	bls.n	80110f8 <__ieee754_atan2f+0x2c>
 80110ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80110f2:	eeb0 0a67 	vmov.f32	s0, s15
 80110f6:	bd10      	pop	{r4, pc}
 80110f8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80110fc:	d103      	bne.n	8011106 <__ieee754_atan2f+0x3a>
 80110fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011102:	f000 b9b3 	b.w	801146c <atanf>
 8011106:	1794      	asrs	r4, r2, #30
 8011108:	f004 0402 	and.w	r4, r4, #2
 801110c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011110:	b943      	cbnz	r3, 8011124 <__ieee754_atan2f+0x58>
 8011112:	2c02      	cmp	r4, #2
 8011114:	d05e      	beq.n	80111d4 <__ieee754_atan2f+0x108>
 8011116:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80111e8 <__ieee754_atan2f+0x11c>
 801111a:	2c03      	cmp	r4, #3
 801111c:	bf08      	it	eq
 801111e:	eef0 7a47 	vmoveq.f32	s15, s14
 8011122:	e7e6      	b.n	80110f2 <__ieee754_atan2f+0x26>
 8011124:	b941      	cbnz	r1, 8011138 <__ieee754_atan2f+0x6c>
 8011126:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80111ec <__ieee754_atan2f+0x120>
 801112a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80111f0 <__ieee754_atan2f+0x124>
 801112e:	2800      	cmp	r0, #0
 8011130:	bfb8      	it	lt
 8011132:	eef0 7a47 	vmovlt.f32	s15, s14
 8011136:	e7dc      	b.n	80110f2 <__ieee754_atan2f+0x26>
 8011138:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801113c:	d110      	bne.n	8011160 <__ieee754_atan2f+0x94>
 801113e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011142:	f104 34ff 	add.w	r4, r4, #4294967295
 8011146:	d107      	bne.n	8011158 <__ieee754_atan2f+0x8c>
 8011148:	2c02      	cmp	r4, #2
 801114a:	d846      	bhi.n	80111da <__ieee754_atan2f+0x10e>
 801114c:	4b29      	ldr	r3, [pc, #164]	@ (80111f4 <__ieee754_atan2f+0x128>)
 801114e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011152:	edd3 7a00 	vldr	s15, [r3]
 8011156:	e7cc      	b.n	80110f2 <__ieee754_atan2f+0x26>
 8011158:	2c02      	cmp	r4, #2
 801115a:	d841      	bhi.n	80111e0 <__ieee754_atan2f+0x114>
 801115c:	4b26      	ldr	r3, [pc, #152]	@ (80111f8 <__ieee754_atan2f+0x12c>)
 801115e:	e7f6      	b.n	801114e <__ieee754_atan2f+0x82>
 8011160:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011164:	d0df      	beq.n	8011126 <__ieee754_atan2f+0x5a>
 8011166:	1a5b      	subs	r3, r3, r1
 8011168:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801116c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011170:	da1a      	bge.n	80111a8 <__ieee754_atan2f+0xdc>
 8011172:	2a00      	cmp	r2, #0
 8011174:	da01      	bge.n	801117a <__ieee754_atan2f+0xae>
 8011176:	313c      	adds	r1, #60	@ 0x3c
 8011178:	db19      	blt.n	80111ae <__ieee754_atan2f+0xe2>
 801117a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801117e:	f7ff f889 	bl	8010294 <fabsf>
 8011182:	f000 f973 	bl	801146c <atanf>
 8011186:	eef0 7a40 	vmov.f32	s15, s0
 801118a:	2c01      	cmp	r4, #1
 801118c:	d012      	beq.n	80111b4 <__ieee754_atan2f+0xe8>
 801118e:	2c02      	cmp	r4, #2
 8011190:	d017      	beq.n	80111c2 <__ieee754_atan2f+0xf6>
 8011192:	2c00      	cmp	r4, #0
 8011194:	d0ad      	beq.n	80110f2 <__ieee754_atan2f+0x26>
 8011196:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80111fc <__ieee754_atan2f+0x130>
 801119a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801119e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011200 <__ieee754_atan2f+0x134>
 80111a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111a6:	e7a4      	b.n	80110f2 <__ieee754_atan2f+0x26>
 80111a8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80111ec <__ieee754_atan2f+0x120>
 80111ac:	e7ed      	b.n	801118a <__ieee754_atan2f+0xbe>
 80111ae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011204 <__ieee754_atan2f+0x138>
 80111b2:	e7ea      	b.n	801118a <__ieee754_atan2f+0xbe>
 80111b4:	ee17 3a90 	vmov	r3, s15
 80111b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80111bc:	ee07 3a90 	vmov	s15, r3
 80111c0:	e797      	b.n	80110f2 <__ieee754_atan2f+0x26>
 80111c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80111fc <__ieee754_atan2f+0x130>
 80111c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011200 <__ieee754_atan2f+0x134>
 80111ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111d2:	e78e      	b.n	80110f2 <__ieee754_atan2f+0x26>
 80111d4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011200 <__ieee754_atan2f+0x134>
 80111d8:	e78b      	b.n	80110f2 <__ieee754_atan2f+0x26>
 80111da:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011208 <__ieee754_atan2f+0x13c>
 80111de:	e788      	b.n	80110f2 <__ieee754_atan2f+0x26>
 80111e0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011204 <__ieee754_atan2f+0x138>
 80111e4:	e785      	b.n	80110f2 <__ieee754_atan2f+0x26>
 80111e6:	bf00      	nop
 80111e8:	c0490fdb 	.word	0xc0490fdb
 80111ec:	3fc90fdb 	.word	0x3fc90fdb
 80111f0:	bfc90fdb 	.word	0xbfc90fdb
 80111f4:	080122a4 	.word	0x080122a4
 80111f8:	08012298 	.word	0x08012298
 80111fc:	33bbbd2e 	.word	0x33bbbd2e
 8011200:	40490fdb 	.word	0x40490fdb
 8011204:	00000000 	.word	0x00000000
 8011208:	3f490fdb 	.word	0x3f490fdb

0801120c <__ieee754_rem_pio2f>:
 801120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801120e:	ee10 6a10 	vmov	r6, s0
 8011212:	4b88      	ldr	r3, [pc, #544]	@ (8011434 <__ieee754_rem_pio2f+0x228>)
 8011214:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011218:	429d      	cmp	r5, r3
 801121a:	b087      	sub	sp, #28
 801121c:	4604      	mov	r4, r0
 801121e:	d805      	bhi.n	801122c <__ieee754_rem_pio2f+0x20>
 8011220:	2300      	movs	r3, #0
 8011222:	ed80 0a00 	vstr	s0, [r0]
 8011226:	6043      	str	r3, [r0, #4]
 8011228:	2000      	movs	r0, #0
 801122a:	e022      	b.n	8011272 <__ieee754_rem_pio2f+0x66>
 801122c:	4b82      	ldr	r3, [pc, #520]	@ (8011438 <__ieee754_rem_pio2f+0x22c>)
 801122e:	429d      	cmp	r5, r3
 8011230:	d83a      	bhi.n	80112a8 <__ieee754_rem_pio2f+0x9c>
 8011232:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011236:	2e00      	cmp	r6, #0
 8011238:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801143c <__ieee754_rem_pio2f+0x230>
 801123c:	4a80      	ldr	r2, [pc, #512]	@ (8011440 <__ieee754_rem_pio2f+0x234>)
 801123e:	f023 030f 	bic.w	r3, r3, #15
 8011242:	dd18      	ble.n	8011276 <__ieee754_rem_pio2f+0x6a>
 8011244:	4293      	cmp	r3, r2
 8011246:	ee70 7a47 	vsub.f32	s15, s0, s14
 801124a:	bf09      	itett	eq
 801124c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011444 <__ieee754_rem_pio2f+0x238>
 8011250:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011448 <__ieee754_rem_pio2f+0x23c>
 8011254:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801144c <__ieee754_rem_pio2f+0x240>
 8011258:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801125c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011264:	ed80 7a00 	vstr	s14, [r0]
 8011268:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801126c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011270:	2001      	movs	r0, #1
 8011272:	b007      	add	sp, #28
 8011274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011276:	4293      	cmp	r3, r2
 8011278:	ee70 7a07 	vadd.f32	s15, s0, s14
 801127c:	bf09      	itett	eq
 801127e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011444 <__ieee754_rem_pio2f+0x238>
 8011282:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011448 <__ieee754_rem_pio2f+0x23c>
 8011286:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801144c <__ieee754_rem_pio2f+0x240>
 801128a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801128e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011296:	ed80 7a00 	vstr	s14, [r0]
 801129a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801129e:	edc0 7a01 	vstr	s15, [r0, #4]
 80112a2:	f04f 30ff 	mov.w	r0, #4294967295
 80112a6:	e7e4      	b.n	8011272 <__ieee754_rem_pio2f+0x66>
 80112a8:	4b69      	ldr	r3, [pc, #420]	@ (8011450 <__ieee754_rem_pio2f+0x244>)
 80112aa:	429d      	cmp	r5, r3
 80112ac:	d873      	bhi.n	8011396 <__ieee754_rem_pio2f+0x18a>
 80112ae:	f7fe fff1 	bl	8010294 <fabsf>
 80112b2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011454 <__ieee754_rem_pio2f+0x248>
 80112b6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80112ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80112be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80112c6:	ee17 0a90 	vmov	r0, s15
 80112ca:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801143c <__ieee754_rem_pio2f+0x230>
 80112ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80112d2:	281f      	cmp	r0, #31
 80112d4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011448 <__ieee754_rem_pio2f+0x23c>
 80112d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112dc:	eeb1 6a47 	vneg.f32	s12, s14
 80112e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80112e4:	ee16 1a90 	vmov	r1, s13
 80112e8:	dc09      	bgt.n	80112fe <__ieee754_rem_pio2f+0xf2>
 80112ea:	4a5b      	ldr	r2, [pc, #364]	@ (8011458 <__ieee754_rem_pio2f+0x24c>)
 80112ec:	1e47      	subs	r7, r0, #1
 80112ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80112f2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80112f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d107      	bne.n	801130e <__ieee754_rem_pio2f+0x102>
 80112fe:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011302:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011306:	2a08      	cmp	r2, #8
 8011308:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801130c:	dc14      	bgt.n	8011338 <__ieee754_rem_pio2f+0x12c>
 801130e:	6021      	str	r1, [r4, #0]
 8011310:	ed94 7a00 	vldr	s14, [r4]
 8011314:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011318:	2e00      	cmp	r6, #0
 801131a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801131e:	ed84 0a01 	vstr	s0, [r4, #4]
 8011322:	daa6      	bge.n	8011272 <__ieee754_rem_pio2f+0x66>
 8011324:	eeb1 7a47 	vneg.f32	s14, s14
 8011328:	eeb1 0a40 	vneg.f32	s0, s0
 801132c:	ed84 7a00 	vstr	s14, [r4]
 8011330:	ed84 0a01 	vstr	s0, [r4, #4]
 8011334:	4240      	negs	r0, r0
 8011336:	e79c      	b.n	8011272 <__ieee754_rem_pio2f+0x66>
 8011338:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011444 <__ieee754_rem_pio2f+0x238>
 801133c:	eef0 6a40 	vmov.f32	s13, s0
 8011340:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011344:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011348:	eee6 7a25 	vfma.f32	s15, s12, s11
 801134c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801144c <__ieee754_rem_pio2f+0x240>
 8011350:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011354:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011358:	ee15 2a90 	vmov	r2, s11
 801135c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011360:	1a5b      	subs	r3, r3, r1
 8011362:	2b19      	cmp	r3, #25
 8011364:	dc04      	bgt.n	8011370 <__ieee754_rem_pio2f+0x164>
 8011366:	edc4 5a00 	vstr	s11, [r4]
 801136a:	eeb0 0a66 	vmov.f32	s0, s13
 801136e:	e7cf      	b.n	8011310 <__ieee754_rem_pio2f+0x104>
 8011370:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801145c <__ieee754_rem_pio2f+0x250>
 8011374:	eeb0 0a66 	vmov.f32	s0, s13
 8011378:	eea6 0a25 	vfma.f32	s0, s12, s11
 801137c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011380:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011460 <__ieee754_rem_pio2f+0x254>
 8011384:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011388:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801138c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011390:	ed84 7a00 	vstr	s14, [r4]
 8011394:	e7bc      	b.n	8011310 <__ieee754_rem_pio2f+0x104>
 8011396:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801139a:	d306      	bcc.n	80113aa <__ieee754_rem_pio2f+0x19e>
 801139c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80113a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80113a4:	edc0 7a00 	vstr	s15, [r0]
 80113a8:	e73e      	b.n	8011228 <__ieee754_rem_pio2f+0x1c>
 80113aa:	15ea      	asrs	r2, r5, #23
 80113ac:	3a86      	subs	r2, #134	@ 0x86
 80113ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80113b2:	ee07 3a90 	vmov	s15, r3
 80113b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80113ba:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011464 <__ieee754_rem_pio2f+0x258>
 80113be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80113c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80113ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80113ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80113d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80113d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113da:	ed8d 7a04 	vstr	s14, [sp, #16]
 80113de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80113e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80113e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ea:	edcd 7a05 	vstr	s15, [sp, #20]
 80113ee:	d11e      	bne.n	801142e <__ieee754_rem_pio2f+0x222>
 80113f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80113f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f8:	bf0c      	ite	eq
 80113fa:	2301      	moveq	r3, #1
 80113fc:	2302      	movne	r3, #2
 80113fe:	491a      	ldr	r1, [pc, #104]	@ (8011468 <__ieee754_rem_pio2f+0x25c>)
 8011400:	9101      	str	r1, [sp, #4]
 8011402:	2102      	movs	r1, #2
 8011404:	9100      	str	r1, [sp, #0]
 8011406:	a803      	add	r0, sp, #12
 8011408:	4621      	mov	r1, r4
 801140a:	f000 f907 	bl	801161c <__kernel_rem_pio2f>
 801140e:	2e00      	cmp	r6, #0
 8011410:	f6bf af2f 	bge.w	8011272 <__ieee754_rem_pio2f+0x66>
 8011414:	edd4 7a00 	vldr	s15, [r4]
 8011418:	eef1 7a67 	vneg.f32	s15, s15
 801141c:	edc4 7a00 	vstr	s15, [r4]
 8011420:	edd4 7a01 	vldr	s15, [r4, #4]
 8011424:	eef1 7a67 	vneg.f32	s15, s15
 8011428:	edc4 7a01 	vstr	s15, [r4, #4]
 801142c:	e782      	b.n	8011334 <__ieee754_rem_pio2f+0x128>
 801142e:	2303      	movs	r3, #3
 8011430:	e7e5      	b.n	80113fe <__ieee754_rem_pio2f+0x1f2>
 8011432:	bf00      	nop
 8011434:	3f490fd8 	.word	0x3f490fd8
 8011438:	4016cbe3 	.word	0x4016cbe3
 801143c:	3fc90f80 	.word	0x3fc90f80
 8011440:	3fc90fd0 	.word	0x3fc90fd0
 8011444:	37354400 	.word	0x37354400
 8011448:	37354443 	.word	0x37354443
 801144c:	2e85a308 	.word	0x2e85a308
 8011450:	43490f80 	.word	0x43490f80
 8011454:	3f22f984 	.word	0x3f22f984
 8011458:	080122b0 	.word	0x080122b0
 801145c:	2e85a300 	.word	0x2e85a300
 8011460:	248d3132 	.word	0x248d3132
 8011464:	43800000 	.word	0x43800000
 8011468:	08012330 	.word	0x08012330

0801146c <atanf>:
 801146c:	b538      	push	{r3, r4, r5, lr}
 801146e:	ee10 5a10 	vmov	r5, s0
 8011472:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011476:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801147a:	eef0 7a40 	vmov.f32	s15, s0
 801147e:	d310      	bcc.n	80114a2 <atanf+0x36>
 8011480:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011484:	d904      	bls.n	8011490 <atanf+0x24>
 8011486:	ee70 7a00 	vadd.f32	s15, s0, s0
 801148a:	eeb0 0a67 	vmov.f32	s0, s15
 801148e:	bd38      	pop	{r3, r4, r5, pc}
 8011490:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80115c8 <atanf+0x15c>
 8011494:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80115cc <atanf+0x160>
 8011498:	2d00      	cmp	r5, #0
 801149a:	bfc8      	it	gt
 801149c:	eef0 7a47 	vmovgt.f32	s15, s14
 80114a0:	e7f3      	b.n	801148a <atanf+0x1e>
 80114a2:	4b4b      	ldr	r3, [pc, #300]	@ (80115d0 <atanf+0x164>)
 80114a4:	429c      	cmp	r4, r3
 80114a6:	d810      	bhi.n	80114ca <atanf+0x5e>
 80114a8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80114ac:	d20a      	bcs.n	80114c4 <atanf+0x58>
 80114ae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80115d4 <atanf+0x168>
 80114b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80114b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80114ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80114be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c2:	dce2      	bgt.n	801148a <atanf+0x1e>
 80114c4:	f04f 33ff 	mov.w	r3, #4294967295
 80114c8:	e013      	b.n	80114f2 <atanf+0x86>
 80114ca:	f7fe fee3 	bl	8010294 <fabsf>
 80114ce:	4b42      	ldr	r3, [pc, #264]	@ (80115d8 <atanf+0x16c>)
 80114d0:	429c      	cmp	r4, r3
 80114d2:	d84f      	bhi.n	8011574 <atanf+0x108>
 80114d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80114d8:	429c      	cmp	r4, r3
 80114da:	d841      	bhi.n	8011560 <atanf+0xf4>
 80114dc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80114e0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80114e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80114e8:	2300      	movs	r3, #0
 80114ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80114ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80114f2:	1c5a      	adds	r2, r3, #1
 80114f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80114f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80115dc <atanf+0x170>
 80114fc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80115e0 <atanf+0x174>
 8011500:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80115e4 <atanf+0x178>
 8011504:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011508:	eee6 5a87 	vfma.f32	s11, s13, s14
 801150c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80115e8 <atanf+0x17c>
 8011510:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011514:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80115ec <atanf+0x180>
 8011518:	eee7 5a26 	vfma.f32	s11, s14, s13
 801151c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80115f0 <atanf+0x184>
 8011520:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011524:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80115f4 <atanf+0x188>
 8011528:	eee7 5a26 	vfma.f32	s11, s14, s13
 801152c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80115f8 <atanf+0x18c>
 8011530:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011534:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80115fc <atanf+0x190>
 8011538:	eea5 7a26 	vfma.f32	s14, s10, s13
 801153c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011600 <atanf+0x194>
 8011540:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011544:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011604 <atanf+0x198>
 8011548:	eea5 7a26 	vfma.f32	s14, s10, s13
 801154c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011550:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011554:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011558:	d121      	bne.n	801159e <atanf+0x132>
 801155a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801155e:	e794      	b.n	801148a <atanf+0x1e>
 8011560:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011564:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011568:	ee30 0a27 	vadd.f32	s0, s0, s15
 801156c:	2301      	movs	r3, #1
 801156e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011572:	e7be      	b.n	80114f2 <atanf+0x86>
 8011574:	4b24      	ldr	r3, [pc, #144]	@ (8011608 <atanf+0x19c>)
 8011576:	429c      	cmp	r4, r3
 8011578:	d80b      	bhi.n	8011592 <atanf+0x126>
 801157a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801157e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011582:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011586:	2302      	movs	r3, #2
 8011588:	ee70 6a67 	vsub.f32	s13, s0, s15
 801158c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011590:	e7af      	b.n	80114f2 <atanf+0x86>
 8011592:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011596:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801159a:	2303      	movs	r3, #3
 801159c:	e7a9      	b.n	80114f2 <atanf+0x86>
 801159e:	4a1b      	ldr	r2, [pc, #108]	@ (801160c <atanf+0x1a0>)
 80115a0:	491b      	ldr	r1, [pc, #108]	@ (8011610 <atanf+0x1a4>)
 80115a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80115a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80115aa:	edd3 6a00 	vldr	s13, [r3]
 80115ae:	ee37 7a66 	vsub.f32	s14, s14, s13
 80115b2:	2d00      	cmp	r5, #0
 80115b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115b8:	edd2 7a00 	vldr	s15, [r2]
 80115bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115c0:	bfb8      	it	lt
 80115c2:	eef1 7a67 	vneglt.f32	s15, s15
 80115c6:	e760      	b.n	801148a <atanf+0x1e>
 80115c8:	bfc90fdb 	.word	0xbfc90fdb
 80115cc:	3fc90fdb 	.word	0x3fc90fdb
 80115d0:	3edfffff 	.word	0x3edfffff
 80115d4:	7149f2ca 	.word	0x7149f2ca
 80115d8:	3f97ffff 	.word	0x3f97ffff
 80115dc:	3c8569d7 	.word	0x3c8569d7
 80115e0:	3d4bda59 	.word	0x3d4bda59
 80115e4:	bd6ef16b 	.word	0xbd6ef16b
 80115e8:	3d886b35 	.word	0x3d886b35
 80115ec:	3dba2e6e 	.word	0x3dba2e6e
 80115f0:	3e124925 	.word	0x3e124925
 80115f4:	3eaaaaab 	.word	0x3eaaaaab
 80115f8:	bd15a221 	.word	0xbd15a221
 80115fc:	bd9d8795 	.word	0xbd9d8795
 8011600:	bde38e38 	.word	0xbde38e38
 8011604:	be4ccccd 	.word	0xbe4ccccd
 8011608:	401bffff 	.word	0x401bffff
 801160c:	08012658 	.word	0x08012658
 8011610:	08012648 	.word	0x08012648

08011614 <__ieee754_sqrtf>:
 8011614:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011618:	4770      	bx	lr
	...

0801161c <__kernel_rem_pio2f>:
 801161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011620:	ed2d 8b04 	vpush	{d8-d9}
 8011624:	b0d9      	sub	sp, #356	@ 0x164
 8011626:	4690      	mov	r8, r2
 8011628:	9001      	str	r0, [sp, #4]
 801162a:	4ab9      	ldr	r2, [pc, #740]	@ (8011910 <__kernel_rem_pio2f+0x2f4>)
 801162c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801162e:	f118 0f04 	cmn.w	r8, #4
 8011632:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8011636:	460f      	mov	r7, r1
 8011638:	f103 3bff 	add.w	fp, r3, #4294967295
 801163c:	db27      	blt.n	801168e <__kernel_rem_pio2f+0x72>
 801163e:	f1b8 0203 	subs.w	r2, r8, #3
 8011642:	bf48      	it	mi
 8011644:	f108 0204 	addmi.w	r2, r8, #4
 8011648:	10d2      	asrs	r2, r2, #3
 801164a:	1c55      	adds	r5, r2, #1
 801164c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801164e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8011920 <__kernel_rem_pio2f+0x304>
 8011652:	00e8      	lsls	r0, r5, #3
 8011654:	eba2 060b 	sub.w	r6, r2, fp
 8011658:	9002      	str	r0, [sp, #8]
 801165a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801165e:	eb0a 0c0b 	add.w	ip, sl, fp
 8011662:	ac1c      	add	r4, sp, #112	@ 0x70
 8011664:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011668:	2000      	movs	r0, #0
 801166a:	4560      	cmp	r0, ip
 801166c:	dd11      	ble.n	8011692 <__kernel_rem_pio2f+0x76>
 801166e:	a91c      	add	r1, sp, #112	@ 0x70
 8011670:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011674:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011678:	f04f 0c00 	mov.w	ip, #0
 801167c:	45d4      	cmp	ip, sl
 801167e:	dc27      	bgt.n	80116d0 <__kernel_rem_pio2f+0xb4>
 8011680:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011684:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8011920 <__kernel_rem_pio2f+0x304>
 8011688:	4606      	mov	r6, r0
 801168a:	2400      	movs	r4, #0
 801168c:	e016      	b.n	80116bc <__kernel_rem_pio2f+0xa0>
 801168e:	2200      	movs	r2, #0
 8011690:	e7db      	b.n	801164a <__kernel_rem_pio2f+0x2e>
 8011692:	42c6      	cmn	r6, r0
 8011694:	bf5d      	ittte	pl
 8011696:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801169a:	ee07 1a90 	vmovpl	s15, r1
 801169e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80116a2:	eef0 7a47 	vmovmi.f32	s15, s14
 80116a6:	ece4 7a01 	vstmia	r4!, {s15}
 80116aa:	3001      	adds	r0, #1
 80116ac:	e7dd      	b.n	801166a <__kernel_rem_pio2f+0x4e>
 80116ae:	ecfe 6a01 	vldmia	lr!, {s13}
 80116b2:	ed96 7a00 	vldr	s14, [r6]
 80116b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80116ba:	3401      	adds	r4, #1
 80116bc:	455c      	cmp	r4, fp
 80116be:	f1a6 0604 	sub.w	r6, r6, #4
 80116c2:	ddf4      	ble.n	80116ae <__kernel_rem_pio2f+0x92>
 80116c4:	ece9 7a01 	vstmia	r9!, {s15}
 80116c8:	f10c 0c01 	add.w	ip, ip, #1
 80116cc:	3004      	adds	r0, #4
 80116ce:	e7d5      	b.n	801167c <__kernel_rem_pio2f+0x60>
 80116d0:	a908      	add	r1, sp, #32
 80116d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116d6:	9104      	str	r1, [sp, #16]
 80116d8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80116da:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801191c <__kernel_rem_pio2f+0x300>
 80116de:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8011918 <__kernel_rem_pio2f+0x2fc>
 80116e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80116e6:	9203      	str	r2, [sp, #12]
 80116e8:	4654      	mov	r4, sl
 80116ea:	00a2      	lsls	r2, r4, #2
 80116ec:	9205      	str	r2, [sp, #20]
 80116ee:	aa58      	add	r2, sp, #352	@ 0x160
 80116f0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80116f4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80116f8:	a944      	add	r1, sp, #272	@ 0x110
 80116fa:	aa08      	add	r2, sp, #32
 80116fc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011700:	4694      	mov	ip, r2
 8011702:	4626      	mov	r6, r4
 8011704:	2e00      	cmp	r6, #0
 8011706:	f1a0 0004 	sub.w	r0, r0, #4
 801170a:	dc4c      	bgt.n	80117a6 <__kernel_rem_pio2f+0x18a>
 801170c:	4628      	mov	r0, r5
 801170e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011712:	f000 f9f5 	bl	8011b00 <scalbnf>
 8011716:	eeb0 8a40 	vmov.f32	s16, s0
 801171a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801171e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011722:	f000 fa53 	bl	8011bcc <floorf>
 8011726:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801172a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801172e:	2d00      	cmp	r5, #0
 8011730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011734:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011738:	ee17 9a90 	vmov	r9, s15
 801173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011740:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011744:	dd41      	ble.n	80117ca <__kernel_rem_pio2f+0x1ae>
 8011746:	f104 3cff 	add.w	ip, r4, #4294967295
 801174a:	a908      	add	r1, sp, #32
 801174c:	f1c5 0e08 	rsb	lr, r5, #8
 8011750:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8011754:	fa46 f00e 	asr.w	r0, r6, lr
 8011758:	4481      	add	r9, r0
 801175a:	fa00 f00e 	lsl.w	r0, r0, lr
 801175e:	1a36      	subs	r6, r6, r0
 8011760:	f1c5 0007 	rsb	r0, r5, #7
 8011764:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8011768:	4106      	asrs	r6, r0
 801176a:	2e00      	cmp	r6, #0
 801176c:	dd3c      	ble.n	80117e8 <__kernel_rem_pio2f+0x1cc>
 801176e:	f04f 0e00 	mov.w	lr, #0
 8011772:	f109 0901 	add.w	r9, r9, #1
 8011776:	4670      	mov	r0, lr
 8011778:	4574      	cmp	r4, lr
 801177a:	dc68      	bgt.n	801184e <__kernel_rem_pio2f+0x232>
 801177c:	2d00      	cmp	r5, #0
 801177e:	dd03      	ble.n	8011788 <__kernel_rem_pio2f+0x16c>
 8011780:	2d01      	cmp	r5, #1
 8011782:	d074      	beq.n	801186e <__kernel_rem_pio2f+0x252>
 8011784:	2d02      	cmp	r5, #2
 8011786:	d07d      	beq.n	8011884 <__kernel_rem_pio2f+0x268>
 8011788:	2e02      	cmp	r6, #2
 801178a:	d12d      	bne.n	80117e8 <__kernel_rem_pio2f+0x1cc>
 801178c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011790:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011794:	b340      	cbz	r0, 80117e8 <__kernel_rem_pio2f+0x1cc>
 8011796:	4628      	mov	r0, r5
 8011798:	9306      	str	r3, [sp, #24]
 801179a:	f000 f9b1 	bl	8011b00 <scalbnf>
 801179e:	9b06      	ldr	r3, [sp, #24]
 80117a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80117a4:	e020      	b.n	80117e8 <__kernel_rem_pio2f+0x1cc>
 80117a6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80117aa:	3e01      	subs	r6, #1
 80117ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117b4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80117b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80117bc:	ecac 0a01 	vstmia	ip!, {s0}
 80117c0:	ed90 0a00 	vldr	s0, [r0]
 80117c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80117c8:	e79c      	b.n	8011704 <__kernel_rem_pio2f+0xe8>
 80117ca:	d105      	bne.n	80117d8 <__kernel_rem_pio2f+0x1bc>
 80117cc:	1e60      	subs	r0, r4, #1
 80117ce:	a908      	add	r1, sp, #32
 80117d0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80117d4:	11f6      	asrs	r6, r6, #7
 80117d6:	e7c8      	b.n	801176a <__kernel_rem_pio2f+0x14e>
 80117d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80117dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e4:	da31      	bge.n	801184a <__kernel_rem_pio2f+0x22e>
 80117e6:	2600      	movs	r6, #0
 80117e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80117ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f0:	f040 8098 	bne.w	8011924 <__kernel_rem_pio2f+0x308>
 80117f4:	1e60      	subs	r0, r4, #1
 80117f6:	2200      	movs	r2, #0
 80117f8:	4550      	cmp	r0, sl
 80117fa:	da4b      	bge.n	8011894 <__kernel_rem_pio2f+0x278>
 80117fc:	2a00      	cmp	r2, #0
 80117fe:	d065      	beq.n	80118cc <__kernel_rem_pio2f+0x2b0>
 8011800:	3c01      	subs	r4, #1
 8011802:	ab08      	add	r3, sp, #32
 8011804:	3d08      	subs	r5, #8
 8011806:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d0f8      	beq.n	8011800 <__kernel_rem_pio2f+0x1e4>
 801180e:	4628      	mov	r0, r5
 8011810:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011814:	f000 f974 	bl	8011b00 <scalbnf>
 8011818:	1c63      	adds	r3, r4, #1
 801181a:	aa44      	add	r2, sp, #272	@ 0x110
 801181c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801191c <__kernel_rem_pio2f+0x300>
 8011820:	0099      	lsls	r1, r3, #2
 8011822:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011826:	4623      	mov	r3, r4
 8011828:	2b00      	cmp	r3, #0
 801182a:	f280 80a9 	bge.w	8011980 <__kernel_rem_pio2f+0x364>
 801182e:	4623      	mov	r3, r4
 8011830:	2b00      	cmp	r3, #0
 8011832:	f2c0 80c7 	blt.w	80119c4 <__kernel_rem_pio2f+0x3a8>
 8011836:	aa44      	add	r2, sp, #272	@ 0x110
 8011838:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801183c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011914 <__kernel_rem_pio2f+0x2f8>
 8011840:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011920 <__kernel_rem_pio2f+0x304>
 8011844:	2000      	movs	r0, #0
 8011846:	1ae2      	subs	r2, r4, r3
 8011848:	e0b1      	b.n	80119ae <__kernel_rem_pio2f+0x392>
 801184a:	2602      	movs	r6, #2
 801184c:	e78f      	b.n	801176e <__kernel_rem_pio2f+0x152>
 801184e:	f852 1b04 	ldr.w	r1, [r2], #4
 8011852:	b948      	cbnz	r0, 8011868 <__kernel_rem_pio2f+0x24c>
 8011854:	b121      	cbz	r1, 8011860 <__kernel_rem_pio2f+0x244>
 8011856:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801185a:	f842 1c04 	str.w	r1, [r2, #-4]
 801185e:	2101      	movs	r1, #1
 8011860:	f10e 0e01 	add.w	lr, lr, #1
 8011864:	4608      	mov	r0, r1
 8011866:	e787      	b.n	8011778 <__kernel_rem_pio2f+0x15c>
 8011868:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801186c:	e7f5      	b.n	801185a <__kernel_rem_pio2f+0x23e>
 801186e:	f104 3cff 	add.w	ip, r4, #4294967295
 8011872:	aa08      	add	r2, sp, #32
 8011874:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011878:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801187c:	a908      	add	r1, sp, #32
 801187e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8011882:	e781      	b.n	8011788 <__kernel_rem_pio2f+0x16c>
 8011884:	f104 3cff 	add.w	ip, r4, #4294967295
 8011888:	aa08      	add	r2, sp, #32
 801188a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801188e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011892:	e7f3      	b.n	801187c <__kernel_rem_pio2f+0x260>
 8011894:	a908      	add	r1, sp, #32
 8011896:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801189a:	3801      	subs	r0, #1
 801189c:	430a      	orrs	r2, r1
 801189e:	e7ab      	b.n	80117f8 <__kernel_rem_pio2f+0x1dc>
 80118a0:	3201      	adds	r2, #1
 80118a2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80118a6:	2e00      	cmp	r6, #0
 80118a8:	d0fa      	beq.n	80118a0 <__kernel_rem_pio2f+0x284>
 80118aa:	9905      	ldr	r1, [sp, #20]
 80118ac:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80118b0:	eb0d 0001 	add.w	r0, sp, r1
 80118b4:	18e6      	adds	r6, r4, r3
 80118b6:	a91c      	add	r1, sp, #112	@ 0x70
 80118b8:	f104 0c01 	add.w	ip, r4, #1
 80118bc:	384c      	subs	r0, #76	@ 0x4c
 80118be:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80118c2:	4422      	add	r2, r4
 80118c4:	4562      	cmp	r2, ip
 80118c6:	da04      	bge.n	80118d2 <__kernel_rem_pio2f+0x2b6>
 80118c8:	4614      	mov	r4, r2
 80118ca:	e70e      	b.n	80116ea <__kernel_rem_pio2f+0xce>
 80118cc:	9804      	ldr	r0, [sp, #16]
 80118ce:	2201      	movs	r2, #1
 80118d0:	e7e7      	b.n	80118a2 <__kernel_rem_pio2f+0x286>
 80118d2:	9903      	ldr	r1, [sp, #12]
 80118d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80118d8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80118dc:	9105      	str	r1, [sp, #20]
 80118de:	ee07 1a90 	vmov	s15, r1
 80118e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118e6:	2400      	movs	r4, #0
 80118e8:	ece6 7a01 	vstmia	r6!, {s15}
 80118ec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011920 <__kernel_rem_pio2f+0x304>
 80118f0:	46b1      	mov	r9, r6
 80118f2:	455c      	cmp	r4, fp
 80118f4:	dd04      	ble.n	8011900 <__kernel_rem_pio2f+0x2e4>
 80118f6:	ece0 7a01 	vstmia	r0!, {s15}
 80118fa:	f10c 0c01 	add.w	ip, ip, #1
 80118fe:	e7e1      	b.n	80118c4 <__kernel_rem_pio2f+0x2a8>
 8011900:	ecfe 6a01 	vldmia	lr!, {s13}
 8011904:	ed39 7a01 	vldmdb	r9!, {s14}
 8011908:	3401      	adds	r4, #1
 801190a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801190e:	e7f0      	b.n	80118f2 <__kernel_rem_pio2f+0x2d6>
 8011910:	08012694 	.word	0x08012694
 8011914:	08012668 	.word	0x08012668
 8011918:	43800000 	.word	0x43800000
 801191c:	3b800000 	.word	0x3b800000
 8011920:	00000000 	.word	0x00000000
 8011924:	9b02      	ldr	r3, [sp, #8]
 8011926:	eeb0 0a48 	vmov.f32	s0, s16
 801192a:	eba3 0008 	sub.w	r0, r3, r8
 801192e:	f000 f8e7 	bl	8011b00 <scalbnf>
 8011932:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011918 <__kernel_rem_pio2f+0x2fc>
 8011936:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193e:	db19      	blt.n	8011974 <__kernel_rem_pio2f+0x358>
 8011940:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801191c <__kernel_rem_pio2f+0x300>
 8011944:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011948:	aa08      	add	r2, sp, #32
 801194a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801194e:	3508      	adds	r5, #8
 8011950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011954:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801195c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011960:	ee10 3a10 	vmov	r3, s0
 8011964:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011968:	ee17 3a90 	vmov	r3, s15
 801196c:	3401      	adds	r4, #1
 801196e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011972:	e74c      	b.n	801180e <__kernel_rem_pio2f+0x1f2>
 8011974:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011978:	aa08      	add	r2, sp, #32
 801197a:	ee10 3a10 	vmov	r3, s0
 801197e:	e7f6      	b.n	801196e <__kernel_rem_pio2f+0x352>
 8011980:	a808      	add	r0, sp, #32
 8011982:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011986:	9001      	str	r0, [sp, #4]
 8011988:	ee07 0a90 	vmov	s15, r0
 801198c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011990:	3b01      	subs	r3, #1
 8011992:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011996:	ee20 0a07 	vmul.f32	s0, s0, s14
 801199a:	ed62 7a01 	vstmdb	r2!, {s15}
 801199e:	e743      	b.n	8011828 <__kernel_rem_pio2f+0x20c>
 80119a0:	ecfc 6a01 	vldmia	ip!, {s13}
 80119a4:	ecb5 7a01 	vldmia	r5!, {s14}
 80119a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80119ac:	3001      	adds	r0, #1
 80119ae:	4550      	cmp	r0, sl
 80119b0:	dc01      	bgt.n	80119b6 <__kernel_rem_pio2f+0x39a>
 80119b2:	4282      	cmp	r2, r0
 80119b4:	daf4      	bge.n	80119a0 <__kernel_rem_pio2f+0x384>
 80119b6:	a858      	add	r0, sp, #352	@ 0x160
 80119b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80119bc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80119c0:	3b01      	subs	r3, #1
 80119c2:	e735      	b.n	8011830 <__kernel_rem_pio2f+0x214>
 80119c4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	dc09      	bgt.n	80119de <__kernel_rem_pio2f+0x3c2>
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	dc2b      	bgt.n	8011a26 <__kernel_rem_pio2f+0x40a>
 80119ce:	d044      	beq.n	8011a5a <__kernel_rem_pio2f+0x43e>
 80119d0:	f009 0007 	and.w	r0, r9, #7
 80119d4:	b059      	add	sp, #356	@ 0x164
 80119d6:	ecbd 8b04 	vpop	{d8-d9}
 80119da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119de:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80119e0:	2b03      	cmp	r3, #3
 80119e2:	d1f5      	bne.n	80119d0 <__kernel_rem_pio2f+0x3b4>
 80119e4:	aa30      	add	r2, sp, #192	@ 0xc0
 80119e6:	1f0b      	subs	r3, r1, #4
 80119e8:	4413      	add	r3, r2
 80119ea:	461a      	mov	r2, r3
 80119ec:	4620      	mov	r0, r4
 80119ee:	2800      	cmp	r0, #0
 80119f0:	f1a2 0204 	sub.w	r2, r2, #4
 80119f4:	dc52      	bgt.n	8011a9c <__kernel_rem_pio2f+0x480>
 80119f6:	4622      	mov	r2, r4
 80119f8:	2a01      	cmp	r2, #1
 80119fa:	f1a3 0304 	sub.w	r3, r3, #4
 80119fe:	dc5d      	bgt.n	8011abc <__kernel_rem_pio2f+0x4a0>
 8011a00:	ab30      	add	r3, sp, #192	@ 0xc0
 8011a02:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8011920 <__kernel_rem_pio2f+0x304>
 8011a06:	440b      	add	r3, r1
 8011a08:	2c01      	cmp	r4, #1
 8011a0a:	dc67      	bgt.n	8011adc <__kernel_rem_pio2f+0x4c0>
 8011a0c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011a10:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011a14:	2e00      	cmp	r6, #0
 8011a16:	d167      	bne.n	8011ae8 <__kernel_rem_pio2f+0x4cc>
 8011a18:	edc7 6a00 	vstr	s13, [r7]
 8011a1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8011a20:	edc7 7a02 	vstr	s15, [r7, #8]
 8011a24:	e7d4      	b.n	80119d0 <__kernel_rem_pio2f+0x3b4>
 8011a26:	ab30      	add	r3, sp, #192	@ 0xc0
 8011a28:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8011920 <__kernel_rem_pio2f+0x304>
 8011a2c:	440b      	add	r3, r1
 8011a2e:	4622      	mov	r2, r4
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	da24      	bge.n	8011a7e <__kernel_rem_pio2f+0x462>
 8011a34:	b34e      	cbz	r6, 8011a8a <__kernel_rem_pio2f+0x46e>
 8011a36:	eef1 7a47 	vneg.f32	s15, s14
 8011a3a:	edc7 7a00 	vstr	s15, [r7]
 8011a3e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011a42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a46:	aa31      	add	r2, sp, #196	@ 0xc4
 8011a48:	2301      	movs	r3, #1
 8011a4a:	429c      	cmp	r4, r3
 8011a4c:	da20      	bge.n	8011a90 <__kernel_rem_pio2f+0x474>
 8011a4e:	b10e      	cbz	r6, 8011a54 <__kernel_rem_pio2f+0x438>
 8011a50:	eef1 7a67 	vneg.f32	s15, s15
 8011a54:	edc7 7a01 	vstr	s15, [r7, #4]
 8011a58:	e7ba      	b.n	80119d0 <__kernel_rem_pio2f+0x3b4>
 8011a5a:	ab30      	add	r3, sp, #192	@ 0xc0
 8011a5c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8011920 <__kernel_rem_pio2f+0x304>
 8011a60:	440b      	add	r3, r1
 8011a62:	2c00      	cmp	r4, #0
 8011a64:	da05      	bge.n	8011a72 <__kernel_rem_pio2f+0x456>
 8011a66:	b10e      	cbz	r6, 8011a6c <__kernel_rem_pio2f+0x450>
 8011a68:	eef1 7a67 	vneg.f32	s15, s15
 8011a6c:	edc7 7a00 	vstr	s15, [r7]
 8011a70:	e7ae      	b.n	80119d0 <__kernel_rem_pio2f+0x3b4>
 8011a72:	ed33 7a01 	vldmdb	r3!, {s14}
 8011a76:	3c01      	subs	r4, #1
 8011a78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a7c:	e7f1      	b.n	8011a62 <__kernel_rem_pio2f+0x446>
 8011a7e:	ed73 7a01 	vldmdb	r3!, {s15}
 8011a82:	3a01      	subs	r2, #1
 8011a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a88:	e7d2      	b.n	8011a30 <__kernel_rem_pio2f+0x414>
 8011a8a:	eef0 7a47 	vmov.f32	s15, s14
 8011a8e:	e7d4      	b.n	8011a3a <__kernel_rem_pio2f+0x41e>
 8011a90:	ecb2 7a01 	vldmia	r2!, {s14}
 8011a94:	3301      	adds	r3, #1
 8011a96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a9a:	e7d6      	b.n	8011a4a <__kernel_rem_pio2f+0x42e>
 8011a9c:	edd2 7a00 	vldr	s15, [r2]
 8011aa0:	edd2 6a01 	vldr	s13, [r2, #4]
 8011aa4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011aa8:	3801      	subs	r0, #1
 8011aaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011aae:	ed82 7a00 	vstr	s14, [r2]
 8011ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ab6:	edc2 7a01 	vstr	s15, [r2, #4]
 8011aba:	e798      	b.n	80119ee <__kernel_rem_pio2f+0x3d2>
 8011abc:	edd3 7a00 	vldr	s15, [r3]
 8011ac0:	edd3 6a01 	vldr	s13, [r3, #4]
 8011ac4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011ac8:	3a01      	subs	r2, #1
 8011aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ace:	ed83 7a00 	vstr	s14, [r3]
 8011ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ad6:	edc3 7a01 	vstr	s15, [r3, #4]
 8011ada:	e78d      	b.n	80119f8 <__kernel_rem_pio2f+0x3dc>
 8011adc:	ed33 7a01 	vldmdb	r3!, {s14}
 8011ae0:	3c01      	subs	r4, #1
 8011ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ae6:	e78f      	b.n	8011a08 <__kernel_rem_pio2f+0x3ec>
 8011ae8:	eef1 6a66 	vneg.f32	s13, s13
 8011aec:	eeb1 7a47 	vneg.f32	s14, s14
 8011af0:	edc7 6a00 	vstr	s13, [r7]
 8011af4:	ed87 7a01 	vstr	s14, [r7, #4]
 8011af8:	eef1 7a67 	vneg.f32	s15, s15
 8011afc:	e790      	b.n	8011a20 <__kernel_rem_pio2f+0x404>
 8011afe:	bf00      	nop

08011b00 <scalbnf>:
 8011b00:	ee10 3a10 	vmov	r3, s0
 8011b04:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011b08:	d02b      	beq.n	8011b62 <scalbnf+0x62>
 8011b0a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011b0e:	d302      	bcc.n	8011b16 <scalbnf+0x16>
 8011b10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b14:	4770      	bx	lr
 8011b16:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011b1a:	d123      	bne.n	8011b64 <scalbnf+0x64>
 8011b1c:	4b24      	ldr	r3, [pc, #144]	@ (8011bb0 <scalbnf+0xb0>)
 8011b1e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011bb4 <scalbnf+0xb4>
 8011b22:	4298      	cmp	r0, r3
 8011b24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011b28:	db17      	blt.n	8011b5a <scalbnf+0x5a>
 8011b2a:	ee10 3a10 	vmov	r3, s0
 8011b2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011b32:	3a19      	subs	r2, #25
 8011b34:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011b38:	4288      	cmp	r0, r1
 8011b3a:	dd15      	ble.n	8011b68 <scalbnf+0x68>
 8011b3c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011bb8 <scalbnf+0xb8>
 8011b40:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011bbc <scalbnf+0xbc>
 8011b44:	ee10 3a10 	vmov	r3, s0
 8011b48:	eeb0 7a67 	vmov.f32	s14, s15
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	bfb8      	it	lt
 8011b50:	eef0 7a66 	vmovlt.f32	s15, s13
 8011b54:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011b58:	4770      	bx	lr
 8011b5a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011bc0 <scalbnf+0xc0>
 8011b5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011b62:	4770      	bx	lr
 8011b64:	0dd2      	lsrs	r2, r2, #23
 8011b66:	e7e5      	b.n	8011b34 <scalbnf+0x34>
 8011b68:	4410      	add	r0, r2
 8011b6a:	28fe      	cmp	r0, #254	@ 0xfe
 8011b6c:	dce6      	bgt.n	8011b3c <scalbnf+0x3c>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	dd06      	ble.n	8011b80 <scalbnf+0x80>
 8011b72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011b76:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011b7a:	ee00 3a10 	vmov	s0, r3
 8011b7e:	4770      	bx	lr
 8011b80:	f110 0f16 	cmn.w	r0, #22
 8011b84:	da09      	bge.n	8011b9a <scalbnf+0x9a>
 8011b86:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011bc0 <scalbnf+0xc0>
 8011b8a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011bc4 <scalbnf+0xc4>
 8011b8e:	ee10 3a10 	vmov	r3, s0
 8011b92:	eeb0 7a67 	vmov.f32	s14, s15
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	e7d9      	b.n	8011b4e <scalbnf+0x4e>
 8011b9a:	3019      	adds	r0, #25
 8011b9c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ba0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011ba4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011bc8 <scalbnf+0xc8>
 8011ba8:	ee07 3a90 	vmov	s15, r3
 8011bac:	e7d7      	b.n	8011b5e <scalbnf+0x5e>
 8011bae:	bf00      	nop
 8011bb0:	ffff3cb0 	.word	0xffff3cb0
 8011bb4:	4c000000 	.word	0x4c000000
 8011bb8:	7149f2ca 	.word	0x7149f2ca
 8011bbc:	f149f2ca 	.word	0xf149f2ca
 8011bc0:	0da24260 	.word	0x0da24260
 8011bc4:	8da24260 	.word	0x8da24260
 8011bc8:	33000000 	.word	0x33000000

08011bcc <floorf>:
 8011bcc:	ee10 3a10 	vmov	r3, s0
 8011bd0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011bd4:	3a7f      	subs	r2, #127	@ 0x7f
 8011bd6:	2a16      	cmp	r2, #22
 8011bd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011bdc:	dc2b      	bgt.n	8011c36 <floorf+0x6a>
 8011bde:	2a00      	cmp	r2, #0
 8011be0:	da12      	bge.n	8011c08 <floorf+0x3c>
 8011be2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011c48 <floorf+0x7c>
 8011be6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011bea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf2:	dd06      	ble.n	8011c02 <floorf+0x36>
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	da24      	bge.n	8011c42 <floorf+0x76>
 8011bf8:	2900      	cmp	r1, #0
 8011bfa:	4b14      	ldr	r3, [pc, #80]	@ (8011c4c <floorf+0x80>)
 8011bfc:	bf08      	it	eq
 8011bfe:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011c02:	ee00 3a10 	vmov	s0, r3
 8011c06:	4770      	bx	lr
 8011c08:	4911      	ldr	r1, [pc, #68]	@ (8011c50 <floorf+0x84>)
 8011c0a:	4111      	asrs	r1, r2
 8011c0c:	420b      	tst	r3, r1
 8011c0e:	d0fa      	beq.n	8011c06 <floorf+0x3a>
 8011c10:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011c48 <floorf+0x7c>
 8011c14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c20:	ddef      	ble.n	8011c02 <floorf+0x36>
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	bfbe      	ittt	lt
 8011c26:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011c2a:	fa40 f202 	asrlt.w	r2, r0, r2
 8011c2e:	189b      	addlt	r3, r3, r2
 8011c30:	ea23 0301 	bic.w	r3, r3, r1
 8011c34:	e7e5      	b.n	8011c02 <floorf+0x36>
 8011c36:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011c3a:	d3e4      	bcc.n	8011c06 <floorf+0x3a>
 8011c3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011c40:	4770      	bx	lr
 8011c42:	2300      	movs	r3, #0
 8011c44:	e7dd      	b.n	8011c02 <floorf+0x36>
 8011c46:	bf00      	nop
 8011c48:	7149f2ca 	.word	0x7149f2ca
 8011c4c:	bf800000 	.word	0xbf800000
 8011c50:	007fffff 	.word	0x007fffff

08011c54 <_init>:
 8011c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c56:	bf00      	nop
 8011c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c5a:	bc08      	pop	{r3}
 8011c5c:	469e      	mov	lr, r3
 8011c5e:	4770      	bx	lr

08011c60 <_fini>:
 8011c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c62:	bf00      	nop
 8011c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c66:	bc08      	pop	{r3}
 8011c68:	469e      	mov	lr, r3
 8011c6a:	4770      	bx	lr
